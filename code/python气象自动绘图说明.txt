#最近一次更新：
1.增加了Auto_pcolormesh的一个新参数，iftest代表是否要在马赛克图每个方格的正中央标记该方格的具体数值。
2.增加了一个新的函数，open_data_tif用于打开tif文件。
3.对所有深度学习函数和机器学习函数增加了一个新的功能，可以使用valid_size切分验证集，同时可以使用k_fold进行k折交叉验证；if_early_stopping用于早停；增加自动计算分类权重功能模块。
4.删除了所有有关于深度学习chose的函数，原因是他们很久没有更新（深度学习可以通过多种简洁方式进行因子挑选，使用前向传播和后向传播时最耗费计算资源和时间的一种方式，故弃用）
5.增加了一个新的函数Auto_petal_plot用于绘制花瓣图；Auto_pie_plot用于绘制饼图；Auto_radar_plot用于绘制雷达图。
6.增加了Autobar_or_line的一个参数，bar_test为yes时在bar上方可以绘制具体数值。


所需库包：
1.numpy（通过下载）
2.pandas（通过下载）
3.matplotlib（通过下载）
4.netCDF4（通过下载）
5.cartopy（通过下载）
6.xarray（通过下载）
7.scipy（通过下载）
8.datetime（python自带）
9.eofs（通过下载）
10.sklearn（python自带）
11.math（python自带）
12.h5py(通过下载)
13.pyhdf（通过下载）
14.wrf-python（通过下载）
15.keras （通过下载）
16.salem (通过下载)
17.geopandas（通过下载）（需要下载5个基础包，详情见https://blog.csdn.net/weixin_42140356/article/details/114590984）
18.regionmask（通过下载，也需要5个基础包，与19所需要基础包相同）
19.descartes（通过下载）
20.rpy2（通过下载）
21.pyeof（通过下载）
22.lightgbm（通过下载）
23.pingouin（通过下载）
24.windrose（通过下载）
25.keras-tcn（通过下载）
26.tensorflow（通过下载）
27.pygrib（通过下载）
28.cfgrib（通过下载）
29.xgboost（通过下载）
30.catboost（通过下载）
31.EMD-signal（通过下载）
32.bayesian-optimization（通过下载）
33.ngboost（通过下载）
34.opencv-python（通过下载）
35.xMCA（通过下载）
36.model_evaluation（通过GIthub下载）
37.minisom（通过下载）
38.geopy（通过下载）
39.collections（通过下载）
40.shap（通过下载）
41.pytorch（通过下载）
42.torchmetrics（通过下载）
43.pytorch-tcn（通过下载）
44.pykan（通过下载）
45.deep-forest（通过下载）
46.cdsapi（通过下载）
47.vit_pytorch（通过下载)
48.geoxgboost（通过下载）
以下库包作者给出，详情参阅百度网盘：
Little_wave,Taylor,regression_mode,Move_t_test,SNHT,Buishand_U,pettitt,mktest,maskout_country,maskout_province,lanczos

函数的使用：
1.首先引入模块 import Auto_paint_self

2.各个函数的功能
2.1 v,lon,lat,levels,latlow,lattop,lonleft,lonright,times=Auto_paint_self.open_data_nc(ncmode,filename,v_name,iftime,timename,timestart,timeend,iflon,lonname,iflat,latname,latlow,lattop,lonleft,lonright,latresolution,lonresolution,ifexper,iflevel,levelname,level,changeresolution=1,timespace=1,ifchange_west_east='no',ifinterpolate='no')

该函数用于读取单个或多个nc文件并且进行时间、空间上的范围圈定，并且返回与变量有关的各种时间、空间信息
输入值：
ncmode：必要参数，字符串类型。该参数设定为是读取单个nc文件还是读取多个nc文件或者处理wrfoutput文件，'one'代表读取单个nc文件，'more_time'代表读取多个nc文件，nc文件按照时间分隔，'more_level'代表读取多个nc文件，nc文件按照层次分隔，'one_wrf'代表处理wrfoutput文件。
filename：必要参数，字符串类型。若ncmode为'one'或'one_wrf',则该参数设定为要读取的nc文件的路径，如'E:/hgt.nc'；若ncmode为'more_time'或'more_level',则该参数设定为装载多个nc文件的文件夹，如'E:/hgt/'(hgt文件夹中有多个nc文件，其按照时间分割)。
v_name：必要参数，字符串类型。该参数设定为nc文件中要读取变量的名称，如'temperature'。
iftime：必要参数，字符串类型。该参数代表nc文件是否有时间维，'yes'代表有，'no'代表没有，'self'代表变量时间为自定义时间（时间不是datetime格式）。如果ncmode为'more_time'，还可以填写'create'代表读取的多个nc文件没有时间维，自己指定nc文件的时间。
timename：必要参数，字符串类型。该参数设定为nc文件中变量的时间维名称，如'time'。如果iftime为'create'则填写自己想要命名时间维度的名称。如果iftime为'no'没有时间则可以任意赋值。
timestart：必要参数，字符串类型。该参数代表截取时间的起始日期，根据填写格式的不同而代表时间间隔不同，如'1981'代表时间间隔为年，'1981-01'代表时间间隔为月，'1981-01-01'代表时间间隔为日,'1981-01-01-00'代表时间间隔为小时，'1981-01-01-00-00'代表时间间隔为分钟，'1981-01-01-00-00-00'代表时间间隔为秒。如果iftime为'create'则填写第一个nc文件的时间。如果iftime为'no'没有时间则可以任意赋值。
timeend：必要参数，字符串类型。该参数代表截取时间的结束日期，填写格式同timestart。如果iftime为'create'则填写最后一个nc文件的时间。如果iftime为'no'没有时间则可以任意赋值。
iflon：必要参数，字符串类型。该参数代表nc文件是否有经度维，'yes'代表有，'no'代表没有。
lonname：必要参数，字符串类型。该参数设定为nc文件中变量的经度名称，如'lon'。如果iflon为'no'没有经度维则可以任意赋值。
iflat：必要参数，字符串类型。该参数代表nc文件是否有纬度维，'yes'代表有，'no'代表没有。
latname：必要参数，字符串类型。该参数设定为nc文件中变量的纬度名称，如'lat'。如果iflat为'no'没有纬度维则可以任意赋值。
latlow：必要参数，整形。该参数设定为变量的空间范围中最低纬度，如20。如果iflat为'no'没有纬度维则可以任意赋值。当ifinterpolate为'yes'时，代表插值的最低纬度。
lattop：必要参数，整形。该参数设定为变量的空间范围中最高纬度，如70。如果iflat为'no'没有纬度维则可以任意赋值。当ifinterpolate为'yes'时，代表插值的最高纬度。
lonleft：必要参数，整形。该参数设定为变量的空间范围中最左经度。输入范围请按照原始nc文件lon范围划定；若文件中经度范围为0-360，则小于180代表东半球，大于180代表西半球。若文件中经度范围为-180-180，则小于0代表西半球，大于0代表东半球。输入格式同latlow和lattop。如果iflon为'no'没有经度维则可以任意赋值。当ifinterpolate为'yes'时，代表插值的最左经度。
lonright：必要参数，整形。该参数设定为变量的空间范围中最右经度。输入范围请按照原始nc文件lon范围划定；若文件中经度范围为0-360，则小于180代表东半球，大于180代表西半球。若文件中经度范围为-180-180，则小于0代表西半球，大于0代表东半球。输入格式同latlow和lattop。如果iflon为'no'没有经度维则可以任意赋值。当ifinterpolate为'yes'时，代表插值的最右经度。
latresolution：必要参数，实型。该参数设定为变量空间纬度方向分辨率，如输入0.5代表纬度方向分辨率为0.5。如果iflat为'no'没有纬度维则可以任意赋值。当ifinterpolate为'yes'时，代表插值的纬度分辨率。
lonresolution：必要参数，实型。该参数设定为变量空间经度方向分辨率，如输入0.5代表经度方向分辨率为0.5。如果iflon为'no'没有经度维则可以任意赋值。当ifinterpolate为'yes'时，代表插值的经度分辨率。
ifexper：必要参数，字符串类型。该参数代表变量是否有expver这个参数，'yes'代表有，'no'代表没有。通常expver是era5某些数据中特有参数。
iflevel：必要参数，字符串类型。该参数代表变量是否有高度层次，'yes'代表有并且选取某一层，'no'代表没有，'all'代表有并且选取全部层次，'self'代表有并且选取其中某个层次区间，'selfchose'代表有并且选取其中某几个层次；当ncmode为'one_wrf'时不能够选择'self'和'all'即不能够选择某个层次区间也不能够选择全部层次；当ncmode为'more_level'时可以选择'create'手动创建高度维
levelname：必要参数，字符串类型。该参数设定为变量高度层次的名称，如'level'。若iflevel为'no'则该参数可以任意赋值。
level：必要参数；代表所选取的层次。当iflevel为'yes'时填写某个高度层次，为整形，如'1000'代表选取1000hpa层次；当iflevel为'no'时可以任意赋值；当iflevel为'self'时填写某个高度区间，填写格式如[1000,500]代表选取1000hpa到500hpa之间所有的层次，为tumple类型；当iflevel为'selfchose'填写某几个层次，填写格式如['1000','800','500']代表选取1000hpa，800hpa，500hpa三个层次，为tumple类型；当iflevel为'create'时，填写手动创建的层次，比如要和变量v的数目对应，如读取进来5个文件，填写[100,200,300,400,500]代表创建5个层次的levels
changeresolution：可选参数，整形。该参数用于改变数据的空间分辨率。假如数据空间分辨率为0.1°×0.1°，若该参数填写2，代表改变分辨率到0.2°×0.2°；不改变数据分辨率该参数默认为1。
timespace：可选参数，整形。该参数用于创建时间维时指定时间间隔，只有在iftime为'create'时才会生效。默认值为1
ifchange_west_east：可选参数，字符串类型。该参数代表是否要交换东西半球的数据，'yes'代表交换，'no'代表不交换。目前只能将经度为0°-360°的数据变成-180°-180°或者将-180°-180°的数据变成0°到360°，会自动判别数据属于哪种。对于经度不涵盖全球的数据不支持。默认值为'no'
ifinterpolate：可选参数，字符串类型。该参数代表是否要对nc文件进行空间插值。'yes'代表需要，'no'代表不需要。默认值为'no'
返回值：
v：返回筛选过时间范围和空间范围后的变量。
lon：返回变量的经度维度。
lat：返回变量的纬度维度。
levels：返回变量的高度维度。
latlow：返回变量的最低纬度。
lattop：返回变量的最高纬度。
lonleft：返回变量的最左经度。
lonright：返回变量的最右经度。
times：返回变量的时间维度。

2.2 v,times=Auto_paint_self.deal_data_time(lonname,latname,iflevel,levelname,timename,timestart,timeend,v,lon,lat,levels,times,iflon,iflat,time,timemode,timespace)

该函数用于对时间维进行各种处理。
输入值：
lonname：必要参数，字符串类型。该参数设定为变量v的经度名称，如'lon'。与2.1的lonname一致。
latname：必要参数，字符串类型。该参数设定为变量v的纬度名称，如'lat'。与2.1的latname一致。
iflevel：必要参数，字符串类型。该参数代表变量是否有高度层次，'yes'代表有并且选取某一层，'no'代表没有，'all'代表有并且选取全部层次，'self'代表有并且选取其中某个层次区间，'selfchose'代表有并且选取其中某几个层次。与2.1的iflevel一致。
levelname：必要参数，字符串类型。该参数设定为变量高度层次的名称，如'level'。若iflevel为'no'则该参数可以任意赋值。与2.1的levelname一致。
timename：必要参数，字符串类型。该参数设定为变量v的时间维名称，如'time'。与2.1的timename一致。
timestart：必要参数，字符串类型。该参数代表截取时间的起始日期，目前只能对年月日进行限定，填写格式为'1981-01-01'。与2.1的timestart一致。
timeend：必要参数，字符串类型。该参数代表截取时间的结束日期，目前只能对年月日进行限定，填写格式同timestart。与2.1的timeend一致。
v：必要参数，np.DataArray类型。该参数代表需要被选择时间的变量v。通常由2.1或者2.3的返回值v直接传入。
lon:必要参数，np.DataArray或者np.array类型。该参数代表变量v的经度。通常由2.1或者2.3的返回值lon直接传入。
lat:必要参数，np.DataArray或者np.array类型。该参数代表变量v的纬度。通常由2.1或者2.3的返回值lat直接传入。
levels:必要参数，np.DataArray或者np.array类型。该参数代表变量v的高度。通常由2.1或者2.3的返回值levels直接传入。
times:必要参数，np.DataArray或者np.array类型。该参数代表变量v的时间维度。通常由2.1或者2.3的返回值times直接传入。
iflat：必要参数，字符串类型。该参数代表变量v是否有纬度维，'yes'代表有，'no'代表没有。
iflon：必要参数，字符串类型。该参数代表变量v是否有经度维，'yes'代表有，'no'代表没有。
time：必要参数；代表所需要取的季节/月份等。当timemode为'season','single_seasonave'时可以填写'DJF'(冬季)，'MAM'(春季),'JJA'(夏季),'SON'(秋季)，代表取某个季节，为字符串类型；当timemode为'month'或者'single_monthave'时可以填写1-12中任意一个数字，代表取某个月份，为整形；当timemode为'day'时可以填写1-31中任意一个数字，代表取某日，为整形（注意，填写29时无非闰年2月数据；填写30时无每年二月数据；填写31时无没有31号的月份的数据）；当timemode为'yearave'或者'all'时则可以赋值任何数值（即该参数不会被用到）；当timemode为'self_chosemonth_ave'时填写经过selftime选择后的月份数量（如选择了4月、5月、6月、7月就填写4）；当timemode为'dayave'时填写数据一天有几个时次（如数据一天只有06，12，18，24四个时次就填写4）。
timemode：必要参数，字符串类型。该参数设定为要选取变量的时间特征，有如下几个选项：'all'代表取变量全部时间；'season'代表取某个季节；'month'代表取某个月份；'day'代表选取某天；'single_seasonave'代表选取单个季节做季节平均（每年1个时间点）；'all_seasonave'代表选取对每个季节都做季节平均（每年4个时间点）；yearave'代表做年平均；'single_monthave'代表对单个月做月平均（每年1个时间点据）；'all_monthave'代表对每个月都做月平均（每年12个时间点）；'self_chosemonth_ave'代表经过selftime处理后，自主选择几个月份，然后对这几个月份做月平均（每年n个时间点，n代表所选择月份数量）；'dayave'代表对数据做日平均；'de-seasonal cycle'代表对数据做去季节循环操作。其中'single_monthave'和'all_monthave'和'day'只有timespace为'day'时才可以选择，'self_chosemonth_ave'只有timespace为'month'时才可以选择，‘dayave’只有timespace为'hour'时才可以选择；'de-seasonal cycle'只有timespace为'day'和'month'时才可以选择；timespace为'season'时只能选择'yearave'。剩下的timespace为'day'或者'month'时都可以选择。把所有的'ave'替换成'sum'代表对该时间段内所有数据求和，替换成'max'代表对该时间段内所有数据求其最大值，替换为'min'代表对该时间段内所有数据求其最小值。他们的适用范围同'ave'求平均适用范围
timespace：必要参数，字符串类型。该参数设定为变量v的时间间隔，'day'代表nc文件时间间隔为天；'month'代表nc文件的时间间隔为月；'season'代表nc文件的间隔为季节；'week'代表nc文件的间隔为周；'hour'代表nc文件的间隔为小时。
返回值：
v：返回筛选过时间后的变量。
times：返回变量的时间维度。

2.3 v,lon,lat,latlow,lattop,lonleft,lonright,times=Auto_paint_self.open_hdf(hdfmode,filedir,v_path,timebegin,timestart,timeend,iflon,lonname,iflat,latname,latlow,lattop,lonleft,lonright,latresolution,lonresolution,timespace=1,changeresolution=1)

该函数用于读取hdf5文件并且进行时间、空间上的范围圈定，并且返回与变量有关的各种时间、空间信息
输入值：
hdfmode：必要参数，字符串类型。该参数设定为打开hdf或者hdf5文件，填写'hdf'代表打开的是hdf类型文件，填写'hdf5'打开的是hdf5类型的文件。
filedir：必要参数，字符串类型。该参数设定为装载多个hdf5文件的文件夹，如'E:/hgt/'(hgt文件夹中有多个hdf5文件，其按照时间分割)。
v_path：必要参数，字符串类型。该参数设定为hdf5中变量的路径。通常hdf5中变量会保存在文件中的某个位置，如'biosphere/01/Rh'。
timebegin：必要参数，字符串类型。该参数设定为hdf5文件中变量起始时间（必须与文件总起始时间一致）。根据填写格式的不同而代表时间间隔不同，如'1981'代表时间间隔为年，'1981-01'代表时间间隔为月，'1981-01-01'代表时间间隔为日,'1981-01-01-00'代表时间间隔为小时，'1981-01-01-00-00'代表时间间隔为分钟，'1981-01-01-00-00-00'代表时间间隔为秒
timestart：必要参数，字符串类型。该参数代表截取时间的起始日期（读者选定时间），填写格式要和timebegin相同。
timeend：必要参数，字符串类型。该参数代表截取时间的结束日期（读者选定时间），填写格式要和timebegin相同。
iflon：必要参数，字符串类型。该参数代表hdf或者hdf5文件是否有经度维，'yes'代表有，'create'代表没有，但是要手动创造经度维。
lonname：必要参数，字符串类型。该参数设定为hdf或者hdf5文件中变量的经度名称，如'lon'（具体根据文件中经度位置和名称而定）；若iflon为'create'则可以自命名经度名称。
iflat：必要参数，字符串类型。该参数代表hdf或者hdf5文件是否有纬度维，'yes'代表有，'create'代表没有，但是要手动创造纬度维。
latname：必要参数，字符串类型。该参数设定为hdf或者hdf5文件中变量的纬度名称，如'lat'（具体根据文件中纬度位置和名称而定）；若iflat为'create'则可以自命名纬度名称。
latlow：必要参数，整形。该参数设定为变量的空间范围中最低纬度，如20；若iflat为'create'则可以自定义最低纬度。
lattop：必要参数，整形。该参数设定为变量的空间范围中最高纬度，如70；若iflat为'create'则可以自定义最高纬度。
lonleft：必要参数，整形。该参数设定为变量的空间范围中最左经度。输入范围请按照原始hdf5文件lon范围划定；若文件中经度范围为0-360，则小于180代表东半球，大于180代表西半球。若文件中经度范围为-180-180，则小于0代表西半球，大于0代表东半球。输入格式同latlow和lattop。若iflon为'create'则可以自定义最左经度
lonright：必要参数，整形。该参数设定为变量的空间范围中最右经度。输入范围请按照原始hdf5文件lon范围划定；若文件中经度范围为0-360，则小于180代表东半球，大于180代表西半球。若文件中经度范围为-180-180，则小于0代表西半球，大于0代表东半球。输入格式同latlow和lattop。若iflon为'create'则可以自定义最右经度
latresolution：必要参数，实型。该参数设定为变量空间纬度方向分辨率，如输入0.5代表纬度方向分辨率为0.5。若iflat为'create'则不起作用
lonresolution：必要参数，实型。该参数设定为变量空间经度方向分辨率，如输入0.5代表经度方向分辨率为0.5。若iflon为'create'则不起作用
timespace：可选参数，整形。该参数用于创建时间维时指定时间间隔。默认值为1
changeresolution：可选参数，整形。该参数用于改变数据的空间分辨率。假如数据空间分辨率为0.1°×0.1°，若该参数填写2，代表改变分辨率到0.2°×0.2°；不改变数据分辨率该参数默认为1。
返回值：
v：返回筛选过时间范围和空间范围后的变量。
lon：返回变量的经度维度。
lat：返回变量的纬度维度。
latlow：返回变量的最低纬度。
lattop：返回变量的最高纬度。
lonleft：返回变量的最左经度。
lonright：返回变量的最右经度。
times：返回变量的时间维度。

2.4 v=Auto_paint_self.data_all(v,iflevel,iftime,iflat,iflon,times,datamode,dealmode,ifchosetime='no',chosetime=None)

该函数用于对变量v进行求平均、距平、标准化等计算
输入值：
v：必要参数，numpy.array类型或者numpy.Dataarray类型。该参数为需要被处理的变量v，通常由2.1和2.3的返回值v直接传入。
iflevel：必要参数，字符串类型。与2.1的iflevel意义相同。
iftime：必要参数，字符串类型。该参数代表变量v是否有时间维，'yes'代表有，'no'代表没有。
iflat：必要参数，字符串类型。该参数代表变量v是否有纬度维，'yes'代表有，'no'代表没有。
iflon：必要参数，字符串类型。该参数代表变量v是否有经度维，'yes'代表有，'no'代表没有。
times：必要参数，numpy.array类型。该参数为需要被处理的变量v的时间维度，通常由2.1和2.3的返回值times直接传入。
datamode：必要参数，字符串类型。该参数代表需要对v处理的方法，'ave'代表求平均，'anomaly'代表求距平，'standard'代表进行标准化。
dealmode：必要参数，字符串类型。该参数代表对v的哪个维度进行处理。'time'代表对时间维进行处理；'area'代表对经度纬度维进行处理；'timearea'代表同时对时间和经度纬度进行处理；'arealat'代表对纬度进行处理；'arealon'代表对经度进行处理；'timearealat'代表同时对时间纬度进行处理；'timearealon'代表同时对时间经度进行处理；'timelevel'代表同时对时间高度维进行处理；'levelarealat'代表同时对高度和纬度进行处理；'levelarealon'代表同时对高度和经度进行处理；'level'代表对高度维进行处理；'levelarea'代表同时对三维空间进行处理；'timelevelarealat'代表同时对时间高度纬度进行处理；'timelevelarealon'代表同时对时间高度经度进行处理；'timelevelarea'代表同时对时间高度和经度纬度进行处理。
ifchosetime：可选参数，字符串类型。该参数代表是否选择某个特定时间。'nc'代表对nc文件选定某个时间；'hdf5'代表对hdf5选定某个时间；填写其他如'no'代表不选定某个特定时间。默认值为'no'
chosetime：可选参数，字符串类型。该参数代表选择某个特定时间的时间点。若ifchosetime为'nc'则填写如'1981-01-01',可以选定某年某月某日；若ifchosetime为'hdf5'则填写如'1981'选定某年(目前hdf5只支持选定某年 ，后续会更新支持某月某日的选定)；若ifchosetime为'no'则可以任意赋值。默认值为None
返回值：
v：返回处理过后的变量v。

2.5 eof,pc,var,north,monte=Auto_paint_self.Auto_eof(v,times,levels,lat,lon,eofmode='xy',eofnum='all',eofmethod='eof',montenum=10,montep=0.05,rotnum='all')

该函数用于对某个变量v求eof或者reof。相当于对v进行降维操作（选择过eof模态后相当于降维）。
输入值：
v：必要参数，numpy.Dataarray类型。该参数为需要被求eof或者reof的变量v，最好为三维，即时间维和高度维、纬度维、经度维中任意两维（目前求reof只能做三维）。
times：必要参数，numpy.array类型。该参数为v的时间维，通常由2.1或者2.3的返回值times直接传入。
levels：必要参数，numpy.array类型。该参数为v的高度维，通常由2.1或者2.3的返回值levels直接传入。
lon：必要参数，numpy.array类型。该参数为v的纬度维，通常由2.1或者2.3的返回值lon直接传入。
lat：必要参数，numpy.array类型。该参数为v的经度维，通常由2.1或者2.3的返回值lat直接传入。
eofmode：可选参数，字符串类型。该参数代表要做eof的维度，'xy'代表空间上是纬度和经度；'xz'代表空间上是高度和经度；'yz'代表空间上是高度和纬度。
eofnum：可选参数，字符串类型或整形。该参数为做eof时要保留的eof模态数目。默认为'all'代表保留所有模态，也可以填写例如3代表保留前三个模态
eofmethod：可选参数，字符串类型。该参数代表做eof时所用到的方法，填写'eof'代表做普通的经验正交函数分解；；填写reof代表做旋转eof。默认值为'eof'
montenum：可选参数，整形。代表蒙特卡洛检验的重复次数。默认值为10
montep：可选参数，实型。代表蒙特卡洛检验的显著性水平。默认值为0.05
rotnum：可选参数，字符串类型或整形。代表做reof时，所旋转的模态数目。模型值为'all'代表旋转所有模态，也可以填写3代表旋转前三个模态。
返回值：
eof：返回v做完eof分解或reof后指定模态的空间场。
pc：返回v做完eof分解或reof后指定模态的时间系数。
var：返回v做完eof分解后指定模态的方差贡献。
north：返回每个模态是否通过了north检验的结果。
monte：返回每个模态是否通过了蒙特卡洛检验的结果。


2.6 lp,rp,le,re,lho,rho,lphot,rphot,lhe,rhe,lphet,rphet,var,north,monte=Auto_paint_self.Auto_SVD(v1,v2,v1times,v1levels,v1lat,v1lon,v2times,v2levels,v2lat,v2lon,svdmode='xy',svdnum='all',montenum=10,montep=0.05)

该函数用于对指定变量v1和v2求svd，相当于对v1和v2进行降维操作（选择过SVD模态后相当于降维）。
输入值：
v1：必要参数，xr.Dataarray类型。该参数为需要被求SVD的左场变量v1，必须为三维，即时间维、纬度维、经度维。
v2：必要参数，xr.Dataarray类型。该参数为需要被求SVD的右场变量v2，必须为三维，即时间维、纬度维、经度维。
v1times：必要参数，np.array类型。该参数代表变量v1的时间维度。
v1levels：必要参数，np.array类型。该参数代表变量v1的高度维度。
v1lat：必要参数，np.array类型。该参数代表v1的纬度维度。
v1lon：必要参数，np.array类型。该参数代表v1的经度维度。
v2times：必要参数，np.array类型。该参数代表变量v2的时间维度。
v2levels：必要参数，np.array类型。该参数代表变量v2的高度维度。
v2lat：必要参数，np.array类型。该参数代表v2的纬度维度。
v2lon：必要参数，np.array类型。该参数代表v2的经度维度。
svdmode：可选参数，字符串类型。该参数代表要做svd的维度，'xy'代表空间上是纬度和经度；'xz'代表空间上是高度和经度；'yz'代表空间上是高度和纬度。
svdnum：可选参数，整形或字符串类型。该参数为做SVD时要保留的SVD模态数目（该数目一定要小于时间维度长度）。默认为‘all’代表取全部模态，也可输入数字如3代表只需要前三模态
montenum：可选参数，整形。代表蒙特卡洛检验的重复次数。默认值为10
montep：可选参数，实型。代表蒙特卡洛检验的显著性水平。默认值为0.05
返回值：
lp：返回v1和v2做完SVD分解后指定模态的左空间场。
rp：返回v1和v2做完SVD分解后指定模态的右空间场。
le：返回v1和v2做完SVD分解后指定模态的左场对应的时间系数。
re：返回v1和v2做完SVD分解后指定模态的右场对应的时间系数。
lho：返回v1和v2做完SVD分解后指定模态的同性相关左空间场。
rho：返回v1和v2做完SVD分解后指定模态的同性相关右空间场。
lphot：返回v1和v2做完SVD分解后指定模态的同性相关左场对应的显著性水平。
rphot：返回v1和v2做完SVD分解后指定模态的同性相关右场对应的显著性水平。
lhe：返回v1和v2做完SVD分解后指定模态的异性相关左空间场。
rhe：返回v1和v2做完SVD分解后指定模态的异性相关右空间场。
lphet：返回v1和v2做完SVD分解后指定模态的异性相关左场对应的显著性水平。
rphet：返回v1和v2做完SVD分解后指定模态的异性相关右场对应的显著性水平。
var：返回v1和v2做完SVD分解后指定模态的方差贡献。
north：返回每个模态是否通过了north检验的结果。
monte：返回每个模态是否通过了蒙特卡洛检验的结果。

2.7 r,p=Auto_paint_self.Auto_r(v1,v2,rmode,ifNe='yes')

该函数用于对指定的v1和v2求相关系数，相当于降维操作
输入值：
v1：必要参数，numpy.array或者numpy.Dataarray类型。该参数为需要求相关系数的第一个变量v1，目前可以输入一维或者三维变量。若rmode为'area_t'或者'area_area'要求其为三维场。若rmode为't_t'则要求其为一维场。
v2：必要参数，numpy.array或者numpy.Dataarray类型。该参数为需要求相关系数的第一个变量v2，目前可以输入一维或者三维变量。若rmode为'area_area'要求其为三维场。若rmode为'area_t'或者't_t'则要求其为一维场。
rmode：必要参数，字符串类型。代表要求相关系数的模式，即v1和v2的格式。有三个参数可选，'area_t'代表v1是三维场，v2是一维场，相当于v2对于v1的每一个格点求相关系数，返回一个二维场；'area_area'代表v1是三维场，v2也是三维场，要求v1和v2大小相同，相当于对v1和v2对应格点求相关系数，返回一个二维场；'t_t'代表v1和v2都是一维场，相当于对v1和v2直接求相关系数，返回一个数值。
ifNe:可选参数，字符串类型。该参数代表是否使用有效自由度。默认值为'yes'代表使用有效自由度
返回值：
r：返回v1和v2的相关系数，根据rmode的不同可能是一个二维场，也可能是一个数值。
p：返回用于r显著性检验的显著性值，与r的大小完全相同。

2.8 vs,times=Auto_paint_self.selftime(v,timename,times,iflevel,iflat,iflon,timelist,selftimemode,ifsametime='yes')

该函数用于对于指定的v（必须包含时间维度）选择某几个指定时间。
输入值：
v：必要参数，numpy.array或者numpy.Dataarray类型。该参数为需要被选择时间的变量v，其必须包含时间维。
timename：必要参数，字符串类型。该参数设定为变量v的时间维名称，如'time'。与2.1中的timename一致。
times：必要参数，numpy.array类型。该参数为需要被处理的变量v的时间维度，通常由2.1和2.3的返回值times直接传入。
iflevel：与2.1的iflevel意义相同。
iflat：必要参数，字符串类型。该参数代表变量v是否有纬度维，'yes'代表有，'no'代表没有。
iflon：必要参数，字符串类型。该参数代表变量v是否有经度维，'yes'代表有，'no'代表没有。
timelist：必要参数，tumple类型（tumple中输入字符串类型）。该参数代表要选择的时间序列，根据selftimemode的选择不同所要求的格式不同，格式例如['1981','1982','2001']（selftimemode == 'year'）、['01','03','05']（selftimemode == 'month'）、['02','25','17']（selftimemode == 'day'）、['06','25','08','31']（selftimemode == 'mont_day_to_month_day'）。
selftimemode：必要参数，字符串类型。该参数代表选择时间的模式，'year'代表选定某年的所有数据，'month'代表选定某月的所有数据，'day'代表选定某天的所有数据，'month_day_to_month_day'代表对每年都选取某月-某日到某月-某日的数据。
ifsametime：可选参数，字符串类型。该参数代表是否要在闰年时取到2月时将时间向后一个步长，在某些研究中这样做会使得未取到二月的数据和取到二月的数据的长度一致；'yes'代表默认在闰年每个时次向后一个步长，'no'代表不这样做。默认值为'yes'
返回值：
vs：返回选择过时间后的变量vs。
times:返回变量的时间维度。

2.9 Auto_paint_self.create_nc(times,lat,lon,levels,v,timename,latname,lonname,v_name,iflevel,levelname,iftime,iflat,iflon,newfilename)

该函数用于创建一个新的nc文件，通常用于open_data_nc的后处理（将多个nc文件拼接并输出）。
输入值：
timename：必要参数，字符串类型。该参数设定为变量v的时间维名称，如'time'。与2.1中的timename一致。
times：必要参数，numpy.array类型。该参数为需要被处理的变量v的时间维度，通常由2.1和2.3的返回值times直接传入。
latname：必要参数，字符串类型。该参数设定为nc文件中变量的纬度名称，如'lat'。与2.1中的latname一致。
lat：必要参数，numpy.array类型。该参数为v的经度维，通常由2.1或者2.3的返回值lat直接传入。
lonname：必要参数，字符串类型。该参数设定为nc文件中变量的经度名称，如'lon'。与2.1中的lonname一致。
lon：必要参数，numpy.array类型。该参数为v的纬度维，通常由2.1或者2.3的返回值lon直接传入。
iflevel：必要参数，字符串类型。该参数代表变量是否有高度层次，'yes'代表有并且选取某一层，'no'代表没有，'all'代表有并且选取全部层次，'self'代表有并且选取其中某个层次区间，'selfchose'代表有并且选取其中某几个层次。与2.1中的iflevel一致。
levelname：必要参数，字符串类型。该参数设定为变量高度层次的名称，如'level'。若iflevel为'no'则该参数可以任意赋值。与2.1中的levelname一致。
levels：必要参数，numpy.array类型。该参数为v的高度维，若iflevel不为'no'时必须填写。通常由2.1的返回值levels直接传入。
v_name：必要参数，字符串类型。该参数设定为nc文件中要读取变量的名称，如'temperature'。与2.1中的v_name一致。
v：必要参数，numpy.array类型或者numpy.Dataarray类型。该参数为变量v，通常由2.1和2.3的返回值v直接传入。
iftime：必要参数，字符串类型。该参数代表创建的nc文件中的变量v是否有时间维，'yes'代表有，'no'代表没有，'self'代表有时间维但是时间格式为自定义格式；当iftime为'yes'时要求times必须是np.datetime64格式，如果times不是这个格式，则使用iftime=='self'。
iflat：必要参数，字符串类型。该参数代表创建的nc文件中的变量v是否有纬度维，'yes'代表有，'no'代表没有。
iflon：必要参数，字符串类型。该参数代表创建的nc文件中的变量v是否有经度维，'yes'代表有，'no'代表没有。
newfilename：必要参数，字符串类型。该参数设定生成的nc文件的保存路径加保存名称，例如'E:/hgt.nc'。
返回值：
该函数没有返回值。

2.10 Auto_paint_self.Autoshaded_quiver(v,vplus,v3d,v4d,lon,lat,levels,times,latlow,lattop,lonleft,lonright,shadedorquiver,picturemode,picturenum=1,row=1,column=1,dpi=600,shadedcolor=None,ifshp='no',shpname=None,ifsave='no',savename=None,valuemodel='+-',ifself_vmax_vmin='no',selfvmax =None,selfvmin=None,shaded_quiver_title=' ',ifline='no',ifclabel='no',ifxaxis='yes',ifyaxis='yes',ifcolorbar='no',ifhatch='no',hatchpoint=None,hatchvalue=None,quiverscale=1,quiverkey=1,xspace=5,yspace=5,zspace=10000,labelsize=20,section=10.0,ifmaskout='no',maskoutarea=None,iftangle='no',tangle=None,ifchina='no',chinamap=None,ifsouthseamap='no',southseamap=None,southsealoc=[0.8, 0.21, 0.1, 0.15],ifglobal='no',projection_mode='plate',ifgridline='no',ifgeo='no',geo=None)

该函数用于绘制二维空间填色/等值线/矢量图
输入值：
v：必要参数，numpy.array类型或者numpy.Dataarray类型。根据shadedorquiver参数的不同而有不同的填写要求。当shadedorquiver为'shaded'或者'onlyline'时，v代表用于绘制填色图或者等值线图的变量；当shadedorquiver为'quiver'时，v代表用于绘制风场图的第一个变量，通常为'U'风即纬向风；当shadedorquiver为'shadedandquiverandline'时，v代表绘制填色风场等值线叠加图中用于绘制填色图的变量；当shadedorquiver为'shadedandquiver'或者'lineandquiver'时，v代表绘制填色和风场或者等值线和风场叠加图中用于绘制填色图或者等值线的变量；v必须是二维的；在绘制散点图即shadedorquiver为'scatter'或'dense'时填写None值；在绘制轨迹图即shadedorquiver为'track'时v代表每条轨迹上每个点的值，也是二维的，第一维为轨迹，第二维为每个轨迹上的每个点的值。当picturenum大于1时，要求输入三维变量，第一个维度长度与picturenum相同，代表绘制每个子图所要用到的变量。
vplus：必要参数，numpy.array类型或者numpy.Dataarray类型。根据shadedorquiver参数的不同而有不同的填写要求。当shadedorquiver为'shaded'或者'onlyline'或者'scatter'或者'track'或者'dense'时，vplus不起作用，填写None；当shadedorquiver为'shadedandline'时，vplus代表用于绘制等值线的变量；当shadedorquiver为'quiver'时，vplus代表用于绘制风场图的第二个变量，通常为'V'风即经向风；当shadedorquiver为'shadedandquiverandline'时，vplus代表绘制填色风场等值线叠加图中用于绘制风场图的第一个变量，通常为'U'风即纬向风；当shadedorquiver为'shadedandquiver'或者'lineandquiver'时，vplus代表绘制填色和风场或者等值线和风场叠加图中用于绘制风场图的第一个变量，通常为'U'风即纬向风；vplus必须是二维的。当picturenum大于1时，要求输入三维变量，第一个维度长度与picturenum相同，代表绘制每个子图所要用到的变量。
v3d:必要参数，numpy.array类型或者numpy.Dataarray类型。根据shadedorquiver参数的不同而有不同的填写要求。当shadedorquiver为'shaded'或者'onlyline'或者'quiver'或者'scatter'或者'track'或者'dense'时，v3d不起作用，填写None；当shadedorquiver为'shadedandquiverandline'时，v3d代表绘制填色风场等值线叠加图中用于绘制风场图的第二个变量，通常为'V'风即经向风；当shadedorquiver为'shadedandquiver'或者'lineandquiver'时，v3d代表绘制填色和风场或者等值线和风场叠加图中用于绘制风场图的第二个变量，通常为'V'风即经向风；v3d必须是二维的。
v4d:必要参数，numpy.array类型或者numpy.Dataarray类型。根据shadedorquiver参数的不同而有不同的填写要求。当shadedorquiver为'shadedandquiverandline'时，v4d代表绘制填色风场等值线叠加图中用于绘制等值线图的变量；其他图中v4d均不起作用，填写None；v4d必须是二维的。当picturenum大于1时，要求输入三维变量，第一个维度长度与picturenum相同，代表绘制每个子图所要用到的变量。
lon：必要参数，numpy.array类型。该参数为v的经度维，通常由2.1或者2.3的返回值lon直接传入（shadedorquiver不为scatter时）；或者表示绘制散点图的经度数组；或者表示绘制轨迹图的各条轨迹的各个点的经度。在绘制纬度经度图（picturemode为'xy'）或者经高图（picturemode为'xz'）或者时间经度图（picturemode为'timex'）时用到。当picturenum大于1时，要求输入三维变量，第一个维度长度与picturenum相同，代表绘制每个子图所要用到的变量。
lat：必要参数，numpy.array类型。该参数为v的纬度维，通常由2.1或者2.3的返回值lat直接传入（shadedorquiver不为scatter时）；或者表示绘制散点图的纬度数组；或者表示绘制轨迹图的各条轨迹的各个点的纬度。在绘制纬度经度图（picturemode为'xy'）或者纬高图（picturemode为'yz'）或者时间纬度图（picturemode为'timey'）时用到。当picturenum大于1时，要求输入三维变量，第一个维度长度与picturenum相同，代表绘制每个子图所要用到的变量。
levels：必要参数，numpy.array类型。该参数为v的高度维，在纬高图（picturemode为'yz'）或者经高图（picturemode为'xz'）或者时间高度图（picturemode为'timez'）时用到。
times：必要参数，numpy.array类型。该参数为v的时间维，在画时间纬度图（picturemode为'timey'）或者时间经度图（picturemode为'timex'）或者时间高度图（picturemode为'timez'）时用到。
latlow：必要参数，整形。该参数设定为变量的空间范围中最低纬度，如20。与2.1中latlow一致。
lattop：必要参数，整形。该参数设定为变量的空间范围中最高纬度，如70。与2.1中lattop一致。
lonleft：必要参数，整形。该参数设定为变量的空间范围中最左经度。输入范围请按照变量v的lon范围划定；若v中经度范围为0-360，则小于180代表东半球，大于180代表西半球。若v中经度范围为-180-180，则小于0代表西半球，大于0代表东半球。输入格式同latlow和lattop。与2.1中lonleft一致。
lonright：必要参数，整形。该参数设定为变量的空间范围中最右经度。输入范围请按照变量v的lon范围划定；若v中经度范围为0-360，则小于180代表东半球，大于180代表西半球。若v中经度范围为-180-180，则小于0代表西半球，大于0代表东半球。输入格式同latlow和lattop。与2.1中lonright一致。
shadedorquiver：必要参数，字符串类型。该参数设定了需要画什么种类的图。画填色图还是流场图，‘shaded’代表填色图，'surface'代表绘制3d地形图（需要配合picturemode='3d'使用），‘quiver’代表流场图，‘onlyline’表示只画等值线，'shadedandline'代表绘制填色和等值线叠加图，'shadedandquiver'代表绘制填色和风场叠加图，'lineandquiver'代表绘制等值线和风场叠加图，'shadedandquiverandline'代表绘制填色和风场和等值线的叠加图；'scatter'代表绘制散点图；'track'表示轨迹图；'dense'代表绘制散点密度图；'dense_shaded'代表绘制散点密度填色图;'pcolormesh'代表绘制马赛克图；'pcolormeshandline'代表绘制马赛克和等值线叠加图；'pcolormeshandquiverandline'代表绘制马赛克和风场和等值线叠加图。
picturemode：必要参数，字符串类型。该参数设定了所画的图是水平图还是垂直刨面图；‘xy’代表二维水平图，‘yz’或者‘xz’代表二维垂直图，'timex'代表绘制时间经度图，'timey'代表绘制时间纬度图，'timez'代表绘制时间高度图；'3d'代表三维图（目前暂时不建议使用3d图，因为图很丑）
picturenum：可选参数，整形。该参数代表要绘制子图的数目。默认值为1
row：可选参数，整形。该参数代表要绘制子图的行数。默认值为1
column：可选参数，整形。该参数代表要绘制子图的列数。默认值为1
dpi：可选参数，整形。该参数可以改变画图所要求的dpi。默认值为600.
shadedcolor：可选参数，字符串类型。该参数根据shadedorquiver的不同而不同个。shadedorquiver带有'shaded'字样时，可以由读者自定义填色图的颜色，如'BrBG'为低值棕色，高值绿色，适合绘制LAI（leaf area index即叶面积指数）图。具体颜色代码见网址（https://blog.csdn.net/baishuiniyaonulia/article/details/81416649）；'shadedorquiver'为'scatter'时，自定义散点的颜色。
ifshp：可选参数，字符串类型。该参数代表是否要画底图，填写‘yes’代表画底图，‘no’代表不画底图。默认为'no'。当picturemode为'xy'时才可以填写'yes'，为'yz'或'xz'时不建议填写'yes'(可能会报错)。
shpname：可选参数，字符串类型。该参数代表底图的具体路径和名称，如果ifshp为‘yes’，则必须手动赋值，如'E:/map/country1.shp'；ifshp为'no'可以输入任意值；默认值为None。
ifsave：可选参数，字符串类型。该参数代表是否要保存图片，填写‘yes’代表保存图片，‘no’代表不保存图片。默认为'no'。
savename：可选参数，字符串类型。该参数代表保存图片的路径和图片名称，如果ifsave为'yes',则必须手动赋值，如'E:/SVD.png'；ifsave为‘no’可以输入任意值；默认值为None。
valuemodel：可选参数，字符串类型。该参数设定了画图的颜色分布。+-’代表变量有正有负，并且需要正值为红色，负值为蓝色（适合温度距平填色图）；‘-+’代表变量有正有负，并且需要正值为蓝色，负值为红色（适合降水或者相对湿度距平填色图）；‘+’代表变量只有正或者负，并且需要大值为红色，小值为蓝色（适合气候态温度填色图）；‘-’代表变量只有正或者负，并且需要大值为蓝色，小值为红色（适合气候态降水或者相对湿度填色图）;'+r'代表红色为小值，白色为大值;'-r'代表蓝色为小值，白色为大值。只对填色图生效。默认值为'+-'
ifself_vmax_vmin：可选参数，字符串类型。该参数代表是否要手动设定变量v的最大值与最小值。只对填色图和等值线图部分生效。'yes'表示手动设定，'no'表示不手动设定，'both'表示设定的最上界和最下界以外的值统一用相同颜色表示（即contourf中extend参数采用'both'）。注意，当valuemodel为'+-'或'-+'时，由于要保持colorbar的对称性，故最大值和最小值仍然按照vmax和vmin中绝对值最大的一个来取，故绝对值较小者的设定会失效（并非bug）。默认值为'no'
selfvmax：可选参数，实型。该参数表示手动设定的变量v的最大值。默认值为None
selfvmin：可选参数，实型。该参数表示手动设定的变量v的最小值。默认值为None
shaded_quiver_title：可选参数，字符串类型。该参数表明需要设定的图题名称。默认值为''，即不设定图题名称。
ifline：可选参数，字符串类型。该参数表明是否绘制等值线，填写'yes'代表绘制，'no'代表不绘制。只有shadedorquiver不为'quiver'时，才能选择'yes'。默认值为'no'。
ifclabel：可选参数，字符串类型。该参数表明是否绘制等值线标记，填写'yes'代表绘制，'no'代表不绘制。只有当ifline为'yes'时此参数才能选择'yes'，否则将报错。默认值为'no'。
ifxaxis：可选参数，字符串类型。该参数代表是否绘制x轴ticks，'yes'代表绘制，其他代表不绘制。默认值为'yes'
ifyaxis：可选参数，字符串类型。该参数代表是否绘制y轴ticks，'yes'代表绘制，其他代表不绘制。默认值为'yes'
ifcolorbar：可选参数，字符串类型。该参数表明是否绘制填色图色标和风矢量箭头，填写‘yes’代表绘制，‘no’代表不绘制。默认值为'no'。
ifhatch：可选参数，字符串类型。该参数表明是否对填色图进行显著性打点标记，通常用于绘制显著性区域，填写‘yes’代表进行显著性打点标记，填写‘no’代表不进行显著性打点标记。默认值为'no'。
hatchpoint：可选参数，numpy.array或者numpy.Dataarray类型。该参数表明显著性打点需要用到的数组，其大小要与绘制填色图或者风场图所用的v一致。当ifhatch为'yea'时必须填写。默认值为None。当picturenum大于1时，要求输入三维变量，第一个维度长度与picturenum相同，代表每个子图打点所要用到的变量。
hatchvalue：可选参数，整形。该参数表明显著性打点需要规定的显著性水平值，如0.05，代表对通过显著性水平为百分之五的区域进行打点标记。当ifhatch为'yea'时必须填写。默认值为None。
quiverscale：可选参数，整形。该参数表明绘制的风场矢量图标杆长短。只有shadedorquiver不为'shaded'和'onlyline'时，即绘制风场图时才会生效。该参数数值越大代表风向杆长度越短，越小则代表风向杆长度越长。当不画风场图时此项不起作用。默认值为1。
quiverkey：可选参数，整形。该参数代表绘制的风矢量单位，如填写1代表单位风矢量为1m/s，以此类推。默认值为1
xspace：可选参数，整形。该参数表明x轴的标记间隔，如填写5代表每5个单位绘制一个标记。默认值为5
yspace：可选参数，整形。该参数表明y轴的标记间隔，如填写5代表每5个单位绘制一个标记。默认值为5
zspace：可选参数，整形。该参数代表z轴的标记间隔，如填写10000代表每10000个单位绘制一个标记。默认值为10000
labelsize：可选参数，整形。该参数表明绘制图中各种字体的大小，包括标题和坐标轴刻度值的字体大小。默认值为20
section:可选参数，实型。该参数代表绘制填色图或者等值线图的数据分割数量，如填写10.0代表图中数据分为10个区间。填写的数值越大填色图看起来分辨率越高，填写的数值越小填色图分辨率越低。默认值为10.0
ifmaskout：可选参数，字符串类型。该参数表明是否要对地图进行maskout。必须在ifshp为'yes'时才可以maskout，maskout有两个选项，选择'country'时可以maskout国家，例如可以把中国区域以外的数值全部都扣掉；选择'province'时可以maskout某个省份，例如可以把河南省以外的全部数值都扣掉。在ifglobal='yes'时ifmaskout会失效，故二者不能同用。默认值为'no'。
maskoutarea：可选参数，字符串类型。该参数为maskout的区域，只有当ifmaskout不为'no'时才起作用。根据ifmaskout的不同填写的格式不同，ifmaskout为'country'时填写某个国家的英文名称（首字母大写），如填写'China'代表对中国以外的区域的数据进行maskout。ifmaskout为'province'时填写某几个省的中文名称（外面加中括号），如填写['河南省','湖北省','湖南省']代表对这三个省之外的数据进行maskout。默认值为None。
iftangle：可选参数，字符串类型或整形。该参数代表是否要在地图上标记四边形关键区。'no'代表不标记，输入标记关键区个数如'3'代表标记，且标记3个关键区。默认值为'no'。
tangle：可选参数，tumple类型。该参数代表所标记的关键区坐标点。只有当iftangle不为'no'时才起作用。输入格式为三维tumple，其中第一层代表不同的关键区，第二层代表关键区中不同的点（左下，左上，右上，右下），第三层代表经纬度坐标。如[[[80,35],[80,45],[95,45],[95,35]],[[115,30],[115,45],[120,45],[120,30]]]代表标记两个关键区，第一个关键区左下、左上、右上、右下坐标分别为[80,35],[80,45],[95,45],[95,35]，第二个关键区左下、左上、右上、右下坐标分别为[115,30],[115,45],[120,45],[120,30]。默认值为None
ifchina：可选参数，字符串类型。该参数代表是否要在世界地图底图上绘制中国各省份地图。'yes'表示绘制，'no'表示不绘制。必须在ifshp为'yes'时才会生效。默认值为'no'
chinamap：可选参数，字符串类型。该参数代表要绘制中国各省份地图用到的shp文件路径。只有ifchina等于'yes'时才会生效。默认值为None
ifsouthseamap：可选参数，字符串类型。该参数代表在绘制中国地图的前提下(ifchina = 'yes'时)是否绘制南海地图，'yes'代表绘制，'no'代表不绘制。'no'通常用于绘制中国边界某省（如西藏、新疆）时既需要国境线又需要省界线同时还不需要绘制南海地图时使用。默认值为'no'
southseamap：可选参数，字符串类型。该参数代表要绘制南海地图所用到的shp文件路径。建议南海地图带有南海界限（类似于bou2_4l）。只有ifchina等于'yes'时才会生效。默认值为None。
southsealoc：可选参数，tumple类型。该参数代表绘制南海地图在地图中的位置，如[0.8, 0.21, 0.1, 0.15]，第一个数代表南海地图在x轴的位置，第二个数代表南海地图在y轴的位置，第三个参数代表南海地图的宽，第四个参数代表南海地图的高。默认值为[0.8, 0.21, 0.1, 0.15]，该参数为绘制空间范围为15°N-55°N，70°E-140°E时南海地图位置的最佳参数。
ifglobal：可选参数，字符串类型。该参数代表所绘制的是否为横跨经度180°和0°的全球地图。'yes'代表是，'no'代表不是。若绘制横跨经度180°和0°而不设置该参数为'yes'可能会导致坐标轴出现显示问题。但是该参数为'yes'时maskout会失效。故不能与ifmaskout同时为'yes'。默认值为'no'
projection_mode：可选参数，字符串类型。该参数代表绘制地图的投影类型，'plate'代表绘制lon-lat平行投影，'north'代表绘制北极极地投影；'north_local'代表绘制以北极极地投影为基准的扇形投影。默认值为'plate'
ifgirdline：可选参数，字符串类型。该参数代表是否绘制经纬度网格线，'yes'代表绘制，'no'代表不绘制。默认值为'no'
ifgeo：可选参数，字符串类型。该参数代表是否绘制垂直地形遮罩，'yes'代表绘制，'no'代表不绘制。默认值为'no'
geo：可选参数，tumple类型。该参数代表绘制垂直地形遮罩所使用的地形数据，只有在picturemode为'xz'或者'yz'时且ifgeo为'yes'时才会生效。输入的geo必须是一维的，picturemode为'xz'时与lon大小一致，picturemode为'yz'时与lat大小一致。默认值为None
返回值：
该函数没有返回值

2.11 regressline,ym,yf,yd=Auto_paint_self.Autobar_or_line(v,times,timename,iflat,latname,lat,iflon,lonname,lon,iflevel,levelname,levels,line_or_bar,vs=None,ifself_vmax_vmin='no',selfvmax=None,selfvmin=None,linenum=1,xlabelname='x',ylabelname='y',bar_line_title='',label='y',linewidth=4,selfcolor='k',selflinestyle='-',iftend='no',ifmultitend='no',iffilter='no',filtermode=None,extent=None,rangement=None,ifdetend='no',detendtype=None,ifstdline='no',ifmean='no',xspace=1,labelsize=20,xlabelformat='month',valuemodel='+',bar_test='no')

该函数用于绘制一维折线图/直方图，或者对数据进行去趋势/求趋势/滤波/做多项式拟合并返回结果
输入值：
v：必要参数，numpy.array或者numpy.Dataarray类型。该参数根据不同的需要维度不同，在绘制一维折线图/直方图/散点图时要求其是一维的；在对其进行空间去趋势/求趋势/滤波/做多项式拟合时要求其时三维的。当linenum大于1时要求其为一个二维数组，其中第一维代表用于绘制不同折线的不同变量v，第二维代表每个变量的时间维度。
times：必要参数，numpy.array类型。该参数为需要被处理的变量v的时间维度，通常由2.1和2.3的返回值times直接传入。
timename：必要参数，字符串类型。该参数设定为变量v的时间维名称，如'time'。与2.1中的timename一致。
iflat：必要参数，字符串类型。该参数代表变量v是否有纬度维，'yes'代表有，'no'代表没有。
latname：必要参数，字符串类型。该参数设定为nc文件中变量的纬度名称，如'lat'。与2.1中的latname一致。
lat：必要参数，numpy.array类型。该参数为v的经度维，通常由2.1或者2.3的返回值lat直接传入。
iflon：必要参数，字符串类型。该参数代表变量v是否有经度维，'yes'代表有，'no'代表没有。
lonname：必要参数，字符串类型。该参数设定为nc文件中变量的经度名称，如'lon'。与2.1中的lonname一致。
lon：必要参数，numpy.array类型。该参数为v的纬度维，通常由2.1或者2.3的返回值lon直接传入。
iflevel：必要参数，字符串类型。该参数代表变量是否有高度层次，'yes'代表有并且选取某一层，'no'代表没有，'all'代表有并且选取全部层次，'self'代表有并且选取其中某个层次区间，'selfchose'代表有并且选取其中某几个层次。与2.1中的iflevel一致。
levelname：必要参数，字符串类型。该参数设定为变量高度层次的名称，如'level'。若iflevel为'no'则该参数可以任意赋值。与2.1中的levelname一致。
levels：必要参数，numpy.array类型。该参数为v的高度维，通常由2.1中的返回值levels直接传入。
line_or_bar：必要参数，字符串类型。该参数代表是否要绘图以及需要绘制什么样的图。填入'line'代表绘制一维折线图,填入'bar'代表绘制一维直方图，填入'scatter'代表绘制一维散点图，填入'onlydata'代表只计算数据，不绘图。
vs：可选参数，numpy.array或者numpy.Dataarray类型。该参数只有在line_or_bar为'scatter'时才起作用。当line_or_bar为'scatter'时，该参数作为绘制散点图的y轴数据。默认值为None
ifself_vmax_vmin：可选参数，字符串类型。该参数代表是否要自定义bar图或者line图的绘图范围，'yes'代表用户自定义，'no'代表采取默认设置（绘图范围为v的最大值和最小值）。默认值为'no'
selfvmax：可选参数，整形。该参数代表自定义bar图或者line图的绘图范围上界，只有ifself_vmax_vmin为'yes'时才生效。当line_or_bar不为'scatter'时填写一个值代表y轴变量的最大值，当line_or_bar为'scatter'时填写一个含有两个数字的数组，分别代表x轴最大值和y轴最大值，如[4,3]代表x轴最大值为4，y轴最大值为3.默认值为None
selfvmin：可选参数，整形。该参数代表自定义bar图或者line图的绘图范围下界，只有ifself_vmax_vmin为'yes'时才生效。当line_or_bar不为'scatter'时填写一个值代表y轴变量的最小值，当line_or_bar为'scatter'时填写一个含有两个数字的数组，分别代表x轴最小值和y轴最小值，如[-4,-3]代表x轴最小值为-4，y轴最小值为-3.默认值为None
linenum：可选参数，整形。该参数代表绘制折线图或直方图时绘制几条折线图或直方图，1代表绘制1条，2代表绘制2条，以此类推。默认值为1
xlabelname：可选参数，字符串类型。该参数代表x轴的名称，只有line_or_bar不是'onlydata'时即绘图时才会起作用。默认值为'x'。
ylabelname：可选参数，字符串类型。该参数代表y轴的名称，只有line_or_bar不是'onlydata'时即绘图时才会起作用。默认值为'y'。
bar_line_title：可选参数，字符串类型。该参数代表图题名称，只有line_or_bar不是'onlydata'时即绘图时才会起作用。默认值为''。
label：可选参数，字符串类型或者numpy.array类型。该参数代表绘图的标记名称，只有line_or_bar不是'onlydata'和'scatter'时即绘图时才会起作用。当linenum为1时要求其为字符串，如'T'。当linenum大于1时要求其为numpy.array类型，如linenum为3，则填写['T','PRE','RH']代表对三条折线/直方图赋予不同的label名称。默认值为'y'。
linewidth：可选参数，整形。该参数代表绘制折线图时折线图的线宽，只有line_or_bar为'line'时即绘制一维折线图时才会起作用。默认值为4。
selfcolor：可选参数，字符串类型或numpy.array类型。该参数代表绘制折线图或者柱状图时折线图的颜色，只有line_or_bar为'line'时或者'bar'时即绘制一维折线图或一维柱状图时才会起作用。当line_or_bar为'line'或者'bar'时，且linenum等于1时，其为字符串类型，如'k'代表黑色。当line_or_bar为'line'或'bar'时，且linenum大于1时，其为numpy.array类型，如linenum=3,填写['k','r','b']分别代表三条折线/直方图为黑色、红色、蓝色。默认值为'k'即黑色。详情颜色见附录（可以填写任何符合matplotlib的颜色代码）。
selflinestyle：可选参数，字符串类型或numpy.array类型。该参数代表绘制折线图时折线图的线型，只有line_or_bar为'line'时时即绘制一维折线图时才会起作用。当line_or_bar为'line'时，且linenum等于1时，其为字符串类型，如'-'代表实线。当line_or_bar为'line'时，且linenum大于1时，其为numpy.array类型，如linenum=3,填写['-',':','--']分别代表三条折线为实线、点线、虚线。默认值为'-'即实线。详情线型见附录（可以填写任何符合matplotlib的线型代码）。
iftend：可选参数，字符串类型。该参数代表是否要对v进行求趋势。填写'yes'代表对一维的v求趋势，并得到一组一维数值并返回（如果bar_or_line不是'onlydata'还会将趋势线绘制在图上）；填写'area'代表对三维空间场求时间趋势，并得到一组二维空间场并且返回，每个格点上是该点的时间趋势斜率。默认值为'no'
ifmultitend：可选参数，字符串类型。该参数代表是否要对v进行多项式拟合。填写'yes'代表对一维的v进行多项式拟合，并得到一组一维数值并返回（如果bar_or_line不是'onlydata'还会将多项式拟合线绘制在图上）。填写'area'时代表对三维场进行多项式拟合，并返回一个三维数组。默认值为'no'
iffilter：可选参数，字符串类型。该参数代表是否要对v进行滤波。填写'yes'或者'butterworth'代表对一维的v进行butterworth滤波，并得到一组一维数值并返回（如果bar_or_line不是'onlydata'还会将滤波线绘制在图上）；填写'area'或者'butterworth_area'代表对三维空间场的时间维度进行butterworth滤波，并得到一组三维空间场并且返回。填写'lanczos'代表对一维的v进行lanczos滤波，并得到一组一维数值并返回（如果bar_or_line不是'onlydata'还会将滤波线绘制在图上）；填写或者'lanczos_area'代表对三维空间场的时间维度进行lanczos滤波，并得到一组三维空间场并且返回。默认值为'no'
filtermode：可选参数，字符串类型。该参数代表滤波模式。填写'lowpass'代表低通滤波；填写'highpass'代表高通滤波；填写'bandpass'代表带通滤波。当iffilter为'yes'或者'butterworth'或者'lanczos'或者'area'或者'butterworth_area'或者'lanczos_area'时必须填写，否则可以任意赋值。注意lanczos滤波没有高通滤波。默认值为None。
extent：可选参数；根据filtermode不同类型也不同。该参数代表滤波的截断节点。当filtermode为'lowpass'或者'highpass'时填写整形n，代表进行n个单位时间（如时间间隔为月，填写12代表选取12个月为截断节点）的低通/高通滤波；当filtermode为'bandpass'时，填写tumple类型[n,m]，其中n代表时间上限，m代表时间下限，进行n到m个单位时间之间（如时间间隔为月，填写[6,3]，代表进行3到6个月的带通滤波）的带通滤波。当iffilter为'yes'或者'butterworth'或者'lanczos'或者'area'或者'butterworth_area'或者'lanczos_area'时必须填写，否则可以任意赋值。默认值为None。
rangement：可选参数，整形。根据滤波的模式不同而不同。当做butterworth滤波时，该参数代表滤波阶数，如输入1代表进行1阶滤波，以此类推。当做lanczos滤波时，该参数代表滑动窗口长度，如输入3代表滑动窗口为3，以此类推。当iffilter为'yes'或者'butterworth'或者'lanczos'或者'area'或者'butterworth_area'或者'lanczos_area'时必须填写，否则可以任意赋值。默认值为None。
ifdetend：可选参数，字符串类型。该参数代表是否要对v进行去趋势。填写'yes'代表对一维的v去趋势，并得到一组一维数值并返回（如果bar_or_line不是'onlydata'还会将去趋势线绘制在图上）；填写'area'代表对三维空间场的时间维度去趋势，并得到一组三维空间场并且返回。默认值为'no'
detendtype：可选参数，字符串类型。该参数代表去趋势模式。填写‘linear’代表数据减去线性最小二乘法拟合的结果，填写‘constant’　代表去掉序列的均值，即求距平；当fidetend 为'yes'或'area'时必须填写，否则可以任意赋值。默认值为None。
ifstdline：可选参数，字符串类型或者实型。该参数代表是否绘制一倍标准差线。填写'yes'代表绘制，'no'代表不绘制，或者可以填写任意实型数字代表绘制该数字的等值线（如输入1.96代表上下同时绘制+1.96和-1.96线）。line_or_bar必须不是'onlydata'才可以填写'yes'或任意实型数值，即必须要绘图才能绘制标准差线。默认值为'no'。
ifmean：可选参数，字符串类型。该参数代表是否绘制平均值线。填写'yes'代表绘制，'no'代表不绘制。默认值为'no'
xspace：可选参数，整形。该参数表明x轴的标记间隔，如填写5代表每5个单位绘制一个标记。line_or_bar必须不是'onlydata'才可以填写'yes'，即必须要绘图才能设定x轴刻度线间隔。默认值为1
labelsize：可选参数，整形。该参数表明绘制图中各种字体的大小，包括标题和坐标轴刻度值的字体大小。默认值为20
xlabelformat：可选参数，字符串类型。该参数表明绘制x坐标轴时日期的格式。'year'代表只绘制年份，'month'代表绘制年-月，'day'代表具体到年-月-日。默认值为'month'
valuemodel：可选参数，字符串类型。该参数表明绘图是否为对称区间，'+'或者'-'代表区间不对称；'+-'或者'-+'代表区间对称。默认值为'+'
bar_test：可选参数，字符串类型。该参数表明是否要在bar上方绘制具体数值，'yes'代表绘制，'no'代表不绘制。默认值为'no'

2.12 v,lon,lat,levels,latlow,lattop,lonleft,lonright,times,station_all =Auto_paint_self.open_data_txt_station(txtmode,txt_filename,txt_file_title,txt_separator,txt_header,txt_station_name,v_name,standard_filename,standard_stationname,standard_lonname,standard_latname,timebegin,timestart,timeend,timename,lonname,latname,timespace=1,value_range=None,ifchosearea='no',latlow=None,lattop=None,lonleft=None,lonright=None,latresolution=0.5,lonresolution=0.5,ifinterpolate='yes',interp_type='cressman',kappa_star=5.5052,r=15.0,minimum_neighbors=10,rbf_func='gaussian',smooth=1.0)

该函数用于读取txt站点文件
输入值：
txtmode：必要参数，字符串类型。该参数代表读取单个文件还是多个文件。'one_excel_morestation'代表读取单个excel站点文件，而且变量具有多个站点，'one_excel_one_station'代表读取单个excel站点文件，并且变量只有一个站点，'more_time'代表读取多个txt站点文件，站点文件按照时间分隔；'more_staion'代表代表读取多个txt站点文件，站点文件按照站点分隔。
txt_filename：必要参数，字符串类型。该参数代表txt文件所保存的文件夹路径，如'E:/txt/'。
txt_file_title：必要参数，tumple类型。该参数代表读者给txt文件的命名的文件头（即每一列的名称）。如['station','lat','lon','v']。只有在txtmode为'more_time'或者'more_txt'时才会生效，为'one_excel_morestation'或者'one_excel_onestation'时可以填写None
txt_separator：必要参数，字符串类型。该参数代表txt文件中变量与变量的分隔符，如'\s+'代表以多个空格为分隔符。只有在txtmode为'more_time'或者'more_txt'时才会生效，'one_excel_morestation'或者'one_excel_onestation'时可以填写None
txt_header：必要参数，整形。该参数代表txt文件中有几行文件说明（输入的整数即跳过的行数），如3代表有3行说明，则读取txt文件时会自动跳过3行。只有在txtmode为'more_time'或者'more_txt'时才会生效，'one_excel_morestation'或者'one_excel_onestation'时可以填写None
txt_station_name：必要参数，字符串型。该参数代表txt文件中站点的名称，如'station'。该参数要与txt_file_title中所命名的站点名称相同。只有在txtmode为'more_time'或者'more_txt'时才会生效，'one_excel_morestation'或者'one_excel_onestation'时可以填写None
v_name：必要参数，字符串型。该参数代表txt文件中变量的名称，如'v'。该参数要与txt_file_title中所命名的变量名称相同。只有在txtmode为'more_time'或者'more_txt'或者'one_excel_onestation'时才会生效，为'one_excel_morestation'时可以填写None
standard_filename：必要参数，字符串类型。该参数代表标准文件（即存放所有站点及站点信息（经纬度、海拔高度）的文件）的路径及名称。如'E:/standard_lon_lat'，标准文件必须是excel。当txtmode为'one_excel_onestation'时不需要指定，可以填写None
standard_stationname：必要参数，字符串类型。该参数代表标准文件中所对应的站点那一列的名称，如'Stations'。当txtmode为'one_excel_onestation'时不需要指定，可以填写None
standard_lonname：必要参数，字符串类型。该参数代表标准文件中所对应的站点经度那一列的名称，如'lon'。当txtmode为'one_excel_onestation'时不需要指定，可以填写None
standard_latname：必要参数，字符串类型。该参数代表标准文件中所对应的站点纬度那一列的名称，如'lat'。当txtmode为'one_excel_onestation'时不需要指定，可以填写None
timebegin：必要参数，字符串类型。该参数设定为txt文件中变量起始时间（必须与文件总起始时间一致）。根据填写格式的不同而代表时间间隔不同，如'1981'代表时间间隔为年，'1981-01'代表时间间隔为月，'1981-01-01'代表时间间隔为日,'1981-01-01-00'代表时间间隔为小时，'1981-01-01-00-00'代表时间间隔为分钟，'1981-01-01-00-00-00'代表时间间隔为秒
timestart：必要参数，字符串类型。该参数代表截取时间的起始日期（读者选定时间），填写格式要和timebegin相同。
timeend：必要参数，字符串类型。该参数代表截取时间的结束日期（读者选定时间），填写格式要和timebegin相同。
timename：必要参数，字符串类型。该参数代表生成DataArray时时间维度的名称，如'time'。
lonname：必要参数，字符串类型。该参数代表生成DataArray时经度维度的名称，如'lon'。当txtmode为'one_excel_onestation'时不需要指定，可以填写None
latname：必要参数，字符串类型。该参数代表生成DataArray时经度维度的名称，如'lat'。当txtmode为'one_excel_onestation'时不需要指定，可以填写None
timespace：可选参数，整形。该参数用于创建时间维时指定时间间隔。默认值为1
value_range：可选参数，tumple。该参数代表是否对数据进行范围筛选，如[0,1000]代表只取数据范围在0到1000的数据，剩下的赋值为np.nan；填写None代表不对数据进行筛选。默认值为None
ifchosearea：可选参数，字符串类型。该参数代表是否对数据进行空间范围的选择，'yes'代表选择，'no'代表不选择。默认值为'no'。
latlow：可选参数，实型。该参数代表选择空间范围时的最低纬度，如20.0。该参数仅在ifchosearea为'yes'时起作用且必须填写。默认值为None。
lattop：可选参数，实型。该参数代表选择空间范围时的最高纬度，如55.0。该参数仅在ifchosearea为'yes'时起作用且必须填写。默认值为None。
lonleft：可选参数，实型。该参数代表选择空间范围时的最左经度，如70.0。该参数仅在ifchosearea为'yes'时起作用且必须填写。默认值为None。
lonright：可选参数，实型。该参数代表选择空间范围时的最右经度，如140.0。该参数仅在ifchosearea为'yes'时起作用且必须填写。默认值为None。
latresolution：可选参数，实型。该参数代表指定变量的纬度分辨率，如1.0。当txtmode为'one_excel_onestation'时不需要指定，可以填写None。默认值为0.5
lonresolution：可选参数，实型。该参数代表指定变量的经度分辨率，如1.0。当txtmode为'one_excel_onestation'时不需要指定，可以填写None。默认值为0.5
ifinterpolate：可选参数，字符串类型。该参数代表是否要把站点数据插值成格点数据，该函数采用metpy中的interpolate_to_grid插值。'yes'代表是，'no'代表不是。默认值为'yes'
interp_type：可选参数，字符串类型。该参数代表插值所选取的方法。'linear'代表线性插值，'nearest'代表最邻近插值，'cubic'代表三次插值，'rbf'代表rbf插值，'natural_neighbor'代表自然临近插值，'barnes'代表巴恩斯插值，'cressman'代表克利斯曼插值。默认值为'cressman'
kappa_star：可选参数，实型。该参数代表巴恩斯插值的响应函数，默认值代表5.502
r：可选参数，实型。该参数对应于函数中的search_radius，代表巴恩斯和克利斯曼插值的搜索半径。默认值为15.0
minimum_neighbors：可选参数，整形。该参数代表巴恩斯插值和克利斯曼插值所需要的最小近邻点数量，默认值为10
rbf_func：可选参数，字符串类型。该参数代表rbf插值所用的函数。有‘multiquadric’, ‘inverse’, ‘gaussian’, ‘linear’, ‘cubic’, ‘quintic’和'thin_plate'。默认值为'gaussian'
smooth：可选参数，实型。该参数代表rbf插值或者巴恩斯插值的平滑参数。默认值为1.0
返回值：
v：返回变量。
lon：返回变量的经度维度。
lat：返回变量的纬度维度。
levels：返回变量的高度维度。目前由于处理的txt数据没有高度维，故返回的levels为None。该参数只是为了使得函数返回值与open_data_nc和open_data_hdf5统一。
latlow：返回变量的最低纬度。
lattop：返回变量的最高纬度。
lonleft：返回变量的最左经度。
lonright：返回变量的最右经度。
times：返回变量的时间维度。
station_all：返回变量的站点信息数据。

2.13 v,lon,lat,levels,latlow,lattop,lonleft,lonright,times =Auto_paint_self.open_data_txt_grid(filename,header,separator,latmin,latmax,lonmin,lonmax,latresolution,lonresolution,timebegin,timestart,timeend,timename,lonname,latname,timespace=1,ifchosearea='no',latlow=None,lattop=None,lonleft=None,lonright=None,changeresolution=1)

该函数用于读取txt格点文件
输入值：
filename：必要参数，字符串类型。该参数代表txt文件所保存的文件夹路径，如'E:/txt/'。
header：必要参数，整形。该参数代表txt文件中有几行文件说明（输入的整数即跳过的行数），如3代表有3行说明，则读取txt文件时会自动跳过3行。
separator：必要参数，字符串类型。该参数代表txt文件中变量与变量的分隔符，如'\s+'代表以多个空格为分隔符。
latmin：必要参数，实型。该参数代表txt站点文件中最低纬度，必须要与文件最低纬度相对应（通常文件中有最低纬度说明），如10.0。
latmax：必要参数，实型。该参数代表txt站点文件中最高纬度，必须要与文件最高纬度相对应（通常文件中有最高纬度说明），如60.0。
lonmin：必要参数，实型。该参数代表txt站点文件中最左经度，必须要与文件最左经度相对应（通常文件中有最左经度说明），如60.0。
lonmax：必要参数，实型。该参数代表txt站点文件中最右经度，必须要与文件最右经度相对应（通常文件中有最右经度说明），如150.0。
latresolution：必要参数，实型。该参数代表txt站点文件中纬度的分辨率，必须要与文件中纬度分辨率相对应（通常文件中有纬度分辨率说明），如1.0。
lonresolution：必要参数，实型。该参数代表txt站点文件中经度的分辨率，必须要与文件中经度分辨率相对应（通常文件中有经度分辨率说明），如1.0。
timebegin：必要参数，字符串类型。该参数设定为txt文件中变量起始时间（必须与文件总起始时间一致）。根据填写格式的不同而代表时间间隔不同，如'1981'代表时间间隔为年，'1981-01'代表时间间隔为月，'1981-01-01'代表时间间隔为日,'1981-01-01-00'代表时间间隔为小时，'1981-01-01-00-00'代表时间间隔为分钟，'1981-01-01-00-00-00'代表时间间隔为秒
timestart：必要参数，字符串类型。该参数代表截取时间的起始日期（读者选定时间），填写格式要和timebegin相同。
timeend：必要参数，字符串类型。该参数代表截取时间的结束日期（读者选定时间），填写格式要和timebegin相同。
timename：必要参数，字符串类型。该参数代表生成DataArray时时间维度的名称，如'time'。
lonname：必要参数，字符串类型。该参数代表生成DataArray时经度维度的名称，如'lon'。
latname：必要参数，字符串类型。该参数代表生成DataArray时经度维度的名称，如'lat'。
timespace：可选参数，整形。该参数用于创建时间维时指定时间间隔。默认值为1
ifchosearea：可选参数，字符串类型。该参数代表是否对数据进行空间范围的选择，'yes'代表选择，'no'代表不选择。默认值为'no'。
latlow：可选参数，实型。该参数代表选择空间范围时的最低纬度，如20.0。该参数仅在ifchosearea为'yes'时起作用且必须填写。默认值为None。
lattop：可选参数，实型。该参数代表选择空间范围时的最高纬度，如55.0。该参数仅在ifchosearea为'yes'时起作用且必须填写。默认值为None。
lonleft：可选参数，实型。该参数代表选择空间范围时的最左经度，如70.0。该参数仅在ifchosearea为'yes'时起作用且必须填写。默认值为None。
lonright：可选参数，实型。该参数代表选择空间范围时的最右经度，如140.0。该参数仅在ifchosearea为'yes'时起作用且必须填写。默认值为None。
changeresolution：可选参数，整形。该参数用于改变数据的空间分辨率。假如数据空间分辨率为0.1°×0.1°，若该参数填写2，代表改变分辨率到0.2°×0.2°；不改变数据分辨率该参数默认为1。
返回值：
v：返回变量。
lon：返回变量的经度维度。
lat：返回变量的纬度维度。
levels：返回变量的高度维度。目前由于处理的txt数据没有高度维，故返回的levels为None。该参数只是为了使得函数返回值与open_data_nc和open_data_hdf5统一。
latlow：返回变量的最低纬度。
lattop：返回变量的最高纬度。
lonleft：返回变量的最左经度。
lonright：返回变量的最右经度。
times：返回变量的时间维度。

2.14 slope,intercept,r_value,p_value,std_err=Auto_paint_self.Auto_linregress(v1,v2,regressmode)

该函数用于对指定的v1和v2求回归，相当于降维操作
输入值：
v1：必要参数，numpy.array或者numpy.Dataarray类型。该参数为需要求回归的第一个变量v1，目前可以输入一维或者三维变量。若regressmode为'area_t'或者'area_area'要求其为三维场。若regressmode为't_t'则要求其为一维场。
v2：必要参数，numpy.array或者numpy.Dataarray类型。该参数为需要求回归的第一个变量v2，目前可以输入一维或者三维变量。若regressmode为'area_area'要求其为三维场。若regressmode为'area_t'或者't_t'则要求其为一维场。
regressmode：必要参数，字符串类型。代表要求回归的模式，即v1和v2的格式。有三个参数可选，'area_t'代表v1是三维场，v2是一维场，相当于v2对于v1的每一个格点求回归，返回一个二维场；'area_area'代表v1是三维场，v2也是三维场，要求v1和v2大小相同，相当于对v1和v2对应格点求回归，返回一个二维场；'t_t'代表v1和v2都是一维场，相当于对v1和v2直接求回归系数，返回一个数值。
返回值：
slope：返回v1和v2的回归斜率，根据regressmode的不同可能是一个二维场，也可能是一个数值。
intercept：返回v1和v2的回归截距，根据regressmode的不同可能是一个二维场，也可能是一个数值。
r_value：返回v1和v2的相关系数，根据regressmode的不同可能是一个二维场，也可能是一个数值。
p_value：返回用于slope显著性检验的显著性值，与slope的大小完全相同。
std_err：返回回归斜率的标准差。

2.15 v_mask=Auto_paint_self.Auto_region_data_mask(v,shpname,index,region)

该函数用于对某个数据进行某个区域的mask。
输入值：
v：必要参数，numpy.array或者numpy.Dataarray类型。该参数为需要进行mask的数据，可以是二维、三维甚至四维数据。
shpname：必要参数，字符串类型。该参数为要进行mask所使用的shp地图路径名称，如'E:/map/province.nc'。
index：必要参数，字符串类型。该参数为shp地图中进行mask所用参数的index。如在province中，各省名称的标题为'省'，则index填写'省'。具体index信息可以用arcgis或者meteoinfo查看。
region：必要参数，tumple类型。该参数为需要进行mask的区域。如想要mask江苏省的数据，则填写['江苏省']。
返回值：
v_mask：返回mask过后的变量v_mask。

2.16 vs,ttest,abc_point=Auto_paint_self.Auto_test_of_abrupt_change(v,method,step=3,p_value=0.05)

该函数用于对某个序列进行突变检验。
输入值：
v：必要参数，numpy.Dataarray类型或者numpy.array类型。该参数代表需要进行检验的数组，必须是一维数组。
method：必要参数，字符串类型。该参数代表进行突变检验所使用的方法。可选方法有'pe''ttitt','buishand','SNHT','mk'和'move_t'
step：可选参数，整形。该参数代表使用'move_t'方法即滑动t检验时，步长设置为多少。只有在method=='move_t'时才生效。默认值为3
p_value：可选参数，实型。该参数代表进行突变检验时，检验的显著性水平为多少。在做'move_t'即滑动t检验时，目前可选的显著性水平有0.2，0.1，0.05，0.02，0.01，0.002和0.001；做其他检验时可以任选显著性水平。默认值为0.05
返回值：
vs：返回结果数组。根据method不同，其值不同。当method=='pettitt'或'buishand'或'SNHT'时，返回原变量v和突变点前和突变点后的平均值。当mehod=='mk'时，返回uk和ub值。当method=='move_t'时，返回滑动结果。
ttest：返回突变检验通过的显著性水平p_value对应的t值，只有当method=='move_t'时才有内容，否则为None。
abc_point：返回可能的突变点index


2.17 v=Auto_paint_self.Auto_smooth(v,iflevel,timename,levelname,latname,lonname,times,levels,iflat,iflon,lat,lon,smoothmode,smoothnum)

该参数用于对变量v进行滑动平均。
输入值：
v：必要参数，numpy.Dataarray类型或者numpy.array类型。该参数代表用于滑动平均的变量v，可以是一维、二维、三维或者四维的。
iflevel：必要参数，字符串类型。该参数代表变量是否有高度层次，'yes'代表有并且选取某一层，'no'代表没有，'all'代表有并且选取全部层次，'self'代表有并且选取其中某个层次区间，'selfchose'代表有并且选取其中某几个层次。与2.1的iflevel一致。
timename：必要参数，字符串类型。该参数设定为变量v的时间维名称，如'time'。与2.1的timename一致。
levelname：必要参数，字符串类型。该参数设定为变量高度层次的名称，如'level'。若iflevel为'no'则该参数可以任意赋值。与2.1的levelname一致。
latname：必要参数，字符串类型。该参数设定为变量v的纬度名称，如'lat'。与2.1的latname一致。
lonname：必要参数，字符串类型。该参数设定为变量v的经度名称，如'lon'。与2.1的lonname一致。
times:必要参数，np.DataArray或者np.array类型。该参数代表变量v的时间维度。通常由2.1或者2.3的返回值times直接传入。
levels:必要参数，np.DataArray或者np.array类型。该参数代表变量v的高度。通常由2.1或者2.3的返回值levels直接传入。
iflat：必要参数，字符串类型。该参数代表变量v是否有纬度维，'yes'代表有，'no'代表没有。
iflon：必要参数，字符串类型。该参数代表变量v是否有经度维，'yes'代表有，'no'代表没有。
lat:必要参数，np.DataArray或者np.array类型。该参数代表变量v的纬度。通常由2.1或者2.3的返回值lat直接传入。
lon:必要参数，np.DataArray或者np.array类型。该参数代表变量v的经度。通常由2.1或者2.3的返回值lon直接传入。
smoothmode：必要参数，字符串类型。该参数代表滑动平均的模式，对空间进行滑动平均还是对时间进行滑动平均。填写'area'代表空间平滑；填写'time'代表时间平滑。
smoothnum：必要参数，字符串类型。该参数代表滑动平均的阶数，根据smoothmode的不同填写要求也不同。当smoothmode为'area'即做空间平滑时只能填入5,9即做5空间5点平滑或者空间9点平滑。当smoothmode为'time'时可以填入大于1同时小于v的时间维度长度的任意奇数，如填入3代表3点平滑，填入5代表5点平滑，以此类推。
返回值：
v：返回平滑过后的变量v，其大小与输入时保持一致。在空间平滑中边缘用0值填充，时间平滑中边缘用nan值填充。

2.18 model,predicty,testy,r,p,weights=Auto_paint_self.Auto_lightgbm(vy,vx,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,default_learning_rate=0.5,default_max_depth=50,default_num_leaves=100,default_min_child_samples=20,boosting_type='gbdt',n_estimators=10000,subsample=0.7,metrics='default',if_early_stopping=None,ifmute='no',ifweight='yes',ifrandom_split='yes',ifsave='no',savepath=None,device='cpu')
该函数用于机器学习lightgbm的参数调优，以及进行lightgbm模型训练。#注：模型部分参数可以参考网址（https://lightgbm.readthedocs.io/en/latest/pythonapi/lightgbm.LGBMRegressor.html#lightgbm.LGBMRegressor）
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，其必须为一维的，只保留时间维度。
vx：必要参数，np.array类型。该参数代表预报因子的值，其必须为二维的，其中第一维为时间维度，与vy长度一致，第二维的长度和预报因子数量相同。vx由预报因子做空间平均后叠加，并且翻转第一维和第二维而成。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表所输入的参数（default_learning_rate，default_max_depth，default_num_leaves，default_min_child_samples）是否为最优，以及是否需要调优。'no'代表输入参数不是最优，需要调优；'yes'输入参数为最优，不需要调优；'load'代表从指定路径载入训练好的模型。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
default_learning_rate：可选参数，实型。代表初始的学习率，学习率代表每加入一棵树到模型中其占有权重的大小。跟树的数量有关，加入的树越多，学习率通常越低模型越优，而加入的树越少，通常学习率越高越优。默认值为0.5
default_max_depth：可选参数，整形。代表初始的最大树深度，最大树深度代表模型的树最多有多少层，过深的模型可能会导致过拟合，而过浅的模型可能会导致预测准确率低。默认值为50
default_num_leaves：可选参数，整形。代表初始的最大叶子节点数，最大叶子节点数代表每棵树最多有多少叶子节点，过多的叶子节点可能会导致过拟合，而过少的叶子节点可能会导致预测准确率低。默认值为100
default_min_child_samples：可选参数，整形。代表初始的每个叶子节点上的最小样本数，每个叶子节点上的最小样本数代表每个叶子节点上最少有多少个样本，否则将该叶子节点剔除，将样本回归到父节点上。每个叶子节点上的最小样本数过少可能会导致过拟合，每个叶子节点上的最小样本数过多可能会导致预测准确率低。默认值为20
boosting_type：可选参数，字符串类型。代表做梯度提升的模型算法，'gbdt'代表传统的梯度提升决策树。'dart'代表多个加法回归树。'goss'代表基于梯度的单边采样。'rf'代表随机森林。不建议采用'rf'随机森林。默认值为'gbdt'
n_estimators：可选参数，整形。代表模型中树的数量。越多的树意味着模型精度越高但是越浪费计算机计算时间，越少的树意味着越节约计算机计算资源但是模型精度越低。通常取1000-10000之间最好。默认值为10000
subsample：可选参数，实型。代表模型中每次训练采用的样本比率（拿来训练的样本数量/训练集中样本数量，不包括测试集数据）。通常在确定预报因子都与预报量有关的情况下，该值不能小于0.5，在0.7到1.0之间最为合适。默认值为0.7
metrics：可选参数，字符串类型。该参数代表模型所使用的评估标准。根据task_mode的不同而填写不同参数；当task_mode为'binary_classify'时，填写default或者f1代表使用f1指数作为评估标准，填写recall代表使用召回率作为评估标准，填写precision代表使用精确率作为评估标准；当task_mode为'regression'时填写default或者pearson代表使用相关系数作为评估标准，填写mse代表使用均方根误差作为评估标准；当task_mode为'multi_classify'时填写default或accuracy代表使用准确率作为评估标准。默认值为'default'
if_early_stopping：可选参数，整形。该参数代表是否要进行早停，填写数字数字代表早停轮次，填写None代表不早停。默认值为None
ifmute：可选参数，字符串类型。代表是否打印调优次数以及是否打印每次调优时的预测值与真实值的相关系数。默认值为'no'代表打印
ifweight：可选参数，字符串类型。该参数代表是否要输出每个预报因子对于预报值的预报贡献以及使用什么模型计算预报因子贡献，'yes'或者'shap'代表使用shp模型输出预报因子贡献，'PI'代表使用permutation_importance模型输出预报因子贡献，'no'代表不输出。默认值为'yes'
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的最优模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None
weights：如果ifweight不为'no'，则返回预报因子的贡献率；否则返回None

2.19 Auto_draw_taylor(v,vs,color,labelsize = 20,iflabel='no',label=None)
#from @biubiubiu123
该函数用于绘制泰勒图
输入值：
v：必要参数，np.array类型。代表绘制泰勒图的真实值v，必须是一维的。
vs：必要参数，tumple类型。代表绘制泰勒图的对照值vs数组，必须是二维的，其中第一个维度代表对照值个数，第二个维度代表时间长度。vs的第二个维度长度要和v的第一个维度长度一致。
color：必要参数，tumple类型。代表绘制用v和vs绘制的点的颜色和类型数组，其数组长度要和vs第一维长度相同。颜色和类型参见附录。
labelsize：可选参数，整形。代表泰勒图的总体字体大小。默认值为20
iflabel：可选参数，字符串类型。该参数代表是否要绘制标签，'yes'代表绘制，'no'代表不绘制。默认值为'no'
label：可选参数，tumple类型。该参数代表绘制标签时的标签数组，只有在iflabel为'yes'时才生效。其数组长度要和vs的第一维长度相同。默认值为None
返回值：
此函数没有返回值

2.20 fx,fy=Auto_paint_self.Auto_T_N(level,lat,lon,u,v,z,ztmean)
#from @biubiubiu123
该函数用于计算T-N波通量。
输入值：
level：必要参数，整形。该参数代表u，v和z的层次，用于计算p/p0。当2.1中iflevel为'yes'时，与2.1中的level值相同。
lat：必要参数，np.array类型或者xr.Dataarray类型。该参数代表u，v和z的纬度维度，可由2.1返回值传递，为一维数据
lon：必要参数，np.array类型或者xr.Dataarray类型。该参数代表u，v和z的经度维度，可由2.1返回值传递，为一维数据
u：必要参数，np.array类型或者xr.Dataarray类型。该参数代表某一时刻某一高度的纬向风u，为二维数据。
v：必要参数，np.array类型或者xr.Dataarray类型。该参数代表某一时刻某一高度的经向风v，为二维数据。
z：必要参数，np.array类型或者xr.Dataarray类型。该参数代表某一时刻某一高度的位势高度z，为二维数据。
ztmean：必要参数，np.array类型或者xr.Dataarray类型。该参数代表某一高度的位势高度z的气候态平均，为二维数据。
返回值：
fx：返回纬向波通量fx，用于绘制quiver图。
fy：返回经向波通量fy，用于绘制quiver图。

2.21 fx,fy=Auto_paint_self.Auto_Plumb(level,lat,lon,u,v,z)
#from @biubiubiu123
该函数用于计算Plumb波通量。
输入值：
level：必要参数，整形。该参数代表u，v和z的层次，用于计算p/p0。当2.1中iflevel为'yes'时，与2.1中的level值相同。
lat：必要参数，np.array类型或者xr.Dataarray类型。该参数代表u，v和z的纬度维度，可由2.1返回值传递，为一维数据
lon：必要参数，np.array类型或者xr.Dataarray类型。该参数代表u，v和z的经度维度，可由2.1返回值传递，为一维数据
u：必要参数，np.array类型或者xr.Dataarray类型。该参数代表某一时刻某一高度的纬向风u，为二维数据。
v：必要参数，np.array类型或者xr.Dataarray类型。该参数代表某一时刻某一高度的经向风v，为二维数据。
z：必要参数，np.array类型或者xr.Dataarray类型。该参数代表某一时刻某一高度的位势高度z，为二维数据。
返回值：
fx：返回纬向波通量fx，用于绘制quiver图。
fy：返回经向波通量fy，用于绘制quiver图。

2.22 r,p=Auto_paint_self.Auto_partical_r(vx,covar,vy,v_list_name,xname,yname,covarname,rmode)

该函数用于计算偏相关系数
输入值：
vx：必要参数，np.array类型或者xr.Dataarray类型。该参数代表用于计算偏相关的自变量x。可以是三维的，也可以是一维的。
covar：必要参数，np.array类型或者xr.Dataarray类型。该参数代表需要被剔除的变量cover，可以是一个，也可以是多个。可以是三维的，也可以是一维的。
vy：必要参数，np.array类型或者xr.Dataarray类型。该参数代表用于计算偏相关的因变量y。可以是三维的，也可以是一维的。
v_list_name：必要参数，tumple类型。该参数代表vx和covar和vy组成的变量组中每个变量的名称（必须要一一对应，第一个对应vx，中间的对应covar，最后的一个对应vy）。
xname：必要参数，字符串类型。该参数代表在v_list_name中哪个变量是自变量x的名称。
yname：必要参数，字符串类型。该参数代表在v_list_name中哪个变量是因变量y的名称。
covarname：必要参数，字符串类型或者tumple类型。该参数代表在v_list_name中哪个变量是被剔除变量covar的名称。如果covar只有一个则填写一个字符串名称；如果covar有多个则填写一个tumple元组，元组中每个名称都是一个covar的字符串名称。
rmode：必要参数，字符串类型。该参数代表要做偏相关的方法。't_t_t'代表x，covar和y都是只有时间维的。'area_area_t'代表x和covar是三维的，y是一维的。'area_t_area'代表x和y是三维的，covar是一维的。'area_t_t'代表x是三维的，covar和y是一维的。'area_area_area'代表x和covar和y都是三维的。
返回值：
r：计算出来剔除了covar的x和y之间的偏相关系数，和输入的vx的维度一致。
p：用于进行显著性检验的p值，和输入的vx的维度一致。

2.23 Auto_paint_self.Auto_windrose(u,v,wind_direction_number=16,wind_speed_space=6,picturemode='rose',title=None,labelsize=20)

该函数用于绘制风玫瑰图
输入值：
u：必要参数，np.array类型。该参数代表用于绘制风玫瑰图的u风，其必须是一维的。
v：必要参数，np.array类型。该参数代表用于绘制风玫瑰图的v风，其必须是一维的。
wind_direction_number：可选参数，整形。该参数代表风玫瑰图具有多少个风向，默认值为16即默认风玫瑰图分16个风向。
wind_speed_space：可选参数，整形。该参数代表风玫瑰图上每个风向的风速分为多少份，默认值为6即每个风向上风速分为6份。
picturemode：可选参数，字符串类型。该参数代表绘制风玫瑰图的类型（即形状），可以填写'rose'，'bar'或者'box'，默认值为'rose'
title：可选参数，字符串类型。该参数代表风玫瑰图的标题。默认值为None
labelsize：可选参数，实型。该参数代表风玫瑰图中的标题/坐标轴标签大小。默认值为20
返回值：
该函数没有返回值

2.24 Auto_paint_self.Auto_violin(x,y,space=5,xlabelname='x',ylabelname='y',title=None,labelsize = 20)

该函数用于绘制小提琴图。
输入值：
x：必要参数，np.array类型。该参数代表用于绘制小提琴图x轴的数据，其必须是一维的。
y：必要参数，np.array类型。该参数代表用于绘制小提琴图y轴的数据，其必须是一维的。
space：可选参数，整形。该参数代表绘制多少个小提琴（即x轴分为多少等份），默认值为5
xlabelname：可选参数，字符串类型。该参数代表小提琴图x轴的标题名称。默认值为'x'
ylabelname：可选参数，字符串类型。该参数代表小提琴图y轴的标题名称。默认值为'y'
title：可选参数，字符串类型。该参数代表小提琴图的标题。默认值为None
labelsize：可选参数，实型。该参数代表小提琴图中的标题/坐标轴标签大小。默认值为20
返回值：
该函数没有返回值

2.25 l,Sl,Sr,Sw,r1=Auto_paint_self.specx_anal(v,m=None,red_alpha=0.1,white_alpha=0.1)
#from @biubiubiu123
该函数用于计算功率谱
输入值：
v：必要参数，np.array类型。该参数代表用于计算功率谱的变量v，其必须是一维的。
m：可选参数，整形。该参数代表计算功率谱时最大滞后相关长度，其取值最好在n/10-n/3之间，在函数中如果m为None默认取n/3。默认值为None
red_alpha：可选参数，实型。该参数代表红噪声检验信度，如0.1代表显著性水平为90％。默认值为0.1
white_alpha：可选参数，实型。该参数代表白噪声检验信度，如0.1代表显著性水平为90％。默认值为0.1
返回值：
l：该变量代表功率谱的波数，绘制功率谱图时用于x轴的绘制。
Sl：该变量代表功率谱值。
Sr：该变量代表红噪音值。
Sw：该变量代表白噪音值。
r1：落后一个时刻的自相关系数。

2.26 period,power,sig,global_ws,global_signif,scale_avg,scaleavg_signif=Auto_paint_self.Auto_wave(v,timespan,dof,pad=1,dj=None,s0=None,J1=None,lag1=0.72,siglvl=0.95,mother='MORLET')
#from @biubiubiu123
该函数用于小波变换
输入值：
v：必要参数，np.array类型。该参数代表要进行小波变换的变量v，其必须是一维的。
timespan：必要参数，字符串类型。该参数代表变量v的时间分辨率（时间跨度）。'day'代表时间分辨率为天，'week'代表时间分辨率为周，'month'代表时间分辨率为月，'season'代表时间分辨率为季节，'year'代表时间分辨率为年。
dof：必要参数，tumple类型。该参数代表做尺度平均检验时v的自由度，若v的尺度平均在2-8之间，则dof填写[2,8]。
pad：可选参数，整形。该参数代表是否要开启边缘拓展，1代表开启，0代表不开启。默认值为1
dj：可选参数，实型。该参数代表做小波变换时的最小尺度，若为None则默认dj=dt即做小波变换的最小尺度就是数据的时间分辨率，该值越小则小波变换越精细，但计算越慢。默认值为None
s0：可选参数，实型。该参数代表小波的最小尺度，若为None则默认s0=2*dt即小波的最小尺度为数据时间分辨率的两倍。默认值为None
J1：可选参数，整形。该参数代表绘制小波变换图时y轴的刻度数，若为None则默认J1=7/dj。默认值为None。
lag1：可选参数，实型。该参数代表噪声自相关，用于显著性水平，默认值为0.72。
siglvl：可选参数，实型。该参数代表做显著性检验时的置信区间，如0.95代表95％的置信区间即5％的显著性水平。
mother：可选参数，字符串类型。该参数代表做小波变换的类别，可以选择'MORLET'小波，'PAUL'小波和'DOG'小波。默认值为'MORLET'即做墨西哥帽小波变换。
返回值：
period：该变量代表小波周期，通常用于绘制小波变换图时y轴的数据。
power：该变量代表小波变换后结果。
sig：该变量代表小波变换的显著性检验线。
global_ws：该变量代表全局功率谱数据。
global_signif：该变量用于全局功率谱的显著性检验。
scale_avg：该变量代表局部功率谱数据。
scaleavg_signif：该变量用于局部功率谱的显著性检验。

2.27 v=Auto_paint_self.Auto_chose_data(v,chosemode,up_or_low,chose_condition,condition_v)
该函数用于筛选指定的数据（特指超过指定范围的数据）
输入值：
v：必要参数，np.array类型或者xr.Dataarray类型。该参数代表需要被筛选的变量v，通常是三维或者四维的，也可以是二维或者一维的（不推荐）。
chosemode：必要参数，字符串类型。该参数代表筛选数据时使用的标准，'standard'代表筛选超过一定标准差的数据，'number'代表筛选最大/最小的前n个数据。
up_or_low：必要参数，字符串类型。该参数代表筛选的数据是大于还是小于所使用的标准。'up'代表筛选大于标准的数据，'low'代表筛选小于标准的数据。
chose_condition：必要参数，整形。该参数代表筛选数据的条件，chosemode使用'standard'时，输入的数字代表n倍的标准差（例如输入2代表2倍标准差）；chosemode为'number'时，输入的数字代表前n大/小的数据（例如输入10代表筛选前十大/小的数据）
condition_v：必要参数，np.array类型或者xr.Dataarray类型。该参数代表用于筛选条件的变量v，必须是一维的。
返回值：
v：返回筛选过后的数据v，大小除了时间维其他维度都与输入值v相同。

2.28 starttime,startlat,startlon,endtime,endlat,endlon,toppre,toptime,toplat,toplon,duringtime,vlat,vlon,vpre=Auto_paint_self.Auto_blocking_high(v,times,lat,lon,latresolution,lonresolution)
该函数用于识别阻塞高压
输入值：
v：必要参数，np.array类型或者xr.Dataarray类型。该参数代表500hpa位势高度场值。
times：必要参数，np.array类型或者xr.Dataarray类型。该参数代表v的时间维。
lat：必要参数，np.array类型或者xr.Dataarray类型。该参数代表v的纬度维。
lon：必要参数，np.array类型或者xr.Dataarray类型。该参数代表v的经度维。
latresolution：必要参数，实型。该参数代表v的纬度分辨率。
lonresolution：必要参数，实型。该参数代表v的经度分辨率。
返回值：
starttime：返回每次阻塞高压过程的开始时间
startlat：返回每次阻塞高压过程开始的纬度位置
startlon：返回每次阻塞高压过程开始的经度位置
endtime：返回每次阻塞高压过程结束的时间
endlat：返回每次阻塞高压过程结束的纬度位置
endlon：返回每次阻塞高压过程结束的经度位置
toppre：返回每次阻塞高压过程的峰值强度
toptime：返回每次阻塞高压过程的峰值时间
toplat：返回每次阻塞高压过程峰值的纬度位置
toplon：返回每次阻塞高压过程峰值的经度位置
duringtime：返回每次阻塞高压过程的阻塞高压存在时间
vlat：返回每次阻塞高压过程中阻塞高压移动经过的纬度
vlon：返回每次阻塞高压过程中阻塞高压移动经过的经度
vpre：返回每次阻塞高压过程中阻塞高压的强度变化

2.29 label=Auto_paint_self.K_means_eval(output,maxcluster,method='elbow',n_init=40,max_iter=300,auto_chose_cluster='yes',cluster_num=None)
该函数用于使用K-Means算法进行聚类
输入值：
output：必要参数，np.array类型。该参数代表要进行聚类的变量，有两个维度，第一个维度是时间维，第二个维度是特征维。
maxcluster：必要参数，整形。该参数代表选择聚类最优数量时，聚类上限数量。
method：可选参数，字符串类型。该参数代表选择聚类最优数量的方法，'elbow'代表肘部法，'profile'代表轮廓系数法。默认值为'elbow'.
n_init：可选参数，整形。该参数代表k 均值算法将使用多少个不同的质心种子运行。默认值为10。
max_iter：可选参数，整形。单次运行的 k 均值算法的最大迭代次数。默认值为300。
auto_chose_cluster：可选参数，字符串类型。该参数代表是否要自动选择最优的聚类数量进行聚类，'yes'代表是,'no'代表否。填写'no'时需要手动指定cluster_num。默认值为'yes'。
cluster_num：可选参数，整形。该参数代表在不自动选择最优聚类数量时，手动指定的聚类数量。默认值为None
返回值：
label：返回聚类结果label，大小与output的第一个维度即output的时间维对应

2.30 model,predicty,testy,r,p,heatmap,weights=Auto_paint_self.Auto_CNN(vy,vx,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,ifrandom_split='yes',cov_padding='same',cov_strides=1,pooling_padding='valid',pooling_strides=2,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifheatmap='yes',ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构建卷积神经网络
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的神经网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['localcov',[64,3,3]]代表插入权重参数不共享的卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
pooling_padding：可选参数，该参数代表池化层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'valid'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifheatmap：可选参数，字符串类型。该参数代表是否要返回贡献率图heatmap，'yes'代表返回，填写其他值代表不返回（返回结果为None）。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'或者'shap'代表使用shap库计算贡献率，填写'oob'代表使用oob方法计算贡献率，填写'no'代表不计算贡献率。默认值为'yes'代表使用shap方法计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型model
predicty：返回测试集预测值y'
testy：返回测试集真实值vy
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
heatmap：返回贡献图heatmap，仅在ifheatmap为'yes'时有值，否则为None
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.31 model,predicty,testy,r,p,weights=Auto_paint_self.Auto_TCN(vy,vx,timestep,model_list,dilations,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,nb_filters=64,kernel_size=2,nb_stacks=1,padding='causal',dropout_rate=0.0,activation='tanh',kernel_initializer='he_normal',if_use_batch_norm=False,if_use_layer_norm=False,if_use_weight_norm=False,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifrandom_split='yes',ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构建时间卷积网络
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，其必须为一维的，只保留时间维度。
vx：必要参数，np.array类型。该参数代表预报因子的值，其必须为二维的，其中第一维为时间维度，与vy长度一致，第二维的长度和预报因子数量相同。vx由预报因子做空间平均后叠加，并且翻转第一维和第二维而成。
timestep：必要参数，整形。该参数代表预测vy所用到的vx提前时段，例如填写7代表用提前1-7个时次的vx预测vy。
model_list：必要参数，tumple类型。该参数代表构建的时间卷积网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['tcn']代表插入时间卷积层；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
dilations：必要参数，tumple类型。该参数代表扩张系数元组。通常按照固定的膨胀基数递增，例如[1,2,4,8,16,32]代表构建6层深度的tcn网络，每向上一层扩张系数增加2倍。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None

task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
nb_filters：可选参数，整形。该参数代表tcn网络的神经元个数，默认值为64
kernel_size：可选参数，整形。该参数代表tcn网络的卷积核大小，默认值为2
nb_stacks：可选参数，整形。该参数代表tcn网络的残差块堆叠数，默认值为1
padding：可选参数，字符串类型。该参数代表tcn网络是因果卷积还是非因果卷积，'causal'代表因果卷积，因果卷积代表不能够用未来预测现在；'same'或者'valid'代表非因果卷积，非因果卷代表可以用未来预测现在。默认值为'causal'
dropout_rate：可选参数，实型。该参数代表tcn随机丢弃数据/网络节点的比率，用于防止过拟合。默认值为0.0
activation：可选参数，字符串类型。该参数代表tcn网络使用的激活函数类型，更多可选项详情见tcn github官网。默认值为'tanh'
kernel_initializer：可选参数，字符串类型。该参数代表权重矩阵初始化方案，更多可选项详情见tcn github官网。默认值为'he_normal'
if_use_batch_norm：可选参数，布尔值类型。该参数代表是否在tcn中使用batchnormalization，True使用，False不使用。默认值为False
if_use_layer_norm：可选参数，布尔值类型。该参数代表是否在tcn中使用layernormalization，True使用，False不使用。默认值为False
if_use_weight_norm：可选参数，布尔值类型。该参数代表是否在tcn中使用weightnormalization，True使用，False不使用。默认值为False
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'或者'shap'代表使用shap库计算贡献率，填写'oob'代表使用oob方法计算贡献率，填写'no'代表不计算贡献率。默认值为'yes'代表使用shap方法计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型model
predicty：返回预测值y'
testy：返回测试集真实值vy
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.32 result=Auto_paint_self.Auto_stepwise_regression(vx,vy,vx_list_name,p,regression_method='forward',if_print_middle_result='no')
该函数用于做逐步回归
输入值：
vx：必要参数，np.array类型或xr.Dataarray类型。该参数代表需要做逐步回归的所有预报因子，要求是二维的，第一个维度是时间维，第二个维度代表预报因子个数。
vy：必要参数，np.array类型或xr.Dataarray类型。该参数代表需要做逐步回归的预报值，要求是一维的，即时间维。
vx_list_name：必要参数，tumple类型。该参数代表vx中的每个预报因子的名称，其输入长度必须要和vx长度相同。
p：可选参数，实型。该参数代表逐步回归所用到的显著性检验值。默认值为0.05，即5％的显著性水平
regression_meathod：可选参数，字符串类型。该参数代表是做向前的逐步回归还是向后的逐步回归，'forward'代表向前逐步回归，'backward'代表向后逐步回归。默认值为'forward'
if_print_middle_result：可选参数，字符串类型。该参数代表是否要输出中间结果，即每次回归所加入方程的预报因子即其显著性水平，'yes'代表输出，'no'代表不输出。默认为'no' 即不输出中间结果
返回值：
result：返回逐步回归中通过了显著性检验的预报因子，其顺序就是加入方程的顺序

2.33 model,predicty,testy,r,p=Auto_paint_self.Auto_more_linregress(vx,vy,test_size=0.25,ifweight='yes',ifrandom_split='yes',vx_list_name=None,vx_rem_name=None)
该函数用于做多元线性回归
输入值：
vx：必要参数,np.array类型或xr.Dataarray类型。该参数代表需要做多元线性回归的所有预报因子，要求是二维的，第一个维度是时间维，第二个维度代表预报因子个数。
vy：必要参数，np.array类型或xr.Dataarray类型。该参数代表需要做多元线性回归的预报值，要求是一维的，即时间维。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.25
ifweight：可选参数，字符串类型。该参数代表是否要输出每个预报因子对于预报值的预报贡献，'yes'代表输出，'no'代表不输出。默认值为'yes'
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
vx_list_name：可选参数，tumple类型。该参数代表vx中的每个预报因子的名称，其输入长度必须要和vx长度相同。该参数仅在需要在vx中选择部分预报因子进行多元线性回归时启用，默认值为None
vx_rem_name：可选参数，tumple类型。该参数代表vx_list_name中通过了显著性检验或者需要采用的因子的名称。该参数仅在需要在vx中选择部分预报因子进行多元线性回归时启用，默认值为None
返回值：
model：返回训练好的模型model
predicty：返回测试集预测值y'
testy：返回测试集真实值vy
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。

2.34 v,vs,lon,lat,levels,latlow,lattop,lonleft,lonright,times,geo=Auto_paint_self.Auto_any_vertical(v,vplus,v3d,latname,lat,lonname,lon,levelname,levels,lonresolution,latresolution,timename,times,location,datamodel,geo=None)
该函数用于任意截面垂直绘图前插值和投影准备
输入值：
v：必要参数，np.array类型或xr.Dataarray类型。该参数根据datamodel的不同而不同：当datamodel为'v'时，该参数代表要进行任意截面垂直绘图中的常量v；当datamodel为'x'或'xy'或'xz'或'xyz'时，该参数代表要进行任意截面垂直绘图中的u风；当datamodel为'y'或'yz'时，该参数代表要进行任意截面垂直绘图中的v风
vplus：必要参数，np.array类型或xr.Dataarray类型。该参数根据datamodel的不同而不同：当datamodel为'xy'或'xyz'时，该参数代表要进行任意截面垂直绘图中的v风；当datamodel为'xz'或'yz'时，该参数代表要进行任意截面垂直绘图中的w风;其他情况下请填写None值
v3d：必要参数，np.array类型或xr.Dataarray类型。该参数根据datamodel的不同而不同：当datamodel为'xyz'时，该参数代表要进行任意截面垂直绘图中的w风；其他情况下请填写None值
latname：必要参数，字符串类型。该参数设定为变量的纬度名称，如'lat'。
lat：必要参数，xr.DataArray或者np.array类型。该参数代表变量v的纬度。
lonname：必要参数，字符串类型。该参数设定为变量的经度名称，如'lon'。
lon：必要参数，xr.DataArray或者np.array类型。该参数代表变量v的经度。
levelname：必要参数，字符串类型。该参数设定为变量高度层次的名称，如'level'。
levels：必要参数，xr.DataArray或者np.array类型。该参数代表变量v的高度维。
lonresolution：必要参数，实型。该参数为变量空间经度方向分辨率，如输入0.5代表经度方向分辨率为0.5。
latresolution：必要参数，实型。该参数为变量空间纬度方向分辨率，如输入0.5代表纬度方向分辨率为0.5。
timename：必要参数，字符串类型。该参数设定为变量的时间维名称，如'time'。
times：必要参数，xr.DataArray或者np.array类型。该参数代表变量v的时间维度。
location：必要参数，tumple类型。该参数代表垂直截面的起始经纬度和结束经纬度位置信息，如[[70.0,20.0],[140.0,55.0]]代表起始位置为20°N，70°E，结束位置为55°N，140°E
datamodel：必要参数，字符串类型。该参数代表输入变量的模式，'v'代表输入的为常量；'x'代表输入u风,'y'代表输入v风；'z'代表输入w风；'xy'代表输入u风和v风；'yz'代表输入v风和w风；'xz'代表输入u风和w风；'xyz'代表输入u风和v风和w风
geo：可选参数，xr.DataArray或者np.array类型。该参数代表输入的地形数据，如果不输入地形数据则采用默认值。默认值为None
返回值：
v：返回进行过插值和投影的变量v（当datamodel为'v'时代表插值过的常量，其他情况均为u风和v风在垂直截面上的投影）
vs：返回进行过插值的变量vs（当datamodel为'xz','yz','xyz'时代表插值过的w风，其他情况均和v相同）
lon：返回变量的经度维度
lat：返回变量的纬度维度
levels：返回变量的高度维度
latlow：返回垂直截面的最低纬度
lattop：返回垂直截面的最高纬度
lonleft：返回垂直截面的最左经度
lonright：返回垂直截面的最右经度
times：返回变量的时间维度
geo：返回进行过插值的地形geo

2.35 v,lon,lat,levels,latlow,lattop,lonleft,lonright,times=Auto_paint_self.open_data_grib(gribmode,filename,v_name,iftime,timename,timestart,timeend,iflon,lonname,iflat,latname,latlow,lattop,lonleft,lonright,latresolution,lonresolution,iflevel,levelname,level,time_level_order=None,translevel='no',ifkey='no',key_type=None,key=None,timespace=1,changeresolution=1,value_range=None)
该函数用于打开grib格式的文件
输入值：
gribmode：必要参数，字符串类型。该参数设定为是读取单个grib文件还是读取多个grib文件，'one'代表读取单个grib文件，'more_time'代表读取多个grib文件，grib文件按照时间分隔。
filename：必要参数，字符串类型。若gribmode为'one',则该参数设定为要读取的grib文件的路径，如'E:/hgt.grib'；若gribmode为'more_time',则该参数设定为装载多个grib文件的文件夹，如'E:/hgt/'(hgt文件夹中有多个grib文件，其按照时间分割)。
v_name：必要参数，字符串类型。该参数设定为grib文件中要读取变量的名称，如'temperature'。
iftime：必要参数，字符串类型。该参数代表grib文件是否有时间维，'yes'代表有，'no'代表没有，'self'代表变量时间为自定义时间（时间不是datetime格式）。还可以填写'create'代表读取的多个grib文件没有时间维，自己指定nc文件的时间。
timename：必要参数，字符串类型。该参数设定为grib文件中变量的时间维名称，如'time'。如果iftime为'create'则填写自己想要命名时间维度的名称。如果iftime为'no'没有时间则可以任意赋值。
timestart：必要参数，字符串类型。该参数代表截取时间的起始日期，目前只能对年月日进行限定，填写格式为'1981-01-01'。如果iftime为'create'则填写第一个grib文件的时间。如果iftime为'no'没有时间则可以任意赋值。
timeend：必要参数，字符串类型。该参数代表截取时间的结束日期，目前只能对年月日进行限定，填写格式同timestart。如果iftime为'create'则填写最后一个grib文件的时间。如果iftime为'no'没有时间则可以任意赋值。
iflon：必要参数，字符串类型。该参数代表grib文件是否有经度维，'yes'代表有，'no'代表没有。
lonname：必要参数，字符串类型。该参数设定为grib文件中变量的经度名称，如'lon'。如果iflon为'no'没有经度维则可以任意赋值。
iflat：必要参数，字符串类型。该参数代表grib文件是否有纬度维，'yes'代表有，'no'代表没有。
latname：必要参数，字符串类型。该参数设定为grib文件中变量的纬度名称，如'lat'。如果iflat为'no'没有纬度维则可以任意赋值。
latlow：必要参数，整形。该参数设定为变量的空间范围中最低纬度，如20。如果iflat为'no'没有纬度维则可以任意赋值。
lattop：必要参数，整形。该参数设定为变量的空间范围中最高纬度，如70。如果iflat为'no'没有纬度维则可以任意赋值。
lonleft：必要参数，整形。该参数设定为变量的空间范围中最左经度。输入范围请按照原始grib文件lon范围划定；若文件中经度范围为0-360，则小于180代表东半球，大于180代表西半球。若文件中经度范围为-180-180，则小于0代表西半球，大于0代表东半球。输入格式同latlow和lattop。如果iflon为'no'没有经度维则可以任意赋值。
lonright：必要参数，整形。该参数设定为变量的空间范围中最右经度。输入范围请按照原始grib文件lon范围划定；若文件中经度范围为0-360，则小于180代表东半球，大于180代表西半球。若文件中经度范围为-180-180，则小于0代表西半球，大于0代表东半球。输入格式同latlow和lattop。如果iflon为'no'没有经度维则可以任意赋值。
latresolution：必要参数，实型。该参数设定为变量空间纬度方向分辨率，如输入0.5代表纬度方向分辨率为0.5。如果iflat为'no'没有纬度维则可以任意赋值。
lonresolution：必要参数，实型。该参数设定为变量空间经度方向分辨率，如输入0.5代表经度方向分辨率为0.5。如果iflon为'no'没有经度维则可以任意赋值。
iflevel：必要参数，字符串类型。该参数代表变量是否有高度层次，'yes'代表有并且选取某一层，'no'代表没有，'all'代表有并且选取全部层次，'self'代表有并且选取其中某个层次区间，'selfchose'代表有并且选取其中某几个层次
levelname：必要参数，字符串类型。该参数设定为变量高度层次的名称，如'level'。若iflevel为'no'则该参数可以任意赋值。
level：必要参数；代表所选取的层次。当iflevel为'yes'时填写某个高度层次，为整形，如'1000'代表选取1000hpa层次；当iflevel为'no'时可以任意赋值；当iflevel为'self'时填写某个高度区间，填写格式如[1000,500]代表选取1000hpa到500hpa之间所有的层次，为tumple类型；当iflevel为'selfchose'填写某几个层次，填写格式如['1000','800','500']代表选取1000hpa，800hpa，500hpa三个层次，为tumple类型；当iflevel为'create'时，填写手动创建的层次，比如要和变量v的数目对应，如读取进来5个文件，填写[100,200,300,400,500]代表创建5个层次的levels
time_level_order：可选参数，字符串类型。仅当gribmode为'one'并且iflevel不为'no'时起作用。代表grib文件中变量的时间维和高度维的顺序，填写'time_level'代表时间维在前，高度维在后，填写'level_time'代表高度维在前，时间维在后。默认值为None
translevel：可选参数，字符串类型。代表是否要反转高度维。'yes'代表反转，'no'代表不反转。只有在gribmode为'one'时才起作用。默认值为'no'
ifkey：可选参数，字符串类型。该参数代表grib文件是否需要指定key值，'yes'代表需要指定，'no'代表不需要指定。默认值为'no'
key_type：可选参数，字符串类型。该参数代表filter_by_key字典里键的名称（即字典：前的名称）。只有在ifkey为'yes'时才起作用。默认值为None
key：可选参数，字符串类型。该参数代表filter_by_key字典里值的名称（即字典：后的名称）。只有在ifkey为'yes'时才起作用。默认值为None
timespace：可选参数，整形。该参数用于创建时间维时指定时间间隔，只有在iftime为'create'时才会生效。默认值为1
changeresolution：可选参数，整形。该参数用于改变数据的空间分辨率。假如数据空间分辨率为0.1°×0.1°，若该参数填写2，代表改变分辨率到0.2°×0.2°；不改变数据分辨率该参数默认为1。
value_range：可选参数，tumple类型。该参数代表是否要指定数据取值范围。None代表不指定，填写[a,b]代表指定，指定数据取值在a到b之间，小于a和大于b的值将被赋值为nan。默认值为None
返回值：
v：返回筛选过时间范围和空间范围后的变量。
lon：返回变量的经度维度。
lat：返回变量的纬度维度。
levels：返回变量的高度维度。
latlow：返回变量的最低纬度。
lattop：返回变量的最高纬度。
lonleft：返回变量的最左经度。
lonright：返回变量的最右经度。
times：返回变量的时间维度。

2.36 Auto_paint_self.Auto_create_gif(filename,giffile_name,duration=1)
该函数用于创建gif文件
输入值：
filename：必要参数，字符串类型。该参数代表创建gif所用的图片存放的路径，如'F:/GFS/'
newfilename：必要参数，字符串类型。该参数代表新创建的gif图所存放的路径和名称，如'F:/new.gif'
duration：可选参数，实型。该参数代表创建gif图时，图片变换的时间间隔，如1代表时间间隔为1秒。默认值为1
返回值：
该函数没有返回值

2.37 model,predicty,testy,r,p,weights=Auto_paint_self.Auto_xgboost(vy,vx,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,default_learning_rate=0.5,default_max_depth=50,default_num_leaves=100,default_max_bin=256,boosting_type='dart',n_estimators=10000,subsample=0.7,metrics='default',if_early_stopping=None,ifmute='no',ifweight='yes',ifrandom_split='yes',ifsave='no',savepath=None,device='cpu')
该函数用于机器学习xgboost的参数调优，以及进行xgboost模型训练。#注：模型部分参数可以参考网址（https://xgboost.readthedocs.io/en/stable/python/python_api.html#module-xgboost.sklearn）
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，其必须为一维的，只保留时间维度。
vx：必要参数，np.array类型。该参数代表预报因子的值，其必须为二维的，其中第一维为时间维度，与vy长度一致，第二维的长度和预报因子数量相同。vx由预报因子做空间平均后叠加，并且翻转第一维和第二维而成。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表所输入的参数（default_learning_rate，default_max_depth，default_num_leaves，default_max_bin）是否为最优，以及是否需要调优。'no'代表输入参数不是最优，需要调优；'yes'输入参数为最优，不需要调优；'load'代表从指定路径载入训练好的模型。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
default_learning_rate：可选参数，实型。代表初始的学习率，学习率代表每加入一棵树到模型中其占有权重的大小。跟树的数量有关，加入的树越多，学习率通常越低模型越优，而加入的树越少，通常学习率越高越优。默认值为0.5
default_max_depth：可选参数，整形。代表初始的最大树深度，最大树深度代表模型的树最多有多少层，过深的模型可能会导致过拟合，而过浅的模型可能会导致预测准确率低。默认值为50
default_num_leaves：可选参数，整形。代表初始的最大叶子节点数，最大叶子节点数代表每棵树最多有多少叶子节点，过多的叶子节点可能会导致过拟合，而过少的叶子节点可能会导致预测准确率低。默认值为100
default_max_bin：可选参数，整形。代表最大离散条柱数，最大离散条柱数过多可能会导致过拟合，最大离散条柱数过少可能会导致预测准确率低。默认值为256
boosting_type：可选参数，字符串类型。代表做梯度提升的模型算法，'gbtree'代表传统的梯度提升决策树。'dart'代表多个加法回归树。'gblinear'代表线型梯度提升。默认值为'dart'
n_estimators：可选参数，整形。代表xgboost中树的数量。越多的树意味着模型精度越高但是越浪费计算机计算时间，越少的树意味着越节约计算机计算资源但是模型精度越低。通常取1000-10000之间最好。默认值为10000
subsample：可选参数，实型。代表模型中每次训练采用的样本比率（拿来训练的样本数量/训练集中样本数量，不包括测试集数据）。通常在确定预报因子都与预报量有关的情况下，该值不能小于0.5，在0.7到1.0之间最为合适。默认值为0.7
metrics：可选参数，字符串类型。该参数代表模型所使用的评估标准。根据task_mode的不同而填写不同参数；当task_mode为'binary_classify'时，填写default或者f1代表使用f1指数作为评估标准，填写recall代表使用召回率作为评估标准，填写precision代表使用精确率作为评估标准；当task_mode为'regression'时填写default或者pearson代表使用相关系数作为评估标准，填写mse代表使用均方根误差作为评估标准；当task_mode为'multi_classify'时填写default或accuracy代表使用准确率作为评估标准。默认值为'default'
if_early_stopping：可选参数，整形。该参数代表是否要进行早停，填写数字数字代表早停轮次，填写None代表不早停。默认值为None
ifmute：可选参数，字符串类型。代表是否打印调优次数以及是否打印每次调优时的预测值与真实值的相关系数。默认值为'no'代表打印
ifweight：可选参数，字符串类型。该参数代表是否要输出每个预报因子对于预报值的预报贡献以及使用什么模型计算预报因子贡献，'yes'或者'shap'代表使用shp模型输出预报因子贡献，'PI'代表使用permutation_importance模型输出预报因子贡献，'no'代表不输出。默认值为'yes'
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的最优模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None
weights：如果ifweight不为'no'，则返回预报因子的贡献率；否则返回None

2.38 model,predicty,testy,r,p,weights=Auto_paint_self.Auto_catboost(vy,vx,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,default_learning_rate=0.5,default_max_depth=8,default_num_leaves=100,default_min_child_samples=20,boosting_type='Plain',n_estimators=10000,subsample=0.7,metrics='default',if_early_stopping=None,ifmute='no',ifweight='yes',ifrandom_split='yes',ifsave='no',savepath=None)
该函数用于机器学习catboost的参数调优，以及进行catboost模型训练。#注：模型部分参数可以参考网址（https://catboost.ai/en/docs/concepts/python-reference_catboostregressor）
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，其必须为一维的，只保留时间维度。
vx：必要参数，np.array类型。该参数代表预报因子的值，其必须为二维的，其中第一维为时间维度，与vy长度一致，第二维的长度和预报因子数量相同。vx由预报因子做空间平均后叠加，并且翻转第一维和第二维而成。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表所输入的参数（default_learning_rate，default_max_depth，default_num_leaves，default_min_child_samples）是否为最优，以及是否需要调优。'no'代表输入参数不是最优，需要调优；'yes'输入参数为最优，不需要调优；'load'代表从指定路径载入训练好的模型。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
default_learning_rate：可选参数，实型。代表初始的学习率，学习率代表每加入一棵树到模型中其占有权重的大小。跟树的数量有关，加入的树越多，学习率通常越低模型越优，而加入的树越少，通常学习率越高越优。默认值为0.5
default_max_depth：可选参数，整形。代表初始的最大树深度，最大树深度代表模型的树最多有多少层，过深的模型可能会导致过拟合，而过浅的模型可能会导致预测准确率低。在catboost中，depth深度最多为16。默认值为8
default_num_leaves：可选参数，整形。代表初始的最大叶子节点数，最大叶子节点数代表每棵树最多有多少叶子节点，过多的叶子节点可能会导致过拟合，而过少的叶子节点可能会导致预测准确率低。默认值为100
default_min_child_samples：可选参数，整形。代表初始的每个叶子节点上的最小样本数，每个叶子节点上的最小样本数代表每个叶子节点上最少有多少个样本，否则将该叶子节点剔除，将样本回归到父节点上。每个叶子节点上的最小样本数过少可能会导致过拟合，每个叶子节点上的最小样本数过多可能会导致预测准确率低。默认值为20
boosting_type：可选参数，字符串类型。代表做梯度提升的模型算法，'Ordered'通常在小型数据集上提供更好的质量，但可能比普通方案慢。'Plain'代表经典的渐变提升方案。默认值为'Plain'
n_estimators：可选参数，整形。代表catboost中树的数量。越多的树意味着模型精度越高但是越浪费计算机计算时间，越少的树意味着越节约计算机计算资源但是模型精度越低。通常取1000-10000之间最好。默认值为10000
subsample：可选参数，实型。代表模型中每次训练采用的样本比率（拿来训练的样本数量/训练集中样本数量，不包括测试集数据）。通常在确定预报因子都与预报量有关的情况下，该值不能小于0.5，在0.7到1.0之间最为合适。默认值为0.7
metrics：可选参数，字符串类型。该参数代表模型所使用的评估标准。根据task_mode的不同而填写不同参数；当task_mode为'binary_classify'时，填写default或者f1代表使用f1指数作为评估标准，填写recall代表使用召回率作为评估标准，填写precision代表使用精确率作为评估标准；当task_mode为'regression'时填写default或者pearson代表使用相关系数作为评估标准，填写mse代表使用均方根误差作为评估标准；当task_mode为'multi_classify'时填写default或accuracy代表使用准确率作为评估标准。默认值为'default'
if_early_stopping：可选参数，整形。该参数代表是否要进行早停，填写数字数字代表早停轮次，填写None代表不早停。默认值为None
ifmute：可选参数，字符串类型。代表是否打印调优次数以及是否打印每次调优时的预测值与真实值的相关系数。默认值为'no'代表打印
ifweight：可选参数，字符串类型。该参数代表是否要输出每个预报因子对于预报值的预报贡献以及使用什么模型计算预报因子贡献，'yes'或者'shap'代表使用shp模型输出预报因子贡献，'PI'代表使用permutation_importance模型输出预报因子贡献，'no'代表不输出。默认值为'yes'
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
返回值：
model：返回训练好的最优模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None
weights：如果ifweight不为'no'，则返回预报因子的贡献率；否则返回None

2.39 model,predicty,testy,r,p,weights=Auto_paint_self.Auto_adaboost(vy,vx,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,default_learning_rate=0.5,default_max_depth=50,default_num_leaves=100,default_min_child_samples=20,n_estimators=10000,subsample=0.7,metrics='default',ifmute='no',ifweight='yes',ifrandom_split='yes',ifsave='no',savepath=None)
该函数用于机器学习adaboost的参数调优，以及进行adaboost模型训练。#注：模型部分参数可以参考网址（https://scikit-learn.org.cn/view/623.html）
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，其必须为一维的，只保留时间维度。
vx：必要参数，np.array类型。该参数代表预报因子的值，其必须为二维的，其中第一维为时间维度，与vy长度一致，第二维的长度和预报因子数量相同。vx由预报因子做空间平均后叠加，并且翻转第一维和第二维而成。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表所输入的参数（default_learning_rate，default_max_depth，default_num_leaves，default_min_child_samples）是否为最优，以及是否需要调优。'no'代表输入参数不是最优，需要调优；'yes'输入参数为最优，不需要调优；'load'代表从指定路径载入训练好的模型。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
default_learning_rate：可选参数，实型。代表初始的学习率，学习率代表每加入一棵树到模型中其占有权重的大小。跟树的数量有关，加入的树越多，学习率通常越低模型越优，而加入的树越少，通常学习率越高越优。默认值为0.5
default_max_depth：可选参数，整形。代表初始的最大树深度，最大树深度代表模型的树最多有多少层，过深的模型可能会导致过拟合，而过浅的模型可能会导致预测准确率低。默认值为50
default_num_leaves：可选参数，整形。代表初始的最大叶子节点数，最大叶子节点数代表每棵树最多有多少叶子节点，过多的叶子节点可能会导致过拟合，而过少的叶子节点可能会导致预测准确率低。默认值为100
default_min_child_samples：可选参数，整形。代表初始的每个叶子节点上的最小样本数，每个叶子节点上的最小样本数代表每个叶子节点上最少有多少个样本，否则将该叶子节点剔除，将样本回归到父节点上。每个叶子节点上的最小样本数过少可能会导致过拟合，每个叶子节点上的最小样本数过多可能会导致预测准确率低。默认值为20
n_estimators：可选参数，整形。代表adaboost中树的数量。越多的树意味着模型精度越高但是越浪费计算机计算时间，越少的树意味着越节约计算机计算资源但是模型精度越低。通常取1000-10000之间最好。默认值为10000
subsample：可选参数，实型。代表模型中每次训练采用的样本比率（拿来训练的样本数量/训练集中样本数量，不包括测试集数据）。通常在确定预报因子都与预报量有关的情况下，该值不能小于0.5，在0.7到1.0之间最为合适。默认值为0.7
metrics：可选参数，字符串类型。该参数代表模型所使用的评估标准。根据task_mode的不同而填写不同参数；当task_mode为'binary_classify'时，填写default或者f1代表使用f1指数作为评估标准，填写recall代表使用召回率作为评估标准，填写precision代表使用精确率作为评估标准；当task_mode为'regression'时填写default或者pearson代表使用相关系数作为评估标准，填写mse代表使用均方根误差作为评估标准；当task_mode为'multi_classify'时填写default或accuracy代表使用准确率作为评估标准。默认值为'default'
ifmute：可选参数，字符串类型。代表是否打印调优次数以及是否打印每次调优时的预测值与真实值的相关系数。默认值为'no'代表打印
ifweight：可选参数，字符串类型。该参数代表是否要输出每个预报因子对于预报值的预报贡献以及使用什么模型计算预报因子贡献，'yes'或者'shap'代表使用shp模型输出预报因子贡献，'PI'代表使用permutation_importance模型输出预报因子贡献，'no'代表不输出。默认值为'yes'
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
返回值：
model：返回训练好的最优模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None
weights：如果ifweight不为'no'，则返回预报因子的贡献率；否则返回None

2.40 imf,t,frac,T=Auto_paint_self.Auto_EMD(v,method,trials=100,noise_width=0.05,alpha=0.95)
该函数用于EMD或者EEMD或者CEEMDAN分解
输入值：
v：必要参数，np.array或者xr.Dataarray类型。该参数代表要进行分解的变量v，必须是一维的。
method：必要参数，字符串类型。该参数代表要进行分解的方法，可选'EMD'、'EEMD'和'CEEMDAN'。
trials：可选参数，整形。代表试验次数，只有在method为'EEMD'或'CEEMDAN'时才生效。默认值为100
noise_width：可选参数，实型。代表高斯噪声的标准差，只有在method为'EEMD'时才生效。默认值为0.05
alpha：可选参数，实型。该参数代表进行显著性检验时的置信区间。默认值为0.95
返回值：
imf：返回分解后的各模态变量
t：返回时间长度，和imf长度一致
frac：返回个各模态的贡献率
T：返回个各模态的周期T

2.41 T,err90,err95,err99=Auto_paint_self.Auto_Liang_Kleeman_information_flow(v1,v2,time_advance)
该函数用于做信息流
输入值：
v1：必要参数，np.array或者xr.Dataarray类型。该参数代表被影响因子，即结果。
v2：必要参数，np.array或者xr.Dataarray类型。该参数代表影响因子，即原因。
time_advance：必要参数，实型。执行欧拉前向微分时的时间提前量，除非序列是用高度混沌的确定性系统生成的，否则应为1.
返回值：
T：代表v2对v1的影响程度
err90：代表置信区间为0.9的显著性水平p值
err95：代表置信区间为0.95的显著性水平p值
err99：代表置信区间为0.99的显著性水平p值

2.42 tau,dH1_star,dH1_noise=Auto_paint_self.Auto_Liang_Kleeman_relative_flow(v1,v2,time_advance)
该函数用于做归一化信息流
输入值：
v1：必要参数，np.array或者xr.Dataarray类型。该参数代表被影响因子，即结果。
v2：必要参数，np.array或者xr.Dataarray类型。该参数代表影响因子，即原因。
time_advance：必要参数，实型。执行欧拉前向微分时的时间提前量，除非序列是用高度混沌的确定性系统生成的，否则应为1.
返回值：
tau：代表v2对v1的影响程度
dH1_star：v1对自身的相对贡献
dH1_noise：相对噪声贡献（信噪比）

2.43 label=Auto_paint_self.DBSCAN_eval(output,method='k_distance',auto_chose_eps='yes',eps=None,min_samples=None,step=1)
该函数用于做DBSCAN评估以及聚类
输入值：
output：必要参数，np.array或者xr.Dataarray类型。该参数代表要用于聚类的数据
method：可选参数，字符串类型。该参数代表用于选择DBSCAN聚类半径eps和每类最少样本点min_samples的评估方法，目前只有'k_distance'方法。默认值为'k_distance'
auto_chose_eps：可选参数，字符串类型。该参数代表是否要使用评估方法所选择的最优eps和min_samples进行聚类，'yes'代表是,'no'代表否。默认值为'yes'
eps：可选参数，实型。该参数代表聚类所用到的聚类半径eps。只有在auto_chose_eps为'no'即自己指定eps时才会用到。默认值为None
min_samples：可选参数，整形。该参数代表聚类所用到的每类最少样本数。只有在auto_chose_eps为'no'即自己指定min_samples时才会用到。默认值为None
step：可选参数，整形。该参数代表k_distance算法中计算拐点时的步长。默认值为1
返回值：
label：返回分类结果label

2.44 model,predicty,testy,r,p,weights=Auto_paint_self.Auto_RandomForest(vy,vx,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,default_max_depth=50,default_num_leaves=100,default_min_child_samples=20,n_estimators=10000,bootstrapbool=True,max_samples=0.7,metrics='default',ifmute='no',ifweight='yes',ifrandom_split='yes',ifsave='no',savepath=None)
该函数用于机器学习randomforest的参数调优，以及进行randomforest模型训练。#注：模型部分参数可以参考网址（https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestRegressor.html?highlight=randomforest#sklearn.ensemble.RandomForestRegressor）
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，其必须为一维的，只保留时间维度。
vx：必要参数，np.array类型。该参数代表预报因子的值，其必须为二维的，其中第一维为时间维度，与vy长度一致，第二维的长度和预报因子数量相同。vx由预报因子做空间平均后叠加，并且翻转第一维和第二维而成。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表所输入的参数（default_max_depth，default_num_leaves，default_min_child_samples）是否为最优，以及是否需要调优。'no'代表输入参数不是最优，需要调优；'yes'输入参数为最优，不需要调优；'load'代表从指定路径载入训练好的模型。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
default_max_depth：可选参数，整形。代表初始的最大树深度，最大树深度代表模型的树最多有多少层，过深的模型可能会导致过拟合，而过浅的模型可能会导致预测准确率低。默认值为50
default_num_leaves：可选参数，整形。代表初始的最大叶子节点数，最大叶子节点数代表每棵树最多有多少叶子节点，过多的叶子节点可能会导致过拟合，而过少的叶子节点可能会导致预测准确率低。默认值为100
default_min_child_samples：可选参数，整形。代表初始的每个叶子节点上的最小样本数，每个叶子节点上的最小样本数代表每个叶子节点上最少有多少个样本，否则将该叶子节点剔除，将样本回归到父节点上。每个叶子节点上的最小样本数过少可能会导致过拟合，每个叶子节点上的最小样本数过多可能会导致预测准确率低。默认值为20
n_estimators：可选参数，整形。代表模型中树的数量。越多的树意味着模型精度越高但是越浪费计算机计算时间，越少的树意味着越节约计算机计算资源但是模型精度越低。通常取1000-10000之间最好。默认值为10000
bootstrapbool：可选参数，bool类型。代表是否要进行下采样，True代表进行，False代表不进行。默认值为True
max_samples：可选参数，实型。代表模型中每次训练采用的样本比率（拿来训练的样本数量/训练集中样本数量，不包括测试集数据）。通常在确定预报因子都与预报量有关的情况下，该值不能小于0.5，在0.7到1.0之间最为合适。默认值为0.7
metrics：可选参数，字符串类型。该参数代表模型所使用的评估标准。根据task_mode的不同而填写不同参数；当task_mode为'binary_classify'时，填写default或者f1代表使用f1指数作为评估标准，填写recall代表使用召回率作为评估标准，填写precision代表使用精确率作为评估标准；当task_mode为'regression'时填写default或者pearson代表使用相关系数作为评估标准，填写mse代表使用均方根误差作为评估标准；当task_mode为'multi_classify'时填写default或accuracy代表使用准确率作为评估标准。默认值为'default'
ifmute：可选参数，字符串类型。代表是否打印调优次数以及是否打印每次调优时的预测值与真实值的相关系数。默认值为'no'代表打印
ifweight：可选参数，字符串类型。该参数代表是否要输出每个预报因子对于预报值的预报贡献以及使用什么模型计算预报因子贡献，'yes'或者'shap'代表使用shp模型输出预报因子贡献，'PI'代表使用permutation_importance模型输出预报因子贡献，'no'代表不输出。默认值为'yes'
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
返回值：
model：返回训练好的最优模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None
weights：如果ifweight不为'no'，则返回预报因子的贡献率；否则返回None

2.45 best_learning_rate,best_max_depth,best_num_leaves,best_min_child_samples,best_r=Auto_paint_self.Auto_lightgbm_Bayesian_Optimization(vx,vy,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',ifrandom_split='yes',learning_rate_range=[0.01,1.0],max_depth_range=[10,100],num_leaves_range=[50,150],min_child_samples_range=[2,40],boosting_type='dart',n_estimators=10000,subsample=0.7,init_points=10,n_iter=0,metrics='default',if_early_stopping=None,ifmute='no',device='cpu')
该函数用于lightgbm的贝叶斯调优
输入值：
vx：必要参数，np.array类型。该参数代表预报因子的值，其必须为二维的，其中第一维为时间维度，与vy长度一致，第二维的长度和预报因子数量相同。vx由预报因子做空间平均后叠加，并且翻转第一维和第二维而成。
vy：必要参数，np.array类型。该参数代表预报量的真实值，其必须为一维的，只保留时间维度。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
learning_rate_range：可选参数，tumple类型。该参数代表贝叶斯调优的学习率范围。默认值为[0.01,1.0]代表学习率控制在0.01到1.0之间
max_depth_range：可选参数，tumple类型。该参数代表贝叶斯调优的最大树深度范围。默认值为[10,100]代表最大树深度控制在10到100之间
num_leaves_range：可选参数，tumple类型。该参数代表贝叶斯调优的最大叶子节点数范围。默认值为[50,150]代表最大叶子节点数控制在50到150之间
min_child_samples_range：可选参数，tumple类型。该参数代表贝叶斯调优的最小叶子节点样本数范围。默认值为[2,40]代表最小叶子节点样本数控制在2到40之间
boosting_type：可选参数，字符串类型。代表做梯度提升的模型算法，'gbdt'代表传统的梯度提升决策树。'dart'代表多个加法回归树。'goss'代表基于梯度的单边采样。'rf'代表随机森林。不建议采用'rf'随机森林。默认值为'dart'
n_estimators：可选参数，整形。代表模型中树的数量。越多的树意味着模型精度越高但是越浪费计算机计算时间，越少的树意味着越节约计算机计算资源但是模型精度越低。通常取1000-10000之间最好。默认值为10000
subsample：可选参数，实型。代表模型中每次训练采用的样本比率（拿来训练的样本数量/训练集中样本数量，不包括测试集数据）。通常在确定预报因子都与预报量有关的情况下，该值不能小于0.5，在0.7到1.0之间最为合适。默认值为0.7
init_points：可选参数，整形。该参数代表贝叶斯调优的随机调优次数。默认值为10
n_iter：可选参数，整形。该参数代表贝叶斯调优的深度调优次数。默认值为0
metrics：可选参数，字符串类型。该参数代表模型所使用的评估标准。根据task_mode的不同而填写不同参数；当task_mode为'binary_classify'时，填写default或者f1代表使用f1指数作为评估标准，填写recall代表使用召回率作为评估标准，填写precision代表使用精确率作为评估标准；当task_mode为'regression'时填写default或者pearson代表使用相关系数作为评估标准，填写mse代表使用均方根误差作为评估标准；当task_mode为'multi_classify'时填写default或accuracy代表使用准确率作为评估标准。默认值为'default'
if_early_stopping：可选参数，整形。该参数代表是否要进行早停，填写数字数字代表早停轮次，填写None代表不早停。默认值为None
ifmute：可选参数，字符串类型。代表是否打印调优的最优参数和最优TCC。默认值为'no'代表打印
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
best_learning_rate：返回贝叶斯调优的最优学习率
best_max_depth：返回贝叶斯调优的最优最大树深度
best_num_leaves：返回贝叶斯调优的最优最大叶子节点数
best_min_child_samples：返回贝叶斯调优的最优最小叶子节点样本数
best_r：返回贝叶斯调优的最优结果r

2.46 best_learning_rate,best_max_depth,best_num_leaves,best_max_bin,best_r=Auto_paint_self.Auto_xgboost_Bayesian_Optimization(vx,vy,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',ifrandom_split='yes',learning_rate_range=[0.01,1.0],max_depth_range=[10,100],num_leaves_range=[50,150],max_bin_range=[100,300],boosting_type='dart',n_estimators=10000,subsample=0.7,init_points=10,n_iter=0,metrics='default',if_early_stopping=None,ifmute='no',device='cpu')
该函数用于xgboost的贝叶斯调优
输入值：
vx：必要参数，np.array类型。该参数代表预报因子的值，其必须为二维的，其中第一维为时间维度，与vy长度一致，第二维的长度和预报因子数量相同。vx由预报因子做空间平均后叠加，并且翻转第一维和第二维而成。
vy：必要参数，np.array类型。该参数代表预报量的真实值，其必须为一维的，只保留时间维度。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
learning_rate_range：可选参数，tumple类型。该参数代表贝叶斯调优的学习率范围。默认值为[0.01,1.0]代表学习率控制在0.01到1.0之间
max_depth_range：可选参数，tumple类型。该参数代表贝叶斯调优的最大树深度范围。默认值为[10,100]代表最大树深度控制在10到100之间
num_leaves_range：可选参数，tumple类型。该参数代表贝叶斯调优的最大叶子节点数范围。默认值为[50,150]代表最大叶子节点数控制在50到150之间
max_bin_range：可选参数，tumple类型。该参数代表贝叶斯调优的最大离散条柱数范围。默认值为[100,300]代表最大离散条柱数控制在100到300之间
boosting_type：可选参数，字符串类型。代表做梯度提升的模型算法，'gbtree'代表传统的梯度提升决策树。'dart'代表多个加法回归树。'gblinear'代表线型梯度提升。默认值为'dart'
n_estimators：可选参数，整形。代表模型中树的数量。越多的树意味着模型精度越高但是越浪费计算机计算时间，越少的树意味着越节约计算机计算资源但是模型精度越低。通常取1000-10000之间最好。默认值为10000
subsample：可选参数，实型。代表模型中每次训练采用的样本比率（拿来训练的样本数量/训练集中样本数量，不包括测试集数据）。通常在确定预报因子都与预报量有关的情况下，该值不能小于0.5，在0.7到1.0之间最为合适。默认值为0.7
init_points：可选参数，整形。该参数代表贝叶斯调优的随机调优次数。默认值为10
n_iter：可选参数，整形。该参数代表贝叶斯调优的深度调优次数。默认值为0
metrics：可选参数，字符串类型。该参数代表模型所使用的评估标准。根据task_mode的不同而填写不同参数；当task_mode为'binary_classify'时，填写default或者f1代表使用f1指数作为评估标准，填写recall代表使用召回率作为评估标准，填写precision代表使用精确率作为评估标准；当task_mode为'regression'时填写default或者pearson代表使用相关系数作为评估标准，填写mse代表使用均方根误差作为评估标准；当task_mode为'multi_classify'时填写default或accuracy代表使用准确率作为评估标准。默认值为'default'
if_early_stopping：可选参数，整形。该参数代表是否要进行早停，填写数字数字代表早停轮次，填写None代表不早停。默认值为None
ifmute：可选参数，字符串类型。代表是否打印调优的最优参数和最优TCC。默认值为'no'代表打印
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
best_learning_rate：返回贝叶斯调优的最优学习率
best_max_depth：返回贝叶斯调优的最优最大树深度
best_num_leaves：返回贝叶斯调优的最优最大叶子节点数
best_max_bin：返回贝叶斯调优的最优最大离散条柱数
best_r：返回贝叶斯调优的最优结果r

2.47 best_learning_rate,best_max_depth,best_num_leaves,best_min_child_samples,best_r=Auto_paint_self.Auto_catboost_Bayesian_Optimization(vx,vy,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',ifrandom_split='yes',learning_rate_range=[0.01,1.0],max_depth_range=[4,16],num_leaves_range=[50,150],min_child_samples_range=[2,40],boosting_type='Plain',n_estimators=10000,subsample=0.7,init_points=10,n_iter=0,metrics='default',if_early_stopping=None,ifmute='no')
该函数用于catboost的贝叶斯调优
输入值：
vx：必要参数，np.array类型。该参数代表预报因子的值，其必须为二维的，其中第一维为时间维度，与vy长度一致，第二维的长度和预报因子数量相同。vx由预报因子做空间平均后叠加，并且翻转第一维和第二维而成。
vy：必要参数，np.array类型。该参数代表预报量的真实值，其必须为一维的，只保留时间维度。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
learning_rate_range：可选参数，tumple类型。该参数代表贝叶斯调优的学习率范围。默认值为[0.01,1.0]代表学习率控制在0.01到1.0之间
max_depth_range：可选参数，tumple类型。该参数代表贝叶斯调优的最大树深度范围。默认值为[4,16]代表最大树深度控制在4到16之间
num_leaves_range：可选参数，tumple类型。该参数代表贝叶斯调优的最大叶子节点数范围。默认值为[50,150]代表最大叶子节点数控制在50到150之间
min_child_samples_range：可选参数，tumple类型。该参数代表贝叶斯调优的最小叶子节点样本数范围。默认值为[2,40]代表最小叶子节点样本数控制在2到40之间
boosting_type：可选参数，字符串类型。代表做梯度提升的模型算法，'Ordered'通常在小型数据集上提供更好的质量，但可能比普通方案慢。'Plain'代表经典的渐变提升方案。默认值为'Plain'
n_estimators：可选参数，整形。代表模型中树的数量。越多的树意味着模型精度越高但是越浪费计算机计算时间，越少的树意味着越节约计算机计算资源但是模型精度越低。通常取1000-10000之间最好。默认值为10000
subsample：可选参数，实型。代表模型中每次训练采用的样本比率（拿来训练的样本数量/训练集中样本数量，不包括测试集数据）。通常在确定预报因子都与预报量有关的情况下，该值不能小于0.5，在0.7到1.0之间最为合适。默认值为0.7
init_points：可选参数，整形。该参数代表贝叶斯调优的随机调优次数。默认值为10
n_iter：可选参数，整形。该参数代表贝叶斯调优的深度调优次数。默认值为0
metrics：可选参数，字符串类型。该参数代表模型所使用的评估标准。根据task_mode的不同而填写不同参数；当task_mode为'binary_classify'时，填写default或者f1代表使用f1指数作为评估标准，填写recall代表使用召回率作为评估标准，填写precision代表使用精确率作为评估标准；当task_mode为'regression'时填写default或者pearson代表使用相关系数作为评估标准，填写mse代表使用均方根误差作为评估标准；当task_mode为'multi_classify'时填写default或accuracy代表使用准确率作为评估标准。默认值为'default'
if_early_stopping：可选参数，整形。该参数代表是否要进行早停，填写数字数字代表早停轮次，填写None代表不早停。默认值为None
ifmute：可选参数，字符串类型。代表是否打印调优的最优参数和最优TCC。默认值为'no'代表打印
返回值：
best_learning_rate：返回贝叶斯调优的最优学习率
best_max_depth：返回贝叶斯调优的最优最大树深度
best_num_leaves：返回贝叶斯调优的最优最大叶子节点数
best_min_child_samples：返回贝叶斯调优的最优最小叶子节点样本数
best_r：返回贝叶斯调优的最优结果r

2.48 best_learning_rate,best_max_depth,best_num_leaves,best_min_child_samples,best_r=Auto_paint_self.Auto_adaboost_Bayesian_Optimization(vx,vy,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',ifrandom_split='yes',learning_rate_range=[0.01,1.0],max_depth_range=[10,100],num_leaves_range=[50,150],min_child_samples_range=[2,40],n_estimators=10000,subsample=0.7,init_points=10,n_iter=0,metrics='default',ifmute='no')
该函数用于adaboost的贝叶斯调优
输入值：
vx：必要参数，np.array类型。该参数代表预报因子的值，其必须为二维的，其中第一维为时间维度，与vy长度一致，第二维的长度和预报因子数量相同。vx由预报因子做空间平均后叠加，并且翻转第一维和第二维而成。
vy：必要参数，np.array类型。该参数代表预报量的真实值，其必须为一维的，只保留时间维度。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
learning_rate_range：可选参数，tumple类型。该参数代表贝叶斯调优的学习率范围。默认值为[0.01,1.0]代表学习率控制在0.01到1.0之间
max_depth_range：可选参数，tumple类型。该参数代表贝叶斯调优的最大树深度范围。默认值为[10,100]代表最大树深度控制在10到100之间
num_leaves_range：可选参数，tumple类型。该参数代表贝叶斯调优的最大叶子节点数范围。默认值为[50,150]代表最大叶子节点数控制在50到150之间
min_child_samples_range：可选参数，tumple类型。该参数代表贝叶斯调优的最小叶子节点样本数范围。默认值为[2,40]代表最小叶子节点样本数控制在2到40之间
n_estimators：可选参数，整形。代表模型中树的数量。越多的树意味着模型精度越高但是越浪费计算机计算时间，越少的树意味着越节约计算机计算资源但是模型精度越低。通常取1000-10000之间最好。默认值为10000
subsample：可选参数，实型。代表模型中每次训练采用的样本比率（拿来训练的样本数量/训练集中样本数量，不包括测试集数据）。通常在确定预报因子都与预报量有关的情况下，该值不能小于0.5，在0.7到1.0之间最为合适。默认值为0.7
init_points：可选参数，整形。该参数代表贝叶斯调优的随机调优次数。默认值为10
n_iter：可选参数，整形。该参数代表贝叶斯调优的深度调优次数。默认值为0
metrics：可选参数，字符串类型。该参数代表模型所使用的评估标准。根据task_mode的不同而填写不同参数；当task_mode为'binary_classify'时，填写default或者f1代表使用f1指数作为评估标准，填写recall代表使用召回率作为评估标准，填写precision代表使用精确率作为评估标准；当task_mode为'regression'时填写default或者pearson代表使用相关系数作为评估标准，填写mse代表使用均方根误差作为评估标准；当task_mode为'multi_classify'时填写default或accuracy代表使用准确率作为评估标准。默认值为'default'
ifmute：可选参数，字符串类型。代表是否打印调优的最优参数和最优TCC。默认值为'no'代表打印
返回值：
best_learning_rate：返回贝叶斯调优的最优学习率
best_max_depth：返回贝叶斯调优的最优最大树深度
best_num_leaves：返回贝叶斯调优的最优最大叶子节点数
best_min_child_samples：返回贝叶斯调优的最优最小叶子节点样本数
best_r：返回贝叶斯调优的最优结果r

2.49 best_max_depth,best_num_leaves,best_min_child_samples,best_r=Auto_paint_self.Auto_RandomForest_Bayesian_Optimization(vx,vy,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',ifrandom_split='yes',max_depth_range=[10,100],num_leaves_range=[50,150],min_child_samples_range=[2,40],n_estimators=10000,bootstrapbool=True,max_samples=0.7,init_points=10,n_iter=0,metrics='default',ifmute='no')
该函数用于随机森林的贝叶斯调优
输入值：
vx：必要参数，np.array类型。该参数代表预报因子的值，其必须为二维的，其中第一维为时间维度，与vy长度一致，第二维的长度和预报因子数量相同。vx由预报因子做空间平均后叠加，并且翻转第一维和第二维而成。
vy：必要参数，np.array类型。该参数代表预报量的真实值，其必须为一维的，只保留时间维度。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
max_depth_range：可选参数，tumple类型。该参数代表贝叶斯调优的最大树深度范围。默认值为[10,100]代表最大树深度控制在10到100之间
num_leaves_range：可选参数，tumple类型。该参数代表贝叶斯调优的最大叶子节点数范围。默认值为[50,150]代表最大叶子节点数控制在50到150之间
min_child_samples_range：可选参数，tumple类型。该参数代表贝叶斯调优的最小叶子节点样本数范围。默认值为[2,40]代表最小叶子节点样本数控制在2到40之间
n_estimators：可选参数，整形。代表模型中树的数量。越多的树意味着模型精度越高但是越浪费计算机计算时间，越少的树意味着越节约计算机计算资源但是模型精度越低。通常取1000-10000之间最好。默认值为10000
bootstrapbool：可选参数，bool类型。代表是否要进行下采样，True代表进行，False代表不进行。默认值为True
max_samples：可选参数，实型。代表模型中每次训练采用的样本比率（拿来训练的样本数量/训练集中样本数量，不包括测试集数据）。通常在确定预报因子都与预报量有关的情况下，该值不能小于0.5，在0.7到1.0之间最为合适。默认值为0.7
init_points：可选参数，整形。该参数代表贝叶斯调优的随机调优次数。默认值为10
n_iter：可选参数，整形。该参数代表贝叶斯调优的深度调优次数。默认值为0
metrics：可选参数，字符串类型。该参数代表模型所使用的评估标准。根据task_mode的不同而填写不同参数；当task_mode为'binary_classify'时，填写default或者f1代表使用f1指数作为评估标准，填写recall代表使用召回率作为评估标准，填写precision代表使用精确率作为评估标准；当task_mode为'regression'时填写default或者pearson代表使用相关系数作为评估标准，填写mse代表使用均方根误差作为评估标准；当task_mode为'multi_classify'时填写default或accuracy代表使用准确率作为评估标准。默认值为'default'
ifmute：可选参数，字符串类型。代表是否打印调优的最优参数和最优TCC。默认值为'no'代表打印
返回值：
best_max_depth：返回贝叶斯调优的最优最大树深度
best_num_leaves：返回贝叶斯调优的最优最大叶子节点数
best_min_child_samples：返回贝叶斯调优的最优最小叶子节点样本数
best_r：返回贝叶斯调优的最优结果r

2.50 model,predicty,testy,r,p,weights=Auto_paint_self.Auto_Unet(vy,vx,downnum,covnum,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,ifrandom_split='yes',baselayer=64,cov_method='cov',cov_kernelsize=3,cov_strides=1,pool_method='maxpooling',pool_kernel_size=2,pool_strides=2,ifnormalization='no',normalization_method=None,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,activate='tanh',if_last_act='no',if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构造Unet网络
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是三维的。其前三个维度分别对应（时间，纬度，经度）
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。
downnum：必要参数，整形。该参数代表Unet网络的深度。下采样/上采样次数为网络深度-1。当数据的纬度和经度比较小时，网络深度不要过深，否则可能导致下层的下采样使得输入数据经度/纬度长度小于0
covnum：必要参数，整形。该参数代表每层网络要进行多少次卷积。卷积不会导致输入值和输出值在时间/经度/纬度上缺失（默认做补全操作）
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
baselayer：可选参数，整形。该参数代表起始卷积核个数，每做一次下采样，卷积核个数都会增加一倍。默认值为64
cov_method：可选参数，字符串类型。该参数代表卷积的类型，'cov'代表做Conv2D卷积，而'localcov'代表做LocallyConv2D卷积。注意，LocallyConv2D卷积代表卷积核不共享，将会导致过大的内存占用。默认值为'cov'
cov_kernelsize：可选参数，整形。该参数代表卷积核大小。默认值为3
cov_strides：可选参数，整形。该参数代表卷积层的步长。默认值为1
pool_methd：可选参数，字符串类型。该参数代表池化方法，'maxpoolng'代表做最大值池化,'avepooling'代表做平均池化。默认值为'maxpooling'
poolkernelsize：可选参数，整形。该参数代表池化核大小。默认值为2
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
ifnormalization：可选参数，字符串类型。该参数代表是否做归一化操作，'yes'代表做，'no'代表不做。默认值为'no'
normalization_method：可选参数，字符串类型。该参数代表做归一化操作的方法，只有在ifnormalization为'yes'时才会生效。填写'batchnormalization'代表做全局归一化，填写'LayerNormalization'代表做层归一化。默认值为None
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
activate：可选参数，字符串类型。该参数代表卷积使用的激活函数。默认值为'tanh'
if_last_act：可选参数，字符串类型。该参数代表最后一层卷积后，是否使用激活函数；填写'no'表示最后一层不使用激活函数，填写激活函数名称代表使用激活函数。通常回归任务最后一层不使用激活函数，分类任务最后一层使用。默认值为'no'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifweight：可选参数，字符串类型。该参数代表是否计算网络贡献率，'yes'代表是，'no'代表否。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.51 model,predicty,testy,r,p,weights=Auto_paint_self.Auto_LSTMorGRUorRNN(vy,vx,timestep,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,units=64,dropout=0.0,recurrent_dropout=0.0,activation='tanh',recurrent_activation='sigmoid',if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifweight='yes',ifmute='no',ifrandom_split='yes',ifsave='no',savepath=None,device='cpu')
该函数用于构造LSTM/GRU/RNN网络
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，其必须为一维的，只保留时间维度。
vx：必要参数，np.array类型。该参数代表预报因子的值，其必须为二维的，其中第一维为时间维度，与vy长度一致，第二维的长度和预报因子数量相同。vx由预报因子做空间平均后叠加，并且翻转第一维和第二维而成。
timestep：必要参数，整形。该参数代表预测vy所用到的vx提前时段，例如填写7代表用提前1-7个时次的vx预测vy。
model_list：必要参数，tumple类型。该参数代表构建的时间卷积网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['lstm']代表插入LSTM层；['gru']代表插入GRU层；['rnn']代表插入RNN层；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
units：可选参数，整形。该参数代表网络的内部循环的神经元个数。默认值为64
dropout：可选参数，实型。该参数代表网络外部循环的数据丢弃值，例如0.1代表丢弃百分之10的数据用于防止过拟合。默认值为0.0
recurrent_dropout：可选参数，实型。该参数代表网络内部循环的数据丢弃值，例如0.1代表丢弃百分之10的数据用于防止过拟合。默认值为0.0
activation：可选参数，字符串类型。该参数用于代表网络外部循环所使用的激活函数。默认值为'tanh'
recurrent_activation：可选参数，字符串类型。该参数用于代表网络内部循环所使用的激活函数。默认值为'sigmoid'
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'或者'shap'代表使用shap库计算贡献率，填写'oob'代表使用oob方法计算贡献率，填写'no'代表不计算贡献率。默认值为'yes'代表使用shap方法计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.52 best_x_name,best_vx,best_trainx,best_testx,best_r=Auto_paint_self.Auto_lightgbm_chose(vy,vx,x_name=None,test_size=0.25,task_mode='regression',if_best_mode='no',chosemode='forward',default_learning_rate=0.05,default_max_depth=50,default_num_leaves=100,default_min_child_samples=20,boosting_type='gbdt',n_estimators=10000,subsample=0.7,metrics='default',ifmute='no',ifweight='yes',ifrandom_split='yes',device='cpu')
该函数用于lightgbm模型前向/后向回归挑选预报因子
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，其必须为一维的，只保留时间维度。
vx：必要参数，np.array类型。该参数代表预报因子的值，其必须为二维的，其中第一维为时间维度，与vy长度一致，第二维的长度和预报因子数量相同。vx由预报因子做空间平均后叠加，并且翻转第一维和第二维而成。
x_name：可选参数，np.array类型。该参数代表vx即各个预报因子的名称，用于模型输出结果时预报因子名称的输出，如果为None则自动赋值数字1到n，n为预报因子个数。默认值为None
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.25
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表所输入的参数（default_learning_rate，default_max_depth，default_num_leaves，default_min_child_samples）是否为最优，以及是否需要调优。在该模型中，使用贝叶斯调优。'no'代表输入参数不是最优，需要调优；'yes'输入参数为最优，不需要调优。默认值为'no'
chosemode：可选参数，字符串类型。该参数代表模型是使用前向回归还是后向回归。'forward'代表前项回归，'backward'代表后向回归。默认值为'forward'
default_learning_rate：可选参数，实型。代表初始的学习率，学习率代表每加入一棵树到模型中其占有权重的大小。跟树的数量有关，加入的树越多，学习率通常越低模型越优，而加入的树越少，通常学习率越高越优。默认值为0.5
default_max_depth：可选参数，整形。代表初始的最大树深度，最大树深度代表模型的树最多有多少层，过深的模型可能会导致过拟合，而过浅的模型可能会导致预测准确率低。默认值为50
default_num_leaves：可选参数，整形。代表初始的最大叶子节点数，最大叶子节点数代表每棵树最多有多少叶子节点，过多的叶子节点可能会导致过拟合，而过少的叶子节点可能会导致预测准确率低。默认值为100
default_min_child_samples：可选参数，整形。代表初始的每个叶子节点上的最小样本数，每个叶子节点上的最小样本数代表每个叶子节点上最少有多少个样本，否则将该叶子节点剔除，将样本回归到父节点上。每个叶子节点上的最小样本数过少可能会导致过拟合，每个叶子节点上的最小样本数过多可能会导致预测准确率低。默认值为20
boosting_type：可选参数，字符串类型。代表做梯度提升的模型算法，'gbdt'代表传统的梯度提升决策树。'dart'代表多个加法回归树。'goss'代表基于梯度的单边采样。'rf'代表随机森林。不建议采用'rf'随机森林。默认值为'gbdt'
n_estimators：可选参数，整形。代表模型中树的数量。越多的树意味着模型精度越高但是越浪费计算机计算时间，越少的树意味着越节约计算机计算资源但是模型精度越低。通常取1000-10000之间最好。默认值为10000
subsample：可选参数，实型。代表模型中每次训练采用的样本比率（拿来训练的样本数量/训练集中样本数量，不包括测试集数据）。通常在确定预报因子都与预报量有关的情况下，该值不能小于0.5，在0.7到1.0之间最为合适。默认值为0.7
metrics：可选参数，字符串类型。该参数代表模型所使用的评估标准。根据task_mode的不同而填写不同参数；当task_mode为'binary_classify'时，填写default或者f1代表使用f1指数作为评估标准，填写recall代表使用召回率作为评估标准，填写precision代表使用精确率作为评估标准；当task_mode为'regression'时填写default或者pearson代表使用相关系数作为评估标准，填写mse代表使用均方根误差作为评估标准；当task_mode为'multi_classify'时填写default或accuracy代表使用准确率作为评估标准。默认值为'default'
ifmute：可选参数，字符串类型。代表是否不打印调优次数以及是否打印每次加入/剔除模型的预报因子。默认值为'no'代表打印
ifweight：可选参数，字符串类型。该参数代表是否使用贡献率作为挑选预报因子的标准以及使用什么模型计算预报因子贡献，'yes'或者'shap'代表使用shp模型计算预报因子贡献，'PI'代表使用permutation_importance模型计算预报因子贡献，'no'代表不使用贡献率作为挑选预报因子的标准。默认值为'yes'
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
best_x_name：返回模型挑选的最好的预报因子名称
best_vx：返回模型挑选的最好的预报因子序列
best_trainx：返回模型挑选的最好的预报因子训练集序列
best_testx：返回模型挑选的最好的预报因子测试集序列
best_r：返回模型测试集中最优的预报因子组合所达到的最高的预测值与准确值的相关系数

2.53 best_x_name,best_vx,best_trainx,best_testx,best_r=Auto_paint_self.Auto_xgboost_chose(vy,vx,x_name=None,test_size=0.25,task_mode='regression',if_best_mode='no',chosemode='forward',default_learning_rate=0.05,default_max_depth=50,default_num_leaves=100,default_max_bin=256,boosting_type='dart',n_estimators=10000,subsample=0.7,metrics='default',ifmute='no',ifweight='yes',ifrandom_split='yes',device='cpu')
该函数用于xgboost型前向/后向回归挑选预报因子
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，其必须为一维的，只保留时间维度。
vx：必要参数，np.array类型。该参数代表预报因子的值，其必须为二维的，其中第一维为时间维度，与vy长度一致，第二维的长度和预报因子数量相同。vx由预报因子做空间平均后叠加，并且翻转第一维和第二维而成。
x_name：可选参数，np.array类型。该参数代表vx即各个预报因子的名称，用于模型输出结果时预报因子名称的输出，如果为None则自动赋值数字1到n，n为预报因子个数。默认值为None
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.25
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表所输入的参数（default_learning_rate，default_max_depth，default_num_leaves，default_max_bin）是否为最优，以及是否需要调优。在该模型中，使用贝叶斯调优。'no'代表输入参数不是最优，需要调优；'yes'输入参数为最优，不需要调优。默认值为'no'
chosemode：可选参数，字符串类型。该参数代表模型是使用前向回归还是后向回归。'forward'代表前项回归，'backward'代表后向回归。默认值为'forward'
default_learning_rate：可选参数，实型。代表初始的学习率，学习率代表每加入一棵树到模型中其占有权重的大小。跟树的数量有关，加入的树越多，学习率通常越低模型越优，而加入的树越少，通常学习率越高越优。默认值为0.5
default_max_depth：可选参数，整形。代表初始的最大树深度，最大树深度代表模型的树最多有多少层，过深的模型可能会导致过拟合，而过浅的模型可能会导致预测准确率低。默认值为50
default_num_leaves：可选参数，整形。代表初始的最大叶子节点数，最大叶子节点数代表每棵树最多有多少叶子节点，过多的叶子节点可能会导致过拟合，而过少的叶子节点可能会导致预测准确率低。默认值为100
default_max_bin：可选参数，整形。代表最大离散条柱数，最大离散条柱数过多可能会导致过拟合，最大离散条柱数过少可能会导致预测准确率低。默认值为256
boosting_type：可选参数，字符串类型。代表做梯度提升的模型算法，'gbtree'代表传统的梯度提升决策树。'dart'代表多个加法回归树。'gblinear'代表线型梯度提升。默认值为'dart'
n_estimators：可选参数，整形。代表模型中树的数量。越多的树意味着模型精度越高但是越浪费计算机计算时间，越少的树意味着越节约计算机计算资源但是模型精度越低。通常取1000-10000之间最好。默认值为10000
subsample：可选参数，实型。代表模型中每次训练采用的样本比率（拿来训练的样本数量/训练集中样本数量，不包括测试集数据）。通常在确定预报因子都与预报量有关的情况下，该值不能小于0.5，在0.7到1.0之间最为合适。默认值为0.7
metrics：可选参数，字符串类型。该参数代表模型所使用的评估标准。根据task_mode的不同而填写不同参数；当task_mode为'binary_classify'时，填写default或者f1代表使用f1指数作为评估标准，填写recall代表使用召回率作为评估标准，填写precision代表使用精确率作为评估标准；当task_mode为'regression'时填写default或者pearson代表使用相关系数作为评估标准，填写mse代表使用均方根误差作为评估标准；当task_mode为'multi_classify'时填写default或accuracy代表使用准确率作为评估标准。默认值为'default'
ifmute：可选参数，字符串类型。代表是否不打印调优次数以及是否打印每次加入/剔除模型的预报因子。默认值为'no'代表打印
ifweight：可选参数，字符串类型。该参数代表是否使用贡献率作为挑选预报因子的标准以及使用什么模型计算预报因子贡献，'yes'或者'shap'代表使用shp模型计算预报因子贡献，'PI'代表使用permutation_importance模型计算预报因子贡献，'no'代表不使用贡献率作为挑选预报因子的标准。默认值为'yes'
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
best_x_name：返回模型挑选的最好的预报因子名称
best_vx：返回模型挑选的最好的预报因子序列
best_trainx：返回模型挑选的最好的预报因子训练集序列
best_testx：返回模型挑选的最好的预报因子测试集序列
best_r：返回模型测试集中最优的预报因子组合所达到的最高的预测值与准确值的相关系数

2.54 best_x_name,best_vx,best_trainx,best_testx,best_r=Auto_paint_self.Auto_catboost_chose(vy,vx,x_name=None,test_size=0.25,task_mode='regression',if_best_mode='no',chosemode='forward',default_learning_rate=0.05,default_max_depth=8,default_num_leaves=100,default_min_child_samples=20,boosting_type='Plain',n_estimators=10000,subsample=1.0,metrics='default',ifmute='no',ifweight='yes',ifrandom_split='yes')
该函数用于catboost模型前向/后向回归挑选预报因子
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，其必须为一维的，只保留时间维度。
vx：必要参数，np.array类型。该参数代表预报因子的值，其必须为二维的，其中第一维为时间维度，与vy长度一致，第二维的长度和预报因子数量相同。vx由预报因子做空间平均后叠加，并且翻转第一维和第二维而成。
x_name：可选参数，np.array类型。该参数代表vx即各个预报因子的名称，用于模型输出结果时预报因子名称的输出，如果为None则自动赋值数字1到n，n为预报因子个数。默认值为None
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.25
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表所输入的参数（default_learning_rate，default_max_depth，default_num_leaves，default_min_child_samples）是否为最优，以及是否需要调优。在该模型中，使用贝叶斯调优。'no'代表输入参数不是最优，需要调优；'yes'输入参数为最优，不需要调优。默认值为'no'
chosemode：可选参数，字符串类型。该参数代表模型是使用前向回归还是后向回归。'forward'代表前项回归，'backward'代表后向回归。默认值为'forward'
default_learning_rate：可选参数，实型。代表初始的学习率，学习率代表每加入一棵树到模型中其占有权重的大小。跟树的数量有关，加入的树越多，学习率通常越低模型越优，而加入的树越少，通常学习率越高越优。默认值为0.5
default_max_depth：可选参数，整形。代表初始的最大树深度，最大树深度代表模型的树最多有多少层，过深的模型可能会导致过拟合，而过浅的模型可能会导致预测准确率低。在catboost中，depth深度最多为16。默认值为8
default_num_leaves：可选参数，整形。代表初始的最大叶子节点数，最大叶子节点数代表每棵树最多有多少叶子节点，过多的叶子节点可能会导致过拟合，而过少的叶子节点可能会导致预测准确率低。默认值为100
default_min_child_samples：可选参数，整形。代表初始的每个叶子节点上的最小样本数，每个叶子节点上的最小样本数代表每个叶子节点上最少有多少个样本，否则将该叶子节点剔除，将样本回归到父节点上。每个叶子节点上的最小样本数过少可能会导致过拟合，每个叶子节点上的最小样本数过多可能会导致预测准确率低。默认值为20
boosting_type：可选参数，字符串类型。代表做梯度提升的模型算法，'Ordered'通常在小型数据集上提供更好的质量，但可能比普通方案慢。'Plain'代表经典的渐变提升方案。默认值为'Plain'
n_estimators：可选参数，整形。代表模型中树的数量。越多的树意味着模型精度越高但是越浪费计算机计算时间，越少的树意味着越节约计算机计算资源但是模型精度越低。通常取1000-10000之间最好。默认值为10000
subsample：可选参数，实型。代表模型中每次训练采用的样本比率（拿来训练的样本数量/训练集中样本数量，不包括测试集数据）。通常在确定预报因子都与预报量有关的情况下，该值不能小于0.5，在0.7到1.0之间最为合适。默认值为0.7
metrics：可选参数，字符串类型。该参数代表模型所使用的评估标准。根据task_mode的不同而填写不同参数；当task_mode为'binary_classify'时，填写default或者f1代表使用f1指数作为评估标准，填写recall代表使用召回率作为评估标准，填写precision代表使用精确率作为评估标准；当task_mode为'regression'时填写default或者pearson代表使用相关系数作为评估标准，填写mse代表使用均方根误差作为评估标准；当task_mode为'multi_classify'时填写default或accuracy代表使用准确率作为评估标准。默认值为'default'
ifmute：可选参数，字符串类型。代表是否不打印调优次数以及是否打印每次加入/剔除模型的预报因子。默认值为'no'代表打印
ifweight：可选参数，字符串类型。该参数代表是否使用贡献率作为挑选预报因子的标准以及使用什么模型计算预报因子贡献，'yes'或者'shap'代表使用shp模型计算预报因子贡献，'PI'代表使用permutation_importance模型计算预报因子贡献，'no'代表不使用贡献率作为挑选预报因子的标准。默认值为'yes'
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
返回值：
best_x_name：返回模型挑选的最好的预报因子名称
best_vx：返回模型挑选的最好的预报因子序列
best_trainx：返回模型挑选的最好的预报因子训练集序列
best_testx：返回模型挑选的最好的预报因子测试集序列
best_r：返回模型测试集中最优的预报因子组合所达到的最高的预测值与准确值的相关系数

2.55 best_x_name,best_vx,best_trainx,best_testx,best_r=Auto_paint_self.Auto_adaboost_chose(vy,vx,x_name=None,test_size=0.25,task_mode='regression',if_best_mode='no',chosemode='forward',default_learning_rate=0.05,default_max_depth=50,default_num_leaves=100,default_min_child_samples=20,boosting_type='gbdt',n_estimators=10000,subsample=0.7,metrics='default',ifmute='no',ifweight='yes',ifrandom_split='yes')
该函数用于adaboost模型前向/后向回归挑选预报因子
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，其必须为一维的，只保留时间维度。
vx：必要参数，np.array类型。该参数代表预报因子的值，其必须为二维的，其中第一维为时间维度，与vy长度一致，第二维的长度和预报因子数量相同。vx由预报因子做空间平均后叠加，并且翻转第一维和第二维而成。
x_name：可选参数，np.array类型。该参数代表vx即各个预报因子的名称，用于模型输出结果时预报因子名称的输出，如果为None则自动赋值数字1到n，n为预报因子个数。默认值为None
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.25
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表所输入的参数（default_learning_rate，default_max_depth，default_num_leaves，default_min_child_samples）是否为最优，以及是否需要调优。在该模型中，使用贝叶斯调优。'no'代表输入参数不是最优，需要调优；'yes'输入参数为最优，不需要调优。默认值为'no'
chosemode：可选参数，字符串类型。该参数代表模型是使用前向回归还是后向回归。'forward'代表前项回归，'backward'代表后向回归。默认值为'forward'
default_learning_rate：可选参数，实型。代表初始的学习率，学习率代表每加入一棵树到模型中其占有权重的大小。跟树的数量有关，加入的树越多，学习率通常越低模型越优，而加入的树越少，通常学习率越高越优。默认值为0.5
default_max_depth：可选参数，整形。代表初始的最大树深度，最大树深度代表模型的树最多有多少层，过深的模型可能会导致过拟合，而过浅的模型可能会导致预测准确率低。默认值为50
default_num_leaves：可选参数，整形。代表初始的最大叶子节点数，最大叶子节点数代表每棵树最多有多少叶子节点，过多的叶子节点可能会导致过拟合，而过少的叶子节点可能会导致预测准确率低。默认值为100
default_min_child_samples：可选参数，整形。代表初始的每个叶子节点上的最小样本数，每个叶子节点上的最小样本数代表每个叶子节点上最少有多少个样本，否则将该叶子节点剔除，将样本回归到父节点上。每个叶子节点上的最小样本数过少可能会导致过拟合，每个叶子节点上的最小样本数过多可能会导致预测准确率低。默认值为20值为'gbdt'
n_estimators：可选参数，整形。代表模型中树的数量。越多的树意味着模型精度越高但是越浪费计算机计算时间，越少的树意味着越节约计算机计算资源但是模型精度越低。通常取1000-10000之间最好。默认值为10000
subsample：可选参数，实型。代表模型中每次训练采用的样本比率（拿来训练的样本数量/训练集中样本数量，不包括测试集数据）。通常在确定预报因子都与预报量有关的情况下，该值不能小于0.5，在0.7到1.0之间最为合适。默认值为0.7
metrics：可选参数，字符串类型。该参数代表模型所使用的评估标准。根据task_mode的不同而填写不同参数；当task_mode为'binary_classify'时，填写default或者f1代表使用f1指数作为评估标准，填写recall代表使用召回率作为评估标准，填写precision代表使用精确率作为评估标准；当task_mode为'regression'时填写default或者pearson代表使用相关系数作为评估标准，填写mse代表使用均方根误差作为评估标准；当task_mode为'multi_classify'时填写default或accuracy代表使用准确率作为评估标准。默认值为'default'
ifmute：可选参数，字符串类型。代表是否不打印调优次数以及是否打印每次加入/剔除模型的预报因子。默认值为'no'代表打印
ifweight：可选参数，字符串类型。该参数代表是否使用贡献率作为挑选预报因子的标准以及使用什么模型计算预报因子贡献，'yes'或者'shap'代表使用shp模型计算预报因子贡献，'PI'代表使用permutation_importance模型计算预报因子贡献，'no'代表不使用贡献率作为挑选预报因子的标准。默认值为'yes'
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
返回值：
best_x_name：返回模型挑选的最好的预报因子名称
best_vx：返回模型挑选的最好的预报因子序列
best_trainx：返回模型挑选的最好的预报因子训练集序列
best_testx：返回模型挑选的最好的预报因子测试集序列
best_r：返回模型测试集中最优的预报因子组合所达到的最高的预测值与准确值的相关系数

2.56 best_x_name,best_vx,best_trainx,best_testx,best_r=Auto_paint_self.Auto_RandomForest_chose(vy,vx,x_name=None,test_size=0.25,task_mode='regression',if_best_mode='no',chosemode='forward',default_max_depth=50,default_num_leaves=100,default_min_child_samples=20,n_estimators=10000,subsample=0.7,metrics='default',ifmute='no',ifweight='yes',ifrandom_split='yes')
该函数用于RandomForest模型前向/后向回归挑选预报因子
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，其必须为一维的，只保留时间维度。
vx：必要参数，np.array类型。该参数代表预报因子的值，其必须为二维的，其中第一维为时间维度，与vy长度一致，第二维的长度和预报因子数量相同。vx由预报因子做空间平均后叠加，并且翻转第一维和第二维而成。
x_name：可选参数，np.array类型。该参数代表vx即各个预报因子的名称，用于模型输出结果时预报因子名称的输出，如果为None则自动赋值数字1到n，n为预报因子个数。默认值为None
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.25
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表所输入的参数（default_max_depth，default_num_leaves，default_min_child_samples）是否为最优，以及是否需要调优。在该模型中，使用贝叶斯调优。'no'代表输入参数不是最优，需要调优；'yes'输入参数为最优，不需要调优。默认值为'no'
chosemode：可选参数，字符串类型。该参数代表模型是使用前向回归还是后向回归。'forward'代表前项回归，'backward'代表后向回归。默认值为'forward'
default_max_depth：可选参数，整形。代表初始的最大树深度，最大树深度代表模型的树最多有多少层，过深的模型可能会导致过拟合，而过浅的模型可能会导致预测准确率低。默认值为50
default_num_leaves：可选参数，整形。代表初始的最大叶子节点数，最大叶子节点数代表每棵树最多有多少叶子节点，过多的叶子节点可能会导致过拟合，而过少的叶子节点可能会导致预测准确率低。默认值为100
default_min_child_samples：可选参数，整形。代表初始的每个叶子节点上的最小样本数，每个叶子节点上的最小样本数代表每个叶子节点上最少有多少个样本，否则将该叶子节点剔除，将样本回归到父节点上。每个叶子节点上的最小样本数过少可能会导致过拟合，每个叶子节点上的最小样本数过多可能会导致预测准确率低。默认值为20
n_estimators：可选参数，整形。代表模型中树的数量。越多的树意味着模型精度越高但是越浪费计算机计算时间，越少的树意味着越节约计算机计算资源但是模型精度越低。通常取1000-10000之间最好。默认值为10000
subsample：可选参数，实型。代表模型中每次训练采用的样本比率（拿来训练的样本数量/训练集中样本数量，不包括测试集数据）。通常在确定预报因子都与预报量有关的情况下，该值不能小于0.5，在0.7到1.0之间最为合适。默认值为0.7
metrics：可选参数，字符串类型。该参数代表模型所使用的评估标准。根据task_mode的不同而填写不同参数；当task_mode为'binary_classify'时，填写default或者f1代表使用f1指数作为评估标准，填写recall代表使用召回率作为评估标准，填写precision代表使用精确率作为评估标准；当task_mode为'regression'时填写default或者pearson代表使用相关系数作为评估标准，填写mse代表使用均方根误差作为评估标准；当task_mode为'multi_classify'时填写default或accuracy代表使用准确率作为评估标准。默认值为'default'
ifmute：可选参数，字符串类型。代表是否不打印调优次数以及是否打印每次加入/剔除模型的预报因子。默认值为'no'代表打印
ifweight：可选参数，字符串类型。该参数代表是否使用贡献率作为挑选预报因子的标准以及使用什么模型计算预报因子贡献，'yes'或者'shap'代表使用shp模型计算预报因子贡献，'PI'代表使用permutation_importance模型计算预报因子贡献，'no'代表不使用贡献率作为挑选预报因子的标准。默认值为'yes'
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
返回值：
best_x_name：返回模型挑选的最好的预报因子名称
best_vx：返回模型挑选的最好的预报因子序列
best_trainx：返回模型挑选的最好的预报因子训练集序列
best_testx：返回模型挑选的最好的预报因子测试集序列
best_r：返回模型测试集中最优的预报因子组合所达到的最高的预测值与准确值的相关系数

2.57 best_x_name,best_vx,best_trainx,best_testx,best_r=Auto_paint_self.Auto_LSTMorGRUorRNN_chose(vy,vx,timestep,model_list,x_name=None,test_size=0.25,task_mode='regression',chosemode='forward',units=64,dropout=0.0,recurrent_dropout=0.0,activation='tanh',recurrent_activation='sigmoid',if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifmute='no',ifrandom_split='yes',device='cpu')
该函数用于LSTM/GRU/RNN网络前向/后向回归挑选预报因子(该函数目前已经被废除)
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，其必须为一维的，只保留时间维度。
vx：必要参数，np.array类型。该参数代表预报因子的值，其必须为二维的，其中第一维为时间维度，与vy长度一致，第二维的长度和预报因子数量相同。vx由预报因子做空间平均后叠加，并且翻转第一维和第二维而成。
timestep：必要参数，整形。该参数代表预测vy所用到的vx提前时段，例如填写7代表用提前1-7个时次的vx预测vy。
model_list：必要参数，tumple类型。该参数代表构建的时间卷积网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['lstm']代表插入LSTM层；['gru']代表插入GRU层；['rnn']代表插入RNN层；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
x_name：可选参数，np.array类型。该参数代表vx即各个预报因子的名称，用于模型输出结果时预报因子名称的输出，如果为None则自动赋值数字1到n，n为预报因子个数。默认值为None
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.25
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
chosemode：可选参数，字符串类型。该参数代表模型是使用前向回归还是后向回归。'forward'代表前项回归，'backward'代表后向回归。默认值为'forward'
units：可选参数，整形。该参数代表网络的内部循环的神经元个数。默认值为64
dropout：可选参数，实型。该参数代表网络外部循环的数据丢弃值，例如0.1代表丢弃百分之10的数据用于防止过拟合。默认值为0.0
recurrent_dropout：可选参数，实型。该参数代表网络内部循环的数据丢弃值，例如0.1代表丢弃百分之10的数据用于防止过拟合。默认值为0.0
activation：可选参数，字符串类型。该参数用于代表网络外部循环所使用的激活函数。默认值为'tanh'
recurrent_activation：可选参数，字符串类型。该参数用于代表网络内部循环所使用的激活函数。默认值为'sigmoid'
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifmute：可选参数，字符串类型。代表是否不打印调优次数以及是否打印每次加入/剔除模型的预报因子。默认值为'no'代表打印
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
best_x_name：返回模型挑选的最好的预报因子名称
best_vx：返回模型挑选的最好的预报因子序列
best_trainx：返回模型挑选的最好的预报因子训练集序列
best_testx：返回模型挑选的最好的预报因子测试集序列
best_r：返回模型测试集中最优的预报因子组合所达到的最高的预测值与准确值的相关系数

2.58 best_x_name,best_vx,best_trainx,best_testx,best_r=Auto_paint_self.Auto_TCN_chose(vy,vx,timestep,model_list,dilations,x_name=None,test_size=0.25,task_mode='regression',chosemode='forward',nb_filters=64,kernel_size=2,nb_stacks=1,padding='causal',dropout_rate=0.0,activation='tanh',kernel_initializer='he_normal',if_use_batch_norm=False,if_use_layer_norm=False,if_use_weight_norm=False,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifmute='no',ifrandom_split='yes',device='cpu')
该函数用于TCN网络前向/后向回归挑选预报因子(该函数目前已经被废除)

输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，其必须为一维的，只保留时间维度。
vx：必要参数，np.array类型。该参数代表预报因子的值，其必须为二维的，其中第一维为时间维度，与vy长度一致，第二维的长度和预报因子数量相同。vx由预报因子做空间平均后叠加，并且翻转第一维和第二维而成。
timestep：必要参数，整形。该参数代表预测vy所用到的vx提前时段，例如填写7代表用提前1-7个时次的vx预测vy。
model_list：必要参数，tumple类型。该参数代表构建的时间卷积网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['tcn']代表插入时间卷积层；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
dilations：必要参数，tumple类型。该参数代表扩张系数元组。通常按照固定的膨胀基数递增，例如[1,2,4,8,16,32]代表构建6层深度的tcn网络，每向上一层扩张系数增加2倍。
x_name：可选参数，np.array类型。该参数代表vx即各个预报因子的名称，用于模型输出结果时预报因子名称的输出，如果为None则自动赋值数字1到n，n为预报因子个数。默认值为None
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.25
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
chosemode：可选参数，字符串类型。该参数代表模型是使用前向回归还是后向回归。'forward'代表前项回归，'backward'代表后向回归。默认值为'forward'
nb_filters：可选参数，整形。该参数代表tcn网络的神经元个数，默认值为64
kernel_size：可选参数，整形。该参数代表tcn网络的卷积核大小，默认值为2
nb_stacks：可选参数，整形。该参数代表tcn网络的残差块堆叠数，默认值为1
padding：可选参数，字符串类型。该参数代表tcn网络是因果卷积还是非因果卷积，'causal'代表因果卷积，因果卷积代表不能够用未来预测现在；'same'或者'valid'代表非因果卷积，非因果卷代表可以用未来预测现在。默认值为'causal'
dropout_rate：可选参数，实型。该参数代表tcn随机丢弃数据/网络节点的比率，用于防止过拟合。默认值为0.0
activation：可选参数，字符串类型。该参数代表tcn网络使用的激活函数类型，更多可选项详情见tcn github官网。默认值为'tanh'
kernel_initializer：可选参数，字符串类型。该参数代表权重矩阵初始化方案，更多可选项详情见tcn github官网。默认值为'he_normal'
if_use_batch_norm：可选参数，布尔值类型。该参数代表是否在tcn中使用batchnormalization，True使用，False不使用。默认值为False
if_use_layer_norm：可选参数，布尔值类型。该参数代表是否在tcn中使用layernormalization，True使用，False不使用。默认值为False
if_use_weight_norm：可选参数，布尔值类型。该参数代表是否在tcn中使用weightnormalization，True使用，False不使用。默认值为False
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifmute：可选参数，字符串类型。代表是否不打印调优次数以及是否打印每次加入/剔除模型的预报因子。默认值为'no'代表打印
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
best_x_name：返回模型挑选的最好的预报因子名称
best_vx：返回模型挑选的最好的预报因子序列
best_trainx：返回模型挑选的最好的预报因子训练集序列
best_testx：返回模型挑选的最好的预报因子测试集序列
best_r：返回模型测试集中最优的预报因子组合所达到的最高的预测值与准确值的相关系数

2.59 best_x_name,best_vx,best_trainx,best_testx,best_r=Auto_paint_self.Auto_CNN_chose(vy,vx,model_list,x_name=None,test_size=0.25,task_mode='regression',chosemode='forward',ifrandom_split='yes',cov_padding='same',cov_strides=1,pooling_padding='valid',pooling_strides=2,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifweight='yes',ifmute='no',device='cpu')
该函数用于CNN网络前向/后向回归挑选预报因子(该函数目前已经被废除)

输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
timestep：必要参数，整形。该参数代表预测vy所用到的vx提前时段，例如填写7代表用提前1-7个时次的vx预测vy。
model_list：必要参数，tumple类型。该参数代表构建的神经网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['localcov',[64,3,3]]代表插入权重参数不共享的卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
x_name：可选参数，np.array类型。该参数代表vx即各个预报因子的名称，用于模型输出结果时预报因子名称的输出，如果为None则自动赋值数字1到n，n为预报因子个数。默认值为None
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.25
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
chosemode：可选参数，字符串类型。该参数代表模型是使用前向回归还是后向回归。'forward'代表前项回归，'backward'代表后向回归。默认值为'forward'
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
pooling_padding：可选参数，该参数代表池化层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'valid'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率。默认值为'yes'代表计算
ifmute：可选参数，字符串类型。代表是否不打印调优次数以及是否打印每次加入/剔除模型的预报因子。默认值为'no'代表打印
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
best_x_name：返回模型挑选的最好的预报因子名称
best_vx：返回模型挑选的最好的预报因子序列
best_trainx：返回模型挑选的最好的预报因子训练集序列
best_testx：返回模型挑选的最好的预报因子测试集序列
best_r：返回模型测试集中最优的预报因子组合所达到的最高的预测值与准确值的相关系数

2.60 best_x_name,best_vx,best_trainx,best_testx,best_r=Auto_paint_self.Auto_Unet_chose(vy,vx,downnum,covnum,x_name=None,test_size=0.25,task_mode='regression',chosemode='forward',ifrandom_split='yes',baselayer=64,cov_method='cov',cov_kernelsize=3,cov_strides=1,pool_method='maxpooling',pool_kernel_size=2,pool_strides=2,ifnormalization='no',normalization_method=None,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,activate='tanh',if_last_act='no',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于Unet网络前向/后向回归挑选预报因子(该函数目前已经被废除)
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是三维的。其前三个维度分别对应（时间，纬度，经度）
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。
downnum：必要参数，整形。该参数代表Unet网络的深度。下采样/上采样次数为网络深度-1。当数据的纬度和经度比较小时，网络深度不要过深，否则可能导致下层的下采样使得输入数据经度/纬度长度小于0
covnum：必要参数，整形。该参数代表每层网络要进行多少次卷积。卷积不会导致输入值和输出值在时间/经度/纬度上缺失（默认做补全操作）
x_name：可选参数，np.array类型。该参数代表vx即各个预报因子的名称，用于模型输出结果时预报因子名称的输出，如果为None则自动赋值数字1到n，n为预报因子个数。默认值为None
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.25
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
chosemode：可选参数，字符串类型。该参数代表模型是使用前向回归还是后向回归。'forward'代表前项回归，'backward'代表后向回归。默认值为'forward'
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
baselayer：可选参数，整形。该参数代表起始卷积核个数，每做一次下采样，卷积核个数都会增加一倍。默认值为64
cov_method：可选参数，字符串类型。该参数代表卷积的类型，'cov'代表做Conv2D卷积，而'localcov'代表做LocallyConv2D卷积。注意，LocallyConv2D卷积代表卷积核不共享，将会导致过大的内存占用。默认值为'cov'
cov_kernelsize：可选参数，整形。该参数代表卷积核大小。默认值为3
cov_strides：可选参数，整形。该参数代表卷积层的步长。默认值为1
pool_method：可选参数，字符串类型。该参数代表池化方法，'maxpoolng'代表做最大值池化,'avepooling'代表做平均池化。默认值为'maxpooling'
poolkernelsize：可选参数，整形。该参数代表池化核大小。默认值为2
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
ifnormalization：可选参数，字符串类型。该参数代表是否做归一化操作，'yes'代表做，'no'代表不做。默认值为'no'
normalization_method：可选参数，字符串类型。该参数代表做归一化操作的方法，只有在ifnormalization为'yes'时才会生效。填写'batchnormalization'代表做全局归一化，填写'LayerNormalization'代表做层归一化。默认值为None
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
activate：可选参数，字符串类型。该参数代表卷积使用的激活函数。默认值为'tanh'
if_last_act：可选参数，字符串类型。该参数代表最后一层卷积后，是否使用激活函数。通常回归任务最后一层不使用激活函数，分类任务最后一层使用；填写'no'表示最后一层不使用激活函数，填写激活函数名称代表使用激活函数。默认值为'no'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifmute：可选参数，字符串类型。代表是否不打印调优次数以及是否打印每次加入/剔除模型的预报因子。默认值为'no'代表打印
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
best_x_name：返回模型挑选的最好的预报因子名称
best_vx：返回模型挑选的最好的预报因子序列
best_trainx：返回模型挑选的最好的预报因子训练集序列
best_testx：返回模型挑选的最好的预报因子测试集序列
best_r：返回模型测试集中最优的预报因子组合所达到的最高的预测值与准确值的相关系数

2.61 model,predicty,testy,r,p,heatmap,weights=Auto_paint_self.Auto_CNN_LSTMorGRUorRNN(vy,vx,timestep,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,cov_padding='same',cov_strides=1,pooling_padding='valid',pooling_strides=2,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,units=64,dropout=0.0,recurrent_dropout=0.0,activation='tanh',recurrent_activation='sigmoid',if_print_model='yes',loss_function='default',if_print_model='yes',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifmute='no',ifrandom_split='yes',ifheatmap='yes',ifweight='yes',ifsave='no',savepath=None,device='cpu')
该函数用于融合CNN和LSTM/GRU/RNN网络
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['localcov',[64,3,3]]代表插入权重参数不共享的卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['lstm']代表插入LSTM层；['gru']代表插入GRU层；['rnn']代表插入RNN层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
pooling_padding：可选参数，该参数代表池化层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'valid'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
units：可选参数，整形。该参数代表网络的内部循环的神经元个数。默认值为64
dropout：可选参数，实型。该参数代表网络外部循环的数据丢弃值，例如0.1代表丢弃百分之10的数据用于防止过拟合。默认值为0.0
recurrent_dropout：可选参数，实型。该参数代表网络内部循环的数据丢弃值，例如0.1代表丢弃百分之10的数据用于防止过拟合。默认值为0.0
activation：可选参数，字符串类型。该参数用于代表网络外部循环所使用的激活函数。默认值为'tanh'
recurrent_activation：可选参数，字符串类型。该参数用于代表网络内部循环所使用的激活函数。默认值为'sigmoid'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifheatmap：可选参数，字符串类型。该参数代表是否要返回贡献率图heatmap，'yes'代表返回，填写其他值代表不返回（返回结果为None）。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'或者'shap'代表使用shap库计算贡献率，填写'oob'代表使用oob方法计算贡献率，填写'no'代表不计算贡献率。默认值为'yes'代表使用shap方法计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
heatmap：返回贡献图heatmap，仅在ifheatmap为'yes'时有值，否则为None
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.62 model,predicty,testy,r,p,heatmap,weights=Auto_paint_self.Auto_CNN_TCN(vy,vx,timestep,model_list,dilations,test_size=0.2,valid_size=0.1,k_fold=None,,task_mode='regression',if_best_mode='no',modelpath=None,cov_padding='same',cov_strides=1,pooling_padding='valid',pooling_strides=2,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,nb_filters=64,kernel_size=2,nb_stacks=1,padding='causal',dropout_rate=0.0,activation='tanh',kernel_initializer='he_normal',if_use_batch_norm=False,if_use_layer_norm=False,if_use_weight_norm=False,if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifrandom_split='yes',ifheatmap='yes',ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于融合CNN和TCN网络
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['localcov',[64,3,3]]代表插入权重参数不共享的卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['tcn']代表插入时间卷积网络层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
dilations：必要参数，tumple类型。该参数代表扩张系数元组。通常按照固定的膨胀基数递增，例如[1,2,4,8,16,32]代表构建6层深度的tcn网络，每向上一层扩张系数增加2倍。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
pooling_padding：可选参数，该参数代表池化层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'valid'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
nb_filters：可选参数，整形。该参数代表tcn网络的神经元个数，默认值为64
kernel_size：可选参数，整形。该参数代表tcn网络的卷积核大小，默认值为2
nb_stacks：可选参数，整形。该参数代表tcn网络的残差块堆叠数，默认值为1
padding：可选参数，字符串类型。该参数代表tcn网络是因果卷积还是非因果卷积，'causal'代表因果卷积，因果卷积代表不能够用未来预测现在；'same'或者'valid'代表非因果卷积，非因果卷代表可以用未来预测现在。默认值为'causal'
dropout_rate：可选参数，实型。该参数代表tcn随机丢弃数据/网络节点的比率，用于防止过拟合。默认值为0.0
activation：可选参数，字符串类型。该参数代表tcn网络使用的激活函数类型，更多可选项详情见tcn github官网。默认值为'tanh'
kernel_initializer：可选参数，字符串类型。该参数代表权重矩阵初始化方案，更多可选项详情见tcn github官网。默认值为'he_normal'
if_use_batch_norm：可选参数，布尔值类型。该参数代表是否在tcn中使用batchnormalization，True使用，False不使用。默认值为False
if_use_layer_norm：可选参数，布尔值类型。该参数代表是否在tcn中使用layernormalization，True使用，False不使用。默认值为False
if_use_weight_norm：可选参数，布尔值类型。该参数代表是否在tcn中使用weightnormalization，True使用，False不使用。默认值为False
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifheatmap：可选参数，字符串类型。该参数代表是否要返回贡献率图heatmap，'yes'代表返回，填写其他值代表不返回（返回结果为None）。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'或者'shap'代表使用shap库计算贡献率，填写'oob'代表使用oob方法计算贡献率，填写'no'代表不计算贡献率。默认值为'yes'代表使用shap方法计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
heatmap：返回贡献图heatmap，仅在ifheatmap为'yes'时有值，否则为None
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.63 model,predicty,testy,r,p=Auto_paint_self.Auto_more_lassoregress(vx,vy,test_size=0.25,max_iter=2000,alpha=1.0,ifweight='yes',ifrandom_split='yes')
该函数用于做Lasso回归
输入值：
vx：必要参数,np.array类型或xr.Dataarray类型。该参数代表需要做Lasso回归的所有预报因子，要求是二维的，第一个维度是时间维，第二个维度代表预报因子个数。
vy：必要参数，np.array类型或xr.Dataarray类型。该参数代表需要做Lasso回归的预报值，要求是一维的，即时间维。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.25
max_iter：可选参数，整形。该参数代表模型迭代次数。默认值为2000
alpha：可选参数，实型。该参数代表模型使用的L1正则化的系数。默认值为1.0
ifweight：可选参数，字符串类型。该参数代表是否要输出每个预报因子对于预报值的预报贡献，'yes'代表输出，'no'代表不输出。默认值为'yes'
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
返回值：
model：返回训练好的模型model
predicty：返回测试集预测值y'
testy：返回测试集真实值vy
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。

2.64 model,predicty,testy,r,p=Auto_paint_self.Auto_more_ridgeregress(vx,vy,test_size=0.25,max_iter=2000,alpha=1.0,solver='auto',ifweight='yes',ifrandom_split='yes')
该函数用于做岭回归
输入值：
vx：必要参数,np.array类型或xr.Dataarray类型。该参数代表需要做岭回归的所有预报因子，要求是二维的，第一个维度是时间维，第二个维度代表预报因子个数。
vy：必要参数，np.array类型或xr.Dataarray类型。该参数代表需要做岭回归的预报值，要求是一维的，即时间维。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.25
max_iter：可选参数，整形。该参数代表模型迭代次数。默认值为2000
alpha：可选参数，实型。该参数代表模型使用的L2正则化的系数。默认值为1.0
solver：可选参数，字符串类型。该参数代表模型使用的求解器，'svd'代表使用奇异值分解来计算岭回归系数，'cholesky'代表使用scipy的linalg.solver来求解，'sparse_cg'代表使用scipy的工鞥梯度求解器（适合大规模数据），'lsqr'代表使用正则化最小二乘法即scipy中的lsqr求解器（求解最快），'sag'代表使用随机平均梯度下降求解器，'lbfgs'代表使用L-BFGS-B算法求解，'auto'代表根据数据自动选择求解器。默认值为'auto'
ifweight：可选参数，字符串类型。该参数代表是否要输出每个预报因子对于预报值的预报贡献，'yes'代表输出，'no'代表不输出。默认值为'yes'
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
返回值：
model：返回训练好的模型model
predicty：返回测试集预测值y'
testy：返回测试集真实值vy
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。

2.65 model,predicty,testy,r,p=Auto_paint_self.Auto_more_gaussianprocessregressor(vx,vy,test_size=0.25,kernel=None,alpha=10**-10,optimizer='fmin_l_bfgs_b',n_restarts_optimizer=2000,ifweight='yes',ifrandom_split='yes')
该函数用于做高斯过程回归
输入值：
vx：必要参数,np.array类型或xr.Dataarray类型。该参数代表需要做高斯过程回归的所有预报因子，要求是二维的，第一个维度是时间维，第二个维度代表预报因子个数。
vy：必要参数，np.array类型或xr.Dataarray类型。该参数代表需要做高斯过程回归的预报值，要求是一维的，即时间维。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.25
kernel：可选参数，指定高斯过程的协方差函数的内核，更多内核可见sklearn官网。默认值为None。
alpha：可选参数，实型。该参数代表模型为训练观测值上附加高斯测量噪声的方差。默认值为10**-10
optimizer：可选参数，字符串类型。代表用于优化内核参数的优化器，更多优化器请见https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.html?highlight=gaussianprocessregressor#sklearn.gaussian_process.GaussianProcessRegressor。默认值为'fmin_l_bfgs_b'
n_restarts_optimizer：可选参数，整形。该参数代表模型迭代次数。默认值为2000
ifweight：可选参数，字符串类型。该参数代表是否要输出每个预报因子对于预报值的预报贡献，'yes'代表输出，'no'代表不输出。默认值为'yes'
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
返回值：
model：返回训练好的模型model
predicty：返回测试集预测值y'
testy：返回测试集真实值vy
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。

2.66 model,predicty,testy,r,p=Auto_paint_self.Auto_SVM(vx,vy,test_size=0.25,task_mode='regression',ifrandom_split='yes',if_best_mode='no',modelpath=None,svr_kernel='rbf',default_gamma=1.0,default_degree=3,default_C=1.0,max_iter=2000,metrics='default',ifmute='no',ifweight='yes',ifsave='no',savepath=None)
该函数用于支持向量机
输入值：
vx：必要参数,np.array类型或xr.Dataarray类型。该参数代表需要做支持向量机回归的所有预报因子，要求是二维的，第一个维度是时间维，第二个维度代表预报因子个数。
vy：必要参数，np.array类型或xr.Dataarray类型。该参数代表需要做支持向量机回归的预报值，要求是一维的，即时间维。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.25
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
if_best_mode：可选参数，字符串类型。该参数代表所输入的参数（svr_kernel，default_gamma，default_degree，default_c）是否为最优，以及是否需要调优。'no'代表输入参数不是最优，需要调优；'yes'输入参数为最优，不需要调优；'load'代表从指定路径载入训练好的模型。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
svr_kernel：可选参数，字符串类型。该参数代表svr使用的核函数，可用的核函数有'rbf'代表高斯核函数，'poly'代表多项式核函数，'sigmoid'代表sigmoid核函数。默认值为'rbf'
default_gamma：可选参数，实型。代表核系数值。默认值为1.0
default_degree：可选参数，整形。代表在svr_kernel为'poly'时，多项式的次数。默认值为3即3次
default_C：可选参数，实型。代表正则化惩罚项的系数，SVR采用L2正则化。默认值为1.0
max_iter：可选参数，整形。该参数代表模型最大迭代次数。默认值为2000
metrics：可选参数，字符串类型。该参数代表模型所使用的评估标准。根据task_mode的不同而填写不同参数；当task_mode为'binary_classify'时，填写default或者f1代表使用f1指数作为评估标准，填写recall代表使用召回率作为评估标准，填写precision代表使用精确率作为评估标准；当task_mode为'regression'时填写default或者pearson代表使用相关系数作为评估标准，填写mse代表使用均方根误差作为评估标准；当task_mode为'multi_classify'时填写default或accuracy代表使用准确率作为评估标准。默认值为'default'
ifmute：可选参数，字符串类型。代表是否打印调优的最优参数和最优TCC。默认值为'no'代表打印
ifweight：可选参数，字符串类型。该参数代表是否要输出每个预报因子对于预报值的预报贡献，'yes'代表输出，'no'代表不输出。默认值为'yes'
返回值：
model：返回训练好的模型model
predicty：返回测试集预测值y'
testy：返回测试集真实值vy
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。

2.67 model,predicty,testy,r,p=Auto_paint_self.Auto_SVM_Bayesian_Optimization(vx,vy,test_size=0.25,task_mode='regression',ifrandom_split='yes',svr_kernel='rbf',gamma_range=[0.01,10.0],degree_range=[1.0,10.0],C_range=[0.01,10.0],max_iter=10000,subsample=0.7,init_points=10,n_iter=0,metrics='default',ifmute='no')
该函数用于SVM的贝叶斯调优
输入值：
vx：必要参数，np.array类型。该参数代表预报因子的值，其必须为二维的，其中第一维为时间维度，与vy长度一致，第二维的长度和预报因子数量相同。vx由预报因子做空间平均后叠加，并且翻转第一维和第二维而成。
vy：必要参数，np.array类型。该参数代表预报量的真实值，其必须为一维的，只保留时间维度。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.25
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
svr_kernel：可选参数，字符串类型。该参数代表svr使用的核函数，可用的核函数有'rbf'代表高斯核函数，'poly'代表多项式核函数，'sigmoid'代表sigmoid核函数。默认值为'rbf'
gamma_range：可选参数，tumple类型。该参数代表贝叶斯调优的gamma范围。默认值为[0.01,10.0]代表gamma控制在0.01到10.0之间
poly_range：可选参数，tumple类型。该参数代表贝叶斯调优的多项式次数范围。默认值为[1.0,10.0]代表多项式次数控制在1到10之间
C_range：可选参数，tumple类型。该参数代表贝叶斯调优的正则化参数范围。默认值为[0.01,10.0]代表正则化参数控制在0.01到10.0之间
max_iter：可选参数，整形。该参数代表模型最大迭代次数。默认值为2000
init_points：可选参数，整形。该参数代表贝叶斯调优的随机调优次数。默认值为10
n_iter：可选参数，整形。该参数代表贝叶斯调优的深度调优次数。默认值为0
metrics：可选参数，字符串类型。该参数代表模型所使用的评估标准。根据task_mode的不同而填写不同参数；当task_mode为'binary_classify'时，填写default或者f1代表使用f1指数作为评估标准，填写recall代表使用召回率作为评估标准，填写precision代表使用精确率作为评估标准；当task_mode为'regression'时填写default或者pearson代表使用相关系数作为评估标准，填写mse代表使用均方根误差作为评估标准；当task_mode为'multi_classify'时填写default或accuracy代表使用准确率作为评估标准。默认值为'default'
ifmute：可选参数，字符串类型。代表是否打印调优的最优参数和最优TCC。默认值为'no'代表打印
返回值：
best_learning_rate：返回贝叶斯调优的最优学习率
best_max_depth：返回贝叶斯调优的最优最大树深度
best_num_leaves：返回贝叶斯调优的最优最大叶子节点数
best_min_child_samples：返回贝叶斯调优的最优最小叶子节点样本数
best_r：返回贝叶斯调优的最优结果r

2.68 best_x_name,best_vx,best_trainx,best_testx,best_r=Auto_paint_self.Auto_SVM_chose(vy,vx,x_name=None,test_size=0.25,task_mode='regression',if_best_mode='no',chosemode='forward',svr_kernel='rbf',default_gamma=1.0,default_degree=3.0,default_C=1.0,max_iter=2000,metrics='default',ifmute='no',ifweight='yes',ifrandom_split='yes')
该函数用于SVM模型前向/后向回归挑选预报因子
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，其必须为一维的，只保留时间维度。
vx：必要参数，np.array类型。该参数代表预报因子的值，其必须为二维的，其中第一维为时间维度，与vy长度一致，第二维的长度和预报因子数量相同。vx由预报因子做空间平均后叠加，并且翻转第一维和第二维而成。
x_name：可选参数，np.array类型。该参数代表vx即各个预报因子的名称，用于模型输出结果时预报因子名称的输出，如果为None则自动赋值数字1到n，n为预报因子个数。默认值为None
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.25
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表所输入的参数（default_gamma，default_degree，default_C）是否为最优，以及是否需要调优。在该模型中，使用贝叶斯调优。'no'代表输入参数不是最优，需要调优；'yes'输入参数为最优，不需要调优。默认值为'no'
chosemode：可选参数，字符串类型。该参数代表模型是使用前向回归还是后向回归。'forward'代表前项回归，'backward'代表后向回归。默认值为'forward'
default_gamma：可选参数，实型。代表核系数值。默认值为1.0
default_degree：可选参数，整形。代表在svr_kernel为'poly'时，多项式的次数。默认值为3即3次
default_C：可选参数，实型。代表正则化惩罚项的系数，SVR采用L2正则化。默认值为1.0
max_iter：可选参数，整形。该参数代表模型最大迭代次数。默认值为2000
metrics：可选参数，字符串类型。该参数代表模型所使用的评估标准。根据task_mode的不同而填写不同参数；当task_mode为'binary_classify'时，填写default或者f1代表使用f1指数作为评估标准，填写recall代表使用召回率作为评估标准，填写precision代表使用精确率作为评估标准；当task_mode为'regression'时填写default或者pearson代表使用相关系数作为评估标准，填写mse代表使用均方根误差作为评估标准；当task_mode为'multi_classify'时填写default或accuracy代表使用准确率作为评估标准。默认值为'default'
ifmute：可选参数，字符串类型。代表是否不打印调优次数以及是否打印每次加入/剔除模型的预报因子。默认值为'no'代表打印
ifweight：可选参数，字符串类型。该参数代表是否使用贡献率作为挑选预报因子的标准，'yes'代表是，'no'代表否。默认值为'yes'
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
返回值：
best_x_name：返回模型挑选的最好的预报因子名称
best_vx：返回模型挑选的最好的预报因子序列
best_trainx：返回模型挑选的最好的预报因子训练集序列
best_testx：返回模型挑选的最好的预报因子测试集序列
best_r：返回模型测试集中最优的预报因子组合所达到的最高的预测值与准确值的相关系数

2.69 x_new,y_new=Auto_paint_self.Auto_imageline_to_data(filename,min_x,max_x,min_y,max_y,x_num,chose_range)
该函数用于提取图片中的曲线数据
输入值：
filename：必要参数，字符串类型。该参数代表图片的路径及名称。
min_x：必要参数，实型。该参数代表x轴的最小值。
max_x：必要参数，实型。该参数代表x轴的最大值。
min_y：必要参数，实型。该参数代表数据的最小值。
max_y：必要参数，实型。该参数代表数据的最大值。
x_num：必要参数，实型。该参数代表数据的长度。
chose_range：必要参数，实型。该参数代表生成最终数据生成每个数据点所用到的数据x方向范围。
返回值：
x_new：返回x轴坐标数据。
y_new：返回该函数生成的数据拟合值。

2.70 best_x_name,best_vx,best_trainx,best_testx,best_r=Auto_paint_self.Auto_ngboost_chose(vy,vx,x_name=None,test_size=0.25,task_mode='regression',if_best_mode='no',chosemode='forward',default_learning_rate=0.05,default_max_depth=50,default_num_leaves=100,default_min_child_samples=20,n_estimators=10000,subsample=0.7,metrics='default',ifmute='no',ifweight='yes',ifrandom_split='yes')
该函数用于ngboost模型前向/后向回归挑选预报因子
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，其必须为一维的，只保留时间维度。
vx：必要参数，np.array类型。该参数代表预报因子的值，其必须为二维的，其中第一维为时间维度，与vy长度一致，第二维的长度和预报因子数量相同。vx由预报因子做空间平均后叠加，并且翻转第一维和第二维而成。
x_name：可选参数，np.array类型。该参数代表vx即各个预报因子的名称，用于模型输出结果时预报因子名称的输出，如果为None则自动赋值数字1到n，n为预报因子个数。默认值为None
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.25
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表所输入的参数（default_learning_rate，default_max_depth，default_num_leaves，default_min_child_samples）是否为最优，以及是否需要调优。在该模型中，使用贝叶斯调优。'no'代表输入参数不是最优，需要调优；'yes'输入参数为最优，不需要调优。默认值为'no'
chosemode：可选参数，字符串类型。该参数代表模型是使用前向回归还是后向回归。'forward'代表前项回归，'backward'代表后向回归。默认值为'forward'
default_learning_rate：可选参数，实型。代表初始的学习率，学习率代表每加入一棵树到模型中其占有权重的大小。跟树的数量有关，加入的树越多，学习率通常越低模型越优，而加入的树越少，通常学习率越高越优。默认值为0.5
default_max_depth：可选参数，整形。代表初始的最大树深度，最大树深度代表模型的树最多有多少层，过深的模型可能会导致过拟合，而过浅的模型可能会导致预测准确率低。默认值为50
default_num_leaves：可选参数，整形。代表初始的最大叶子节点数，最大叶子节点数代表每棵树最多有多少叶子节点，过多的叶子节点可能会导致过拟合，而过少的叶子节点可能会导致预测准确率低。默认值为100
default_min_child_samples：可选参数，整形。代表初始的每个叶子节点上的最小样本数，每个叶子节点上的最小样本数代表每个叶子节点上最少有多少个样本，否则将该叶子节点剔除，将样本回归到父节点上。每个叶子节点上的最小样本数过少可能会导致过拟合，每个叶子节点上的最小样本数过多可能会导致预测准确率低。默认值为20值为'gbdt'
n_estimators：可选参数，整形。代表模型中树的数量。越多的树意味着模型精度越高但是越浪费计算机计算时间，越少的树意味着越节约计算机计算资源但是模型精度越低。通常取1000-10000之间最好。默认值为10000
subsample：可选参数，实型。代表模型中每次训练采用的样本比率（拿来训练的样本数量/训练集中样本数量，不包括测试集数据）。通常在确定预报因子都与预报量有关的情况下，该值不能小于0.5，在0.7到1.0之间最为合适。默认值为0.7
metrics：可选参数，字符串类型。该参数代表模型所使用的评估标准。根据task_mode的不同而填写不同参数；当task_mode为'binary_classify'时，填写default或者f1代表使用f1指数作为评估标准，填写recall代表使用召回率作为评估标准，填写precision代表使用精确率作为评估标准；当task_mode为'regression'时填写default或者pearson代表使用相关系数作为评估标准，填写mse代表使用均方根误差作为评估标准；当task_mode为'multi_classify'时填写default或accuracy代表使用准确率作为评估标准。默认值为'default'
ifmute：可选参数，字符串类型。代表是否不打印调优次数以及是否打印每次加入/剔除模型的预报因子。默认值为'no'代表打印
ifweight：可选参数，字符串类型。该参数代表是否使用贡献率作为挑选预报因子的标准以及使用什么模型计算预报因子贡献，'yes'或者'shap'代表使用shp模型计算预报因子贡献，'PI'代表使用permutation_importance模型计算预报因子贡献，'no'代表不使用贡献率作为挑选预报因子的标准。默认值为'yes'
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
返回值：
best_x_name：返回模型挑选的最好的预报因子名称
best_vx：返回模型挑选的最好的预报因子序列
best_trainx：返回模型挑选的最好的预报因子训练集序列
best_testx：返回模型挑选的最好的预报因子测试集序列
best_r：返回模型测试集中最优的预报因子组合所达到的最高的预测值与准确值的相关系数

2.71 model,predicty,testy,r,p,weights=Auto_paint_self.Auto_ngboost(vy,vx,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',default_learning_rate=0.5,default_max_depth=50,default_num_leaves=100,default_min_child_samples=20,n_estimators=10000,subsample=0.7,metrics='default',if_early_stopping=None,ifmute='no',ifweight='yes',ifrandom_split='yes')
该函数用于机器学习ngboost的参数调优，以及进行ngboost模型训练。#注：模型部分参数可以参考网址（https://stanfordmlgroup.github.io/ngboost/）
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，其必须为一维的，只保留时间维度。
vx：必要参数，np.array类型。该参数代表预报因子的值，其必须为二维的，其中第一维为时间维度，与vy长度一致，第二维的长度和预报因子数量相同。vx由预报因子做空间平均后叠加，并且翻转第一维和第二维而成。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表所输入的参数（default_learning_rate，default_max_depth，default_num_leaves，default_min_child_samples）是否为最优，以及是否需要调优。'no'代表输入参数不是最优，需要调优；'yes'输入参数为最优，不需要调优。默认值为'no'
default_learning_rate：可选参数，实型。代表初始的学习率，学习率代表每加入一棵树到模型中其占有权重的大小。跟树的数量有关，加入的树越多，学习率通常越低模型越优，而加入的树越少，通常学习率越高越优。默认值为0.5
default_max_depth：可选参数，整形。代表初始的最大树深度，最大树深度代表模型的树最多有多少层，过深的模型可能会导致过拟合，而过浅的模型可能会导致预测准确率低。默认值为50
default_num_leaves：可选参数，整形。代表初始的最大叶子节点数，最大叶子节点数代表每棵树最多有多少叶子节点，过多的叶子节点可能会导致过拟合，而过少的叶子节点可能会导致预测准确率低。默认值为100
default_min_child_samples：可选参数，整形。代表初始的每个叶子节点上的最小样本数，每个叶子节点上的最小样本数代表每个叶子节点上最少有多少个样本，否则将该叶子节点剔除，将样本回归到父节点上。每个叶子节点上的最小样本数过少可能会导致过拟合，每个叶子节点上的最小样本数过多可能会导致预测准确率低。默认值为20
n_estimators：可选参数，整形。代表模型中树的数量。越多的树意味着模型精度越高但是越浪费计算机计算时间，越少的树意味着越节约计算机计算资源但是模型精度越低。通常取1000-10000之间最好。默认值为10000
subsample：可选参数，实型。代表模型中每次训练采用的样本比率（拿来训练的样本数量/训练集中样本数量，不包括测试集数据）。通常在确定预报因子都与预报量有关的情况下，该值不能小于0.5，在0.7到1.0之间最为合适。默认值为0.7
metrics：可选参数，字符串类型。该参数代表模型所使用的评估标准。根据task_mode的不同而填写不同参数；当task_mode为'binary_classify'时，填写default或者f1代表使用f1指数作为评估标准，填写recall代表使用召回率作为评估标准，填写precision代表使用精确率作为评估标准；当task_mode为'regression'时填写default或者pearson代表使用相关系数作为评估标准，填写mse代表使用均方根误差作为评估标准；当task_mode为'multi_classify'时填写default或accuracy代表使用准确率作为评估标准。默认值为'default'
if_early_stopping：可选参数，整形。该参数代表是否要进行早停，填写数字数字代表早停轮次，填写None代表不早停。默认值为None
ifmute：可选参数，字符串类型。代表是否打印调优次数以及是否打印每次调优时的预测值与真实值的相关系数。默认值为'no'代表打印
ifweight：可选参数，字符串类型。该参数代表是否要输出每个预报因子对于预报值的预报贡献以及使用什么模型计算预报因子贡献，'yes'或者'shap'代表使用shp模型输出预报因子贡献，'PI'代表使用permutation_importance模型输出预报因子贡献，'no'代表不输出。默认值为'yes'
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
返回值：
model：返回训练好的最优模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None
weights：如果ifweight不为'no'，则返回预报因子的贡献率；否则返回None

2.72 best_learning_rate,best_max_depth,best_num_leaves,best_min_child_samples,best_r=Auto_paint_self.Auto_ngboost_Bayesian_Optimization(vx,vy,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',ifrandom_split='yes',learning_rate_range=[0.01,1.0],max_depth_range=[10,100],num_leaves_range=[50,150],min_child_samples_range=[2,40],n_estimators=10000,subsample=0.7,init_points=10,n_iter=0,metrics='default',if_early_stopping=None,ifmute='no')
该函数用于ngboost的贝叶斯调优
输入值：
vx：必要参数，np.array类型。该参数代表预报因子的值，其必须为二维的，其中第一维为时间维度，与vy长度一致，第二维的长度和预报因子数量相同。vx由预报因子做空间平均后叠加，并且翻转第一维和第二维而成。
vy：必要参数，np.array类型。该参数代表预报量的真实值，其必须为一维的，只保留时间维度。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
learning_rate_range：可选参数，tumple类型。该参数代表贝叶斯调优的学习率范围。默认值为[0.01,1.0]代表学习率控制在0.01到1.0之间
max_depth_range：可选参数，tumple类型。该参数代表贝叶斯调优的最大树深度范围。默认值为[10,100]代表最大树深度控制在10到100之间
num_leaves_range：可选参数，tumple类型。该参数代表贝叶斯调优的最大叶子节点数范围。默认值为[50,150]代表最大叶子节点数控制在50到150之间
min_child_samples_range：可选参数，tumple类型。该参数代表贝叶斯调优的最小叶子节点样本数范围。默认值为[2,40]代表最小叶子节点样本数控制在2到40之间
n_estimators：可选参数，整形。代表模型中树的数量。越多的树意味着模型精度越高但是越浪费计算机计算时间，越少的树意味着越节约计算机计算资源但是模型精度越低。通常取1000-10000之间最好。默认值为10000
subsample：可选参数，实型。代表模型中每次训练采用的样本比率（拿来训练的样本数量/训练集中样本数量，不包括测试集数据）。通常在确定预报因子都与预报量有关的情况下，该值不能小于0.5，在0.7到1.0之间最为合适。默认值为0.7
init_points：可选参数，整形。该参数代表贝叶斯调优的随机调优次数。默认值为10
n_iter：可选参数，整形。该参数代表贝叶斯调优的深度调优次数。默认值为0
metrics：可选参数，字符串类型。该参数代表模型所使用的评估标准。根据task_mode的不同而填写不同参数；当task_mode为'binary_classify'时，填写default或者f1代表使用f1指数作为评估标准，填写recall代表使用召回率作为评估标准，填写precision代表使用精确率作为评估标准；当task_mode为'regression'时填写default或者pearson代表使用相关系数作为评估标准，填写mse代表使用均方根误差作为评估标准；当task_mode为'multi_classify'时填写default或accuracy代表使用准确率作为评估标准。默认值为'default'
if_early_stopping：可选参数，整形。该参数代表是否要进行早停，填写数字数字代表早停轮次，填写None代表不早停。默认值为None
ifmute：可选参数，字符串类型。代表是否打印调优的最优参数和最优TCC。默认值为'no'代表打印
返回值：
best_learning_rate：返回贝叶斯调优的最优学习率
best_max_depth：返回贝叶斯调优的最优最大树深度
best_num_leaves：返回贝叶斯调优的最优最大叶子节点数
best_min_child_samples：返回贝叶斯调优的最优最小叶子节点样本数
best_r：返回贝叶斯调优的最优结果r

2.73 best_x_name,best_vx,best_trainx,best_testx,best_r=Auto_paint_self.Auto_CNN_TCN_chose(vy,vx,timestep,model_list,dilations,test_size=0.25,task_mode='regression',chosemode='forward',cov_padding='same',cov_strides=1,pooling_padding='valid',pooling_strides=2,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,nb_filters=64,kernel_size=2,nb_stacks=1,padding='causal',dropout_rate=0.0,activation='tanh',kernel_initializer='he_normal',if_use_batch_norm=False,if_use_layer_norm=False,if_use_weight_norm=False,loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifrandom_split='yes',ifmute='no',device='cpu')
该函数用于CNN_TCN网络前向/后向回归挑选预报因子(该函数目前已经被废除)
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['localcov',[64,3,3]]代表插入权重参数不共享的卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['tcn']代表插入时间卷积网络层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.25
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
chosemode：可选参数，字符串类型。该参数代表模型是使用前向回归还是后向回归。'forward'代表前项回归，'backward'代表后向回归。默认值为'forward'
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
pooling_padding：可选参数，该参数代表池化层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'valid'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
nb_filters：可选参数，整形。该参数代表tcn网络的神经元个数，默认值为64
kernel_size：可选参数，整形。该参数代表tcn网络的卷积核大小，默认值为2
nb_stacks：可选参数，整形。该参数代表tcn网络的残差块堆叠数，默认值为1
padding：可选参数，字符串类型。该参数代表tcn网络是因果卷积还是非因果卷积，'causal'代表因果卷积，因果卷积代表不能够用未来预测现在；'same'或者'valid'代表非因果卷积，非因果卷代表可以用未来预测现在。默认值为'causal'
dropout_rate：可选参数，实型。该参数代表tcn随机丢弃数据/网络节点的比率，用于防止过拟合。默认值为0.0
activation：可选参数，字符串类型。该参数代表tcn网络使用的激活函数类型，更多可选项详情见tcn github官网。默认值为'tanh'
kernel_initializer：可选参数，字符串类型。该参数代表权重矩阵初始化方案，更多可选项详情见tcn github官网。默认值为'he_normal'
if_use_batch_norm：可选参数，布尔值类型。该参数代表是否在tcn中使用batchnormalization，True使用，False不使用。默认值为False
if_use_layer_norm：可选参数，布尔值类型。该参数代表是否在tcn中使用layernormalization，True使用，False不使用。默认值为False
if_use_weight_norm：可选参数，布尔值类型。该参数代表是否在tcn中使用weightnormalization，True使用，False不使用。默认值为False
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优次数以及是否打印每次加入/剔除模型的预报因子。默认值为'no'代表打印
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
best_x_name：返回模型挑选的最好的预报因子名称
best_vx：返回模型挑选的最好的预报因子序列
best_trainx：返回模型挑选的最好的预报因子训练集序列
best_testx：返回模型挑选的最好的预报因子测试集序列
best_r：返回模型测试集中最优的预报因子组合所达到的最高的预测值与准确值的相关系数

2.74 model,predicty,testy,r,p=Auto_paint_self.Auto_CNN_LSTMorGRUorRNN_chose(vy,vx,timestep,model_list,test_size=0.25,task_mode='regression',chosemode='forward',cov_padding='same',cov_strides=1,pooling_padding='valid',pooling_strides=2,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,units=64,dropout=0.0,recurrent_dropout=0.0,activation='tanh',recurrent_activation='sigmoid',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifmute='no',ifrandom_split='yes',device='cpu')
该函数用于CNN_LSTMorGRUorRNN网络前向/后向回归挑选预报因子(该函数目前已经被废除)
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['localcov',[64,3,3]]代表插入权重参数不共享的卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['lstm']代表插入LSTM层；['gru']代表插入GRU层；['rnn']代表插入RNN层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.25
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
chosemode：可选参数，字符串类型。该参数代表模型是使用前向回归还是后向回归。'forward'代表前项回归，'backward'代表后向回归。默认值为'forward'
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
pooling_padding：可选参数，该参数代表池化层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'valid'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
units：可选参数，整形。该参数代表网络的内部循环的神经元个数。默认值为64
dropout：可选参数，实型。该参数代表网络外部循环的数据丢弃值，例如0.1代表丢弃百分之10的数据用于防止过拟合。默认值为0.0
recurrent_dropout：可选参数，实型。该参数代表网络内部循环的数据丢弃值，例如0.1代表丢弃百分之10的数据用于防止过拟合。默认值为0.0
activation：可选参数，字符串类型。该参数用于代表网络外部循环所使用的激活函数。默认值为'tanh'
recurrent_activation：可选参数，字符串类型。该参数用于代表网络内部循环所使用的激活函数。默认值为'sigmoid'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifmute：可选参数，字符串类型。代表是否不打印调优次数以及是否打印每次加入/剔除模型的预报因子。默认值为'no'代表打印
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
best_x_name：返回模型挑选的最好的预报因子名称
best_vx：返回模型挑选的最好的预报因子序列
best_trainx：返回模型挑选的最好的预报因子训练集序列
best_testx：返回模型挑选的最好的预报因子测试集序列
best_r：返回模型测试集中最优的预报因子组合所达到的最高的预测值与准确值的相关系数

2.75 vwave=Auto_paint_self.Auto_heatwave(v)
该函数用于识别热浪
输入值：
v：必要参数，np.array类型或者xr.Dataarray类型。该参数代表识别热浪使用的温度数据，强烈建议为极高温度数据，可以是一维(time)的或者三维(time,lat,lon)的。
返回值：
vwave：返回热浪识别结果，为与v大小相同的数组，数组由0和1构成，1代表是热浪日，0代表不是热浪日。

2.76 model,predicty,testy,r,p,weights=Auto_paint_self.Auto_Transformer(vy,vx,timestep,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,encoder_deep=1,num_heads=2,key_dim=2,ifdropout='no',trans_dropout_rate=0.0,trans_units=64,trans_activation='sigmoid',embedding_num=None,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifrandom_split='yes',ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构造Transformer
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，其必须为一维的，只保留时间维度。
vx：必要参数，np.array类型。该参数代表预报因子的值，其必须为二维的，其中第一维为时间维度，与vy长度一致，第二维的长度和预报因子数量相同。vx由预报因子做空间平均后叠加，并且翻转第一维和第二维而成。
timestep：必要参数，整形。该参数代表预测vy所用到的vx提前时段，例如填写7代表用提前1-7个时次的vx预测vy。
model_list：必要参数，tumple类型。该参数代表构建的时间卷积网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['transformer']代表插入Transformer层；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
encoder_deep：可选参数，整形。该参数代表函数中encoder层的数量，默认值为1
num_heads：可选参数，整形。该参数代表多头自注意模块中头的数量。默认值为2
key_dim：可选参数，整形。该参数代表多头自注意模块中键的数量。默认值为2
ifdropout：可选参数，字符串类型。该函数代表transform模块中是否使用dropout。默认值为'no'
trans_dropout_rate：可选参数，实型。该参数代表transform模块中dropout的比率。默认值为0.0
trans_units：可选参数，整形。该参数代表transform模块内部的dense层的神经元个数。默认值为64
trans_activation：可选参数，字符串类型。该参数代表transform模块中的dense层激活函数，默认值为'sigmoid'
embedding_num：可选参数，代表在decoder模块中编码数据的数目。对于分类问题，应该为类别+1，对于预测问题，该值在有限范围内越大越好。默认值为10000
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifweight：可选参数，字符串类型。该参数代表是否要输出每个预报因子对于预报值的预报贡献，'yes'代表输出，'no'代表不输出。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.77 model,predicty,testy,r,p,heatmap,heatmap,weights=Auto_paint_self.Auto_Resnet(vy,vx,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,ifrandom_split='yes',cov_padding='same',cov_strides=1,residual_deep=1,residual_activation='relu',residual_norm='batchnormalization',pooling_padding='valid',pooling_strides=2,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifheatmap='yes',ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构建Resnet网络
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的Resnet架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['localcov',[64,3,3]]代表插入权重参数不共享的卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
residual_deep：可选参数，整形。该参数代表残差模块中包含几层（卷积层+激活函数+归一化层）模块，即残差模块深度。默认值为1
residual_activation：可选参数，字符串类型。该参数代表残差模块中所使用的激活函数。默认值为'relu'
residual_norm：可选参数，字符串类型。该参数代表残差模块中所使用的归一化方法。默认值为'batchnormalization'
pooling_padding：可选参数，该参数代表池化层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'valid'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifheatmap：可选参数，字符串类型。该参数代表是否要返回贡献率图heatmap，'yes'代表返回，填写其他值代表不返回（返回结果为None）。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'或者'shap'代表使用shap库计算贡献率，填写'oob'代表使用oob方法计算贡献率，填写'no'代表不计算贡献率。默认值为'yes'代表使用shap方法计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型model
predicty：返回测试集预测值y'
testy：返回测试集真实值vy
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
heatmap：返回贡献图heatmap，仅在ifheatmap为'yes'时有值，否则为None
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.78 best_x_name,best_vx,best_trainx,best_testx,best_r=Auto_paint_self.Auto_Resnet_chose(vy,vx,model_list,x_name=None,test_size=0.25,task_mode='regression',chosemode='forward',ifrandom_split='yes',cov_padding='same',cov_strides=1,residual_deep=1,residual_activation='relu',residual_norm='batchnormalization',pooling_padding='valid',pooling_strides=2,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifmute='no',device='cpu')
该函数用于Resnet网络前向/后向回归挑选预报因子(该函数目前已经被废除)
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
timestep：必要参数，整形。该参数代表预测vy所用到的vx提前时段，例如填写7代表用提前1-7个时次的vx预测vy。
model_list：必要参数，tumple类型。该参数代表构建的神经网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['localcov',[64,3,3]]代表插入权重参数不共享的卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
x_name：可选参数，np.array类型。该参数代表vx即各个预报因子的名称，用于模型输出结果时预报因子名称的输出，如果为None则自动赋值数字1到n，n为预报因子个数。默认值为None
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.25
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
chosemode：可选参数，字符串类型。该参数代表模型是使用前向回归还是后向回归。'forward'代表前项回归，'backward'代表后向回归。默认值为'forward'
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
residual_deep：可选参数，整形。该参数代表残差模块中包含几层（卷积层+激活函数+归一化层）模块，即残差模块深度。默认值为1
residual_activation：可选参数，字符串类型。该参数代表残差模块中所使用的激活函数。默认值为'relu'
residual_norm：可选参数，字符串类型。该参数代表残差模块中所使用的归一化方法。默认值为'batchnormalization'
pooling_padding：可选参数，该参数代表池化层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'valid'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifmute：可选参数，字符串类型。代表是否不打印调优次数以及是否打印每次加入/剔除模型的预报因子。默认值为'no'代表打印
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
best_x_name：返回模型挑选的最好的预报因子名称
best_vx：返回模型挑选的最好的预报因子序列
best_trainx：返回模型挑选的最好的预报因子训练集序列
best_testx：返回模型挑选的最好的预报因子测试集序列
best_r：返回模型测试集中最优的预报因子组合所达到的最高的预测值与准确值的相关系数

2.79 best_x_name,best_vx,best_trainx,best_testx,best_r=Auto_paint_self.Auto_Transformer_chose(vy,vx,timestep,model_list,x_name=None,test_size=0.25,task_mode='regression',chosemode='forward',encoder_deep=1,num_heads=2,key_dim=2,ifdropout='no',trans_dropout_rate=0.0,trans_units=64,trans_activation='sigmoid',last_activation='sigmoid',embedding_num=None,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifmute='no',ifrandom_split='yes',device='cpu')
该函数用于Transformer网络前向/后向回归挑选预报因子(该函数目前已经被废除)
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，其必须为一维的，只保留时间维度。
vx：必要参数，np.array类型。该参数代表预报因子的值，其必须为二维的，其中第一维为时间维度，与vy长度一致，第二维的长度和预报因子数量相同。vx由预报因子做空间平均后叠加，并且翻转第一维和第二维而成。
timestep：必要参数，整形。该参数代表预测vy所用到的vx提前时段，例如填写7代表用提前1-7个时次的vx预测vy。
model_list：必要参数，tumple类型。该参数代表构建的时间卷积网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['transformer']代表插入Transformer层；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
x_name：可选参数，np.array类型。该参数代表vx即各个预报因子的名称，用于模型输出结果时预报因子名称的输出，如果为None则自动赋值数字1到n，n为预报因子个数。默认值为None
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.25
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
chosemode：可选参数，字符串类型。该参数代表模型是使用前向回归还是后向回归。'forward'代表前项回归，'backward'代表后向回归。默认值为'forward'
encoder_deep：可选参数，整形。该参数代表函数中encoder层的数量，默认值为1
num_heads：可选参数，整形。该参数代表多头自注意模块中头的数量。默认值为2
key_dim：可选参数，整形。该参数代表多头自注意模块中键的数量。默认值为2
ifdropout：可选参数，字符串类型。该函数代表transform模块中是否使用dropout。默认值为'no'
trans_dropout_rate：可选参数，实型。该参数代表transform模块中dropout的比率。默认值为0.0
trans_units：可选参数，整形。该参数代表transform模块内部的dense层的神经元个数。默认值为64
trans_activation：可选参数，字符串类型。该参数代表transform模块中的dense层激活函数，默认值为'sigmoid'
embedding_num：可选参数，代表在decoder模块中编码数据的数目。对于分类问题，应该为类别+1，对于预测问题，该值在有限范围内越大越好。默认值为10000
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifmute：可选参数，字符串类型。代表是否不打印调优次数以及是否打印每次加入/剔除模型的预报因子。默认值为'no'代表打印
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
best_x_name：返回模型挑选的最好的预报因子名称
best_vx：返回模型挑选的最好的预报因子序列
best_trainx：返回模型挑选的最好的预报因子训练集序列
best_testx：返回模型挑选的最好的预报因子测试集序列
best_r：返回模型测试集中最优的预报因子组合所达到的最高的预测值与准确值的相关系数

2.80 model,predicty,testy,r,p,heatmap,weights=Auto_paint_self.Auto_Resnet_LSTMorGRUorRNN(vy,vx,timestep,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,cov_padding='same',cov_strides=1,residual_deep=1,residual_activation='relu',residual_norm='batchnormalization',pooling_padding='valid',pooling_strides=2,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,units=64,dropout=0.0,recurrent_dropout=0.0,activation='tanh',recurrent_activation='sigmoid',if_print_model='yes',loss_function='default',if_print_model='yes',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifheatmap='yes',ifweight='yes',ifmute='no',ifrandom_split='yes',ifsave='no',savepath=None,device='cpu')
该函数用于融合Resnet和LSTM/GRU/RNN网络
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['localcov',[64,3,3]]代表插入权重参数不共享的卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['lstm']代表插入LSTM层；['gru']代表插入GRU层；['rnn']代表插入RNN层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
residual_deep：可选参数，整形。该参数代表残差模块中包含几层（卷积层+激活函数+归一化层）模块，即残差模块深度。默认值为1
residual_activation：可选参数，字符串类型。该参数代表残差模块中所使用的激活函数。默认值为'relu'
residual_norm：可选参数，字符串类型。该参数代表残差模块中所使用的归一化方法。默认值为'batchnormalization'
pooling_padding：可选参数，该参数代表池化层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'valid'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
units：可选参数，整形。该参数代表网络的内部循环的神经元个数。默认值为64
dropout：可选参数，实型。该参数代表网络外部循环的数据丢弃值，例如0.1代表丢弃百分之10的数据用于防止过拟合。默认值为0.0
recurrent_dropout：可选参数，实型。该参数代表网络内部循环的数据丢弃值，例如0.1代表丢弃百分之10的数据用于防止过拟合。默认值为0.0
activation：可选参数，字符串类型。该参数用于代表网络外部循环所使用的激活函数。默认值为'tanh'
recurrent_activation：可选参数，字符串类型。该参数用于代表网络内部循环所使用的激活函数。默认值为'sigmoid'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifheatmap：可选参数，字符串类型。该参数代表是否要返回贡献率图heatmap，'yes'代表返回，填写其他值代表不返回（返回结果为None）。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'或者'shap'代表使用shap库计算贡献率，填写'oob'代表使用oob方法计算贡献率，填写'no'代表不计算贡献率。默认值为'yes'代表使用shap方法计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
heatmap：返回贡献图heatmap，仅在ifheatmap为'yes'时有值，否则为None
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.81 model,predicty,testy,r,p=Auto_paint_self.Auto_Resnet_LSTMorGRUorRNN_chose(vy,vx,timestep,model_list,test_size=0.25,task_mode='regression',chosemode='forward',cov_padding='same',cov_strides=1,residual_deep=1,residual_activation='relu',residual_norm='batchnormalization',pooling_padding='valid',pooling_strides=2,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,units=64,dropout=0.0,recurrent_dropout=0.0,activation='tanh',recurrent_activation='sigmoid',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifmute='no',ifrandom_split='yes',device='cpu')
该函数用于Resnet_LSTMorGRUorRNN网络前向/后向回归挑选预报因子(该函数目前已经被废除)
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['localcov',[64,3,3]]代表插入权重参数不共享的卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['lstm']代表插入LSTM层；['gru']代表插入GRU层；['rnn']代表插入RNN层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.25
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
chosemode：可选参数，字符串类型。该参数代表模型是使用前向回归还是后向回归。'forward'代表前项回归，'backward'代表后向回归。默认值为'forward'
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
residual_deep：可选参数，整形。该参数代表残差模块中包含几层（卷积层+激活函数+归一化层）模块，即残差模块深度。默认值为1
residual_activation：可选参数，字符串类型。该参数代表残差模块中所使用的激活函数。默认值为'relu'
residual_norm：可选参数，字符串类型。该参数代表残差模块中所使用的归一化方法。默认值为'batchnormalization'
pooling_padding：可选参数，该参数代表池化层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'valid'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
units：可选参数，整形。该参数代表网络的内部循环的神经元个数。默认值为64
dropout：可选参数，实型。该参数代表网络外部循环的数据丢弃值，例如0.1代表丢弃百分之10的数据用于防止过拟合。默认值为0.0
recurrent_dropout：可选参数，实型。该参数代表网络内部循环的数据丢弃值，例如0.1代表丢弃百分之10的数据用于防止过拟合。默认值为0.0
activation：可选参数，字符串类型。该参数用于代表网络外部循环所使用的激活函数。默认值为'tanh'
recurrent_activation：可选参数，字符串类型。该参数用于代表网络内部循环所使用的激活函数。默认值为'sigmoid'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifmute：可选参数，字符串类型。代表是否不打印调优次数以及是否打印每次加入/剔除模型的预报因子。默认值为'no'代表打印
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
best_x_name：返回模型挑选的最好的预报因子名称
best_vx：返回模型挑选的最好的预报因子序列
best_trainx：返回模型挑选的最好的预报因子训练集序列
best_testx：返回模型挑选的最好的预报因子测试集序列
best_r：返回模型测试集中最优的预报因子组合所达到的最高的预测值与准确值的相关系数

2.82 model,predicty,testy,r,p,heatmap,weights=Auto_paint_self.Auto_Resnet_TCN(vy,vx,timestep,model_list,dilations,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,cov_padding='same',cov_strides=1,residual_deep=1,residual_activation='relu',residual_norm='batchnormalization',pooling_padding='valid',pooling_strides=2,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,nb_filters=64,kernel_size=2,nb_stacks=1,padding='causal',dropout_rate=0.0,activation='tanh',kernel_initializer='he_normal',if_use_batch_norm=False,if_use_layer_norm=False,if_use_weight_norm=False,if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifrandom_split='yes',ifheatmap='yes',ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于融合Resnet和TCN网络
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['localcov',[64,3,3]]代表插入权重参数不共享的卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['tcn']代表插入时间卷积网络层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
dilations：必要参数，tumple类型。该参数代表扩张系数元组。通常按照固定的膨胀基数递增，例如[1,2,4,8,16,32]代表构建6层深度的tcn网络，每向上一层扩张系数增加2倍。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
residual_deep：可选参数，整形。该参数代表残差模块中包含几层（卷积层+激活函数+归一化层）模块，即残差模块深度。默认值为1
residual_activation：可选参数，字符串类型。该参数代表残差模块中所使用的激活函数。默认值为'relu'
residual_norm：可选参数，字符串类型。该参数代表残差模块中所使用的归一化方法。默认值为'batchnormalization'
pooling_padding：可选参数，该参数代表池化层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'valid'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
nb_filters：可选参数，整形。该参数代表tcn网络的神经元个数，默认值为64
kernel_size：可选参数，整形。该参数代表tcn网络的卷积核大小，默认值为2
nb_stacks：可选参数，整形。该参数代表tcn网络的残差块堆叠数，默认值为1
padding：可选参数，字符串类型。该参数代表tcn网络是因果卷积还是非因果卷积，'causal'代表因果卷积，因果卷积代表不能够用未来预测现在；'same'或者'valid'代表非因果卷积，非因果卷代表可以用未来预测现在。默认值为'causal'
dropout_rate：可选参数，实型。该参数代表tcn随机丢弃数据/网络节点的比率，用于防止过拟合。默认值为0.0
activation：可选参数，字符串类型。该参数代表tcn网络使用的激活函数类型，更多可选项详情见tcn github官网。默认值为'tanh'
kernel_initializer：可选参数，字符串类型。该参数代表权重矩阵初始化方案，更多可选项详情见tcn github官网。默认值为'he_normal'
if_use_batch_norm：可选参数，布尔值类型。该参数代表是否在tcn中使用batchnormalization，True使用，False不使用。默认值为False
if_use_layer_norm：可选参数，布尔值类型。该参数代表是否在tcn中使用layernormalization，True使用，False不使用。默认值为False
if_use_weight_norm：可选参数，布尔值类型。该参数代表是否在tcn中使用weightnormalization，True使用，False不使用。默认值为False
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifheatmap：可选参数，字符串类型。该参数代表是否要返回贡献率图heatmap，'yes'代表返回，填写其他值代表不返回（返回结果为None）。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'或者'shap'代表使用shap库计算贡献率，填写'oob'代表使用oob方法计算贡献率，填写'no'代表不计算贡献率。默认值为'yes'代表使用shap方法计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
heatmap：返回贡献图heatmap，仅在ifheatmap为'yes'时有值，否则为None
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.83 best_x_name,best_vx,best_trainx,best_testx,best_r=Auto_paint_self.Auto_Resnet_TCN_chose(vy,vx,timestep,model_list,dilations,test_size=0.25,task_mode='regression',chosemode='forward',cov_padding='same',cov_strides=1,residual_deep=1,residual_activation='relu',residual_norm='batchnormalization',pooling_padding='valid',pooling_strides=2,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,nb_filters=64,kernel_size=2,nb_stacks=1,padding='causal',dropout_rate=0.0,activation='tanh',kernel_initializer='he_normal',if_use_batch_norm=False,if_use_layer_norm=False,if_use_weight_norm=False,loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifrandom_split='yes',ifmute='no',device='cpu')
该函数用于Resnet_TCN网络前向/后向回归挑选预报因子(该函数目前已经被废除)
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['localcov',[64,3,3]]代表插入权重参数不共享的卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['tcn']代表插入时间卷积网络层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.25
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
chosemode：可选参数，字符串类型。该参数代表模型是使用前向回归还是后向回归。'forward'代表前项回归，'backward'代表后向回归。默认值为'forward'
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
residual_deep：可选参数，整形。该参数代表残差模块中包含几层（卷积层+激活函数+归一化层）模块，即残差模块深度。默认值为1
residual_activation：可选参数，字符串类型。该参数代表残差模块中所使用的激活函数。默认值为'relu'
residual_norm：可选参数，字符串类型。该参数代表残差模块中所使用的归一化方法。默认值为'batchnormalization'
pooling_padding：可选参数，该参数代表池化层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'valid'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优次数以及是否打印每次加入/剔除模型的预报因子。默认值为'no'代表打印
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
best_x_name：返回模型挑选的最好的预报因子名称
best_vx：返回模型挑选的最好的预报因子序列
best_trainx：返回模型挑选的最好的预报因子训练集序列
best_testx：返回模型挑选的最好的预报因子测试集序列
best_r：返回模型测试集中最优的预报因子组合所达到的最高的预测值与准确值的相关系数

2.84 model,predicty,testy,r,p,weights=Auto_paint_self.Auto_Resnet_Transformer(vy,vx,timestep,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,cov_padding='same',cov_strides=1,residual_deep=1,residual_activation='relu',residual_norm='batchnormalization',pooling_padding='valid',pooling_strides=2,embedding_num=None,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,encoder_deep=1,num_heads=2,key_dim=2,ifdropout='no',trans_dropout_rate=0.0,trans_units=64,trans_activation='sigmoid',if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifrandom_split='yes',ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于融合Resnet和Transformer网络
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['localcov',[64,3,3]]代表插入权重参数不共享的卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['transformer']代表插入Transformer层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
residual_deep：可选参数，整形。该参数代表残差模块中包含几层（卷积层+激活函数+归一化层）模块，即残差模块深度。默认值为1
residual_activation：可选参数，字符串类型。该参数代表残差模块中所使用的激活函数。默认值为'relu'
residual_norm：可选参数，字符串类型。该参数代表残差模块中所使用的归一化方法。默认值为'batchnormalization'
pooling_padding：可选参数，该参数代表池化层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'valid'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
embedding_num：可选参数，代表在decoder模块中编码数据的数目。对于分类问题，应该为类别+1，对于预测问题，该值在有限范围内越大越好。默认值为10000
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
encoder_deep：可选参数，整形。该参数代表函数中encoder层的数量，默认值为1
num_heads：可选参数，整形。该参数代表多头自注意模块中头的数量。默认值为2
key_dim：可选参数，整形。该参数代表多头自注意模块中键的数量。默认值为2
ifdropout：可选参数，字符串类型。该函数代表transform模块中是否使用dropout。默认值为'no'
trans_dropout_rate：可选参数，实型。该参数代表transform模块中dropout的比率。默认值为0.0
trans_units：可选参数，整形。该参数代表transform模块内部的dense层的神经元个数。默认值为64
trans_activation：可选参数，字符串类型。该参数代表transform模块中的dense层激活函数，默认值为'sigmoid'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要输出每个预报因子对于预报值的预报贡献，'yes'代表输出，'no'代表不输出。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.85 best_x_name,best_vx,best_trainx,best_testx,best_r=Auto_paint_self.Auto_Resnet_Transformer_chose(vy,vx,timestep,model_list,test_size=0.25,task_mode='regression',chosemode='forward',cov_padding='same',cov_strides=1,residual_deep=1,residual_activation='relu',residual_norm='batchnormalization',pooling_padding='valid',pooling_strides=2,embedding_num=None,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,encoder_deep=1,num_heads=2,key_dim=2,ifdropout='no',trans_dropout_rate=0.0,trans_units=64,trans_activation='sigmoid',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifrandom_split='yes',ifmute='no',device='cpu')
该函数用于Resnet_Transformer网络前向/后向回归挑选预报因子(该函数目前已经被废除)
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['localcov',[64,3,3]]代表插入权重参数不共享的卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['transformer']代表插入Transformer层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.25
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
chosemode：可选参数，字符串类型。该参数代表模型是使用前向回归还是后向回归。'forward'代表前项回归，'backward'代表后向回归。默认值为'forward'
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
residual_deep：可选参数，整形。该参数代表残差模块中包含几层（卷积层+激活函数+归一化层）模块，即残差模块深度。默认值为1
residual_activation：可选参数，字符串类型。该参数代表残差模块中所使用的激活函数。默认值为'relu'
residual_norm：可选参数，字符串类型。该参数代表残差模块中所使用的归一化方法。默认值为'batchnormalization'
pooling_padding：可选参数，该参数代表池化层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'valid'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
embedding_num：可选参数，代表在decoder模块中编码数据的数目。对于分类问题，应该为类别+1，对于预测问题，该值在有限范围内越大越好。默认值为10000
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
encoder_deep：可选参数，整形。该参数代表函数中encoder层的数量，默认值为1
num_heads：可选参数，整形。该参数代表多头自注意模块中头的数量。默认值为2
key_dim：可选参数，整形。该参数代表多头自注意模块中键的数量。默认值为2
ifdropout：可选参数，字符串类型。该函数代表transform模块中是否使用dropout。默认值为'no'
trans_dropout_rate：可选参数，实型。该参数代表transform模块中dropout的比率。默认值为0.0
trans_units：可选参数，整形。该参数代表transform模块内部的dense层的神经元个数。默认值为64
trans_activation：可选参数，字符串类型。该参数代表transform模块中的dense层激活函数，默认值为'sigmoid'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优次数以及是否打印每次加入/剔除模型的预报因子。默认值为'no'代表打印
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
best_x_name：返回模型挑选的最好的预报因子名称
best_vx：返回模型挑选的最好的预报因子序列
best_trainx：返回模型挑选的最好的预报因子训练集序列
best_testx：返回模型挑选的最好的预报因子测试集序列
best_r：返回模型测试集中最优的预报因子组合所达到的最高的预测值与准确值的相关系数

2.86 model,predicty,testy,r,p,weights=Auto_paint_self.Auto_CNN_Transformer(vy,vx,timestep,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,cov_padding='same',cov_strides=1,pooling_padding='valid',pooling_strides=2,embedding_num=None,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,encoder_deep=1,num_heads=2,key_dim=2,ifdropout='no',trans_dropout_rate=0.0,trans_units=64,trans_activation='sigmoid',if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifrandom_split='yes',ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于融合CNN和Transformer网络
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['localcov',[64,3,3]]代表插入权重参数不共享的卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['transformer']代表插入Transformer层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
pooling_padding：可选参数，该参数代表池化层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'valid'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
embedding_num：可选参数，代表在decoder模块中编码数据的数目。对于分类问题，应该为类别+1，对于预测问题，该值在有限范围内越大越好。默认值为10000
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
encoder_deep：可选参数，整形。该参数代表函数中encoder层的数量，默认值为1
num_heads：可选参数，整形。该参数代表多头自注意模块中头的数量。默认值为2
key_dim：可选参数，整形。该参数代表多头自注意模块中键的数量。默认值为2
ifdropout：可选参数，字符串类型。该函数代表transform模块中是否使用dropout。默认值为'no'
trans_dropout_rate：可选参数，实型。该参数代表transform模块中dropout的比率。默认值为0.0
trans_units：可选参数，整形。该参数代表transform模块内部的dense层的神经元个数。默认值为64
trans_activation：可选参数，字符串类型。该参数代表transform模块中的dense层激活函数，默认值为'sigmoid'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要输出每个预报因子对于预报值的预报贡献，'yes'代表输出，'no'代表不输出。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.87 best_x_name,best_vx,best_trainx,best_testx,best_r=Auto_paint_self.Auto_CNN_Transformer_chose(vy,vx,timestep,model_list,test_size=0.25,task_mode='regression',chosemode='forward',cov_padding='same',cov_strides=1,pooling_padding='valid',pooling_strides=2,embedding_num=None,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,encoder_deep=1,num_heads=2,key_dim=2,ifdropout='no',trans_dropout_rate=0.0,trans_units=64,trans_activation='sigmoid',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifrandom_split='yes',ifmute='no',device='cpu')
该函数用于CNN_Transformer网络前向/后向回归挑选预报因子(该函数目前已经被废除)
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['localcov',[64,3,3]]代表插入权重参数不共享的卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['transformer']代表插入Transformer层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.25
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
chosemode：可选参数，字符串类型。该参数代表模型是使用前向回归还是后向回归。'forward'代表前项回归，'backward'代表后向回归。默认值为'forward'
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
pooling_padding：可选参数，该参数代表池化层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'valid'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
embedding_num：可选参数，代表在decoder模块中编码数据的数目。对于分类问题，应该为类别+1，对于预测问题，该值在有限范围内越大越好。默认值为10000
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
encoder_deep：可选参数，整形。该参数代表函数中encoder层的数量，默认值为1
num_heads：可选参数，整形。该参数代表多头自注意模块中头的数量。默认值为2
key_dim：可选参数，整形。该参数代表多头自注意模块中键的数量。默认值为2
ifdropout：可选参数，字符串类型。该函数代表transform模块中是否使用dropout。默认值为'no'
trans_dropout_rate：可选参数，实型。该参数代表transform模块中dropout的比率。默认值为0.0
trans_units：可选参数，整形。该参数代表transform模块内部的dense层的神经元个数。默认值为64
trans_activation：可选参数，字符串类型。该参数代表transform模块中的dense层激活函数，默认值为'sigmoid'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优次数以及是否打印每次加入/剔除模型的预报因子。默认值为'no'代表打印
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
best_x_name：返回模型挑选的最好的预报因子名称
best_vx：返回模型挑选的最好的预报因子序列
best_trainx：返回模型挑选的最好的预报因子训练集序列
best_testx：返回模型挑选的最好的预报因子测试集序列
best_r：返回模型测试集中最优的预报因子组合所达到的最高的预测值与准确值的相关系数

2.88 model,encoders,decoders,lasts,predicty,testy,r,p,weights=Auto_paint_self.Auto_TCN_more_output(vy,vx,timestep,outputstep,model_list,dilations,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,nb_filters=64,kernel_size=2,nb_stacks=1,padding='causal',dropout_rate=0.0,activation='tanh',kernel_initializer='he_normal',if_use_batch_norm=False,if_use_layer_norm=False,if_use_weight_norm=False,de_last_activation='sigmoid',if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifweight='yes',ifmute='no',ifrandom_split='yes',ifsave='no',savepath=None,device='cpu')
该函数用于构建时间卷积多输出网络
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，其必须为一维的，只保留时间维度。
vx：必要参数，np.array类型。该参数代表预报因子的值，其必须为二维的，其中第一维为时间维度，与vy长度一致，第二维的长度和预报因子数量相同。vx由预报因子做空间平均后叠加，并且翻转第一维和第二维而成。
timestep：必要参数，整形。该参数代表预测vy所用到的vx提前时段，例如填写7代表用提前1-7个时次的vx预测vy。
outputstep:必要参数，整形。该参数代表预测vy的时次数目。例如等于5时代表预测vy向后的5个时次的值。
model_list：必要参数，tumple类型。该参数代表构建的时间卷积网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['tcn']代表插入时间卷积层；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
dilations：必要参数，tumple类型。该参数代表扩张系数元组。通常按照固定的膨胀基数递增，例如[1,2,4,8,16,32]代表构建6层深度的tcn网络，每向上一层扩张系数增加2倍。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
nb_filters：可选参数，整形。该参数代表tcn网络的神经元个数，默认值为64
kernel_size：可选参数，整形。该参数代表tcn网络的卷积核大小，默认值为2
nb_stacks：可选参数，整形。该参数代表tcn网络的残差块堆叠数，默认值为1
padding：可选参数，字符串类型。该参数代表tcn网络是因果卷积还是非因果卷积，'causal'代表因果卷积，因果卷积代表不能够用未来预测现在；'same'或者'valid'代表非因果卷积，非因果卷代表可以用未来预测现在。默认值为'causal'
dropout_rate：可选参数，实型。该参数代表tcn随机丢弃数据/网络节点的比率，用于防止过拟合。默认值为0.0
activation：可选参数，字符串类型。该参数代表tcn网络使用的激活函数类型，更多可选项详情见tcn github官网。默认值为'tanh'
kernel_initializer：可选参数，字符串类型。该参数代表权重矩阵初始化方案，更多可选项详情见tcn github官网。默认值为'he_normal'
if_use_batch_norm：可选参数，布尔值类型。该参数代表是否在tcn中使用batchnormalization，True使用，False不使用。默认值为False
if_use_layer_norm：可选参数，布尔值类型。该参数代表是否在tcn中使用layernormalization，True使用，False不使用。默认值为False
if_use_weight_norm：可选参数，布尔值类型。该参数代表是否在tcn中使用weightnormalization，True使用，False不使用。默认值为False
de_last_activation：可选参数，字符串类型。该参数代表在decoder中最后一个dense层所使用的激活函数。对于分类问题，通常使用'sigmoid'(二分类)或者'softmax'(多分类)；对于回归问题，通常使用'tanh'。默认值为'tanh'
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率。默认值为'yes'代表计算
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型model
encoders：返回训练好的编码器encoder
decoders：返回训练好的解码器decoder
lasts：返回训练好的解码器decoder后的网络层所组成的模型last
predicty：返回预测值y'
testy：返回测试集真实值vy
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.89 model,covs,encoders,decoders,lasts,predicty,testy,r,p,weights=Auto_paint_self.Auto_Resnet_TCN_more_output(vy,vx,timestep,outputstep,model_list,dilations,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,cov_padding='same',cov_strides=1,residual_deep=1,residual_activation='relu',residual_norm='batchnormalization',pooling_padding='valid',pooling_strides=2,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,nb_filters=64,kernel_size=2,nb_stacks=1,padding='causal',dropout_rate=0.0,activation='tanh',kernel_initializer='he_normal',if_use_batch_norm=False,if_use_layer_norm=False,if_use_weight_norm=False,de_last_activation='sigmoid',if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifweight='yes',ifmute='no',ifrandom_split='yes',ifsave='no',savepath=None,device='cpu')
该函数用于融合Resnet和TCN多输出网络
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
outputstep:必要参数，整形。该参数代表预测vy的时次数目。例如等于5时代表预测vy向后的5个时次的值。
model_list：必要参数，tumple类型。该参数代表构建的网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['localcov',[64,3,3]]代表插入权重参数不共享的卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['tcn']代表插入时间卷积网络层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
dilations：必要参数，tumple类型。该参数代表扩张系数元组。通常按照固定的膨胀基数递增，例如[1,2,4,8,16,32]代表构建6层深度的tcn网络，每向上一层扩张系数增加2倍。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
residual_deep：可选参数，整形。该参数代表残差模块中包含几层（卷积层+激活函数+归一化层）模块，即残差模块深度。默认值为1
residual_activation：可选参数，字符串类型。该参数代表残差模块中所使用的激活函数。默认值为'relu'
residual_norm：可选参数，字符串类型。该参数代表残差模块中所使用的归一化方法。默认值为'batchnormalization'
pooling_padding：可选参数，该参数代表池化层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'valid'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
nb_filters：可选参数，整形。该参数代表tcn网络的神经元个数，默认值为64
kernel_size：可选参数，整形。该参数代表tcn网络的卷积核大小，默认值为2
nb_stacks：可选参数，整形。该参数代表tcn网络的残差块堆叠数，默认值为1
padding：可选参数，字符串类型。该参数代表tcn网络是因果卷积还是非因果卷积，'causal'代表因果卷积，因果卷积代表不能够用未来预测现在；'same'或者'valid'代表非因果卷积，非因果卷代表可以用未来预测现在。默认值为'causal'
dropout_rate：可选参数，实型。该参数代表tcn随机丢弃数据/网络节点的比率，用于防止过拟合。默认值为0.0
activation：可选参数，字符串类型。该参数代表tcn网络使用的激活函数类型，更多可选项详情见tcn github官网。默认值为'tanh'
kernel_initializer：可选参数，字符串类型。该参数代表权重矩阵初始化方案，更多可选项详情见tcn github官网。默认值为'he_normal'
if_use_batch_norm：可选参数，布尔值类型。该参数代表是否在tcn中使用batchnormalization，True使用，False不使用。默认值为False
if_use_layer_norm：可选参数，布尔值类型。该参数代表是否在tcn中使用layernormalization，True使用，False不使用。默认值为False
if_use_weight_norm：可选参数，布尔值类型。该参数代表是否在tcn中使用weightnormalization，True使用，False不使用。默认值为False
de_last_activation：可选参数，字符串类型。该参数代表在decoder中最后一个dense层所使用的激活函数。对于分类问题，通常使用'sigmoid'(二分类)或者'softmax'(多分类)；对于回归问题，通常使用'tanh'。默认值为'tanh'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要输出每个预报因子对于预报值的预报贡献，'yes'代表输出，'no'代表不输出。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
covs:返回训练好的卷积层cov
encoders：返回训练好的编码器encoder
decoders：返回训练好的解码器decoder
lasts：返回训练好的解码器decoder后的网络层所组成的模型last
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.90 model,covs,encoders,decoders,lasts,predicty,testy,r,p,weights=Auto_paint_self.Auto_CNN_TCN_more_output(vy,vx,timestep,outputstep,model_list,dilations,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,cov_padding='same',cov_strides=1,pooling_padding='valid',pooling_strides=2,embedding_num=None,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,nb_filters=64,kernel_size=2,nb_stacks=1,padding='causal',dropout_rate=0.0,activation='tanh',kernel_initializer='he_normal',if_use_batch_norm=False,if_use_layer_norm=False,if_use_weight_norm=False,de_last_activation='sigmoid',if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifweight='yes',ifmute='no',ifrandom_split='yes',ifsave='no',savepath=None,device='cpu'):
该函数用于融合CNN和TCN多输出网络
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
outputstep:必要参数，整形。该参数代表预测vy的时次数目。例如等于5时代表预测vy向后的5个时次的值。
model_list：必要参数，tumple类型。该参数代表构建的网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['localcov',[64,3,3]]代表插入权重参数不共享的卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['tcn']代表插入时间卷积网络层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
dilations：必要参数，tumple类型。该参数代表扩张系数元组。通常按照固定的膨胀基数递增，例如[1,2,4,8,16,32]代表构建6层深度的tcn网络，每向上一层扩张系数增加2倍。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
pooling_padding：可选参数，该参数代表池化层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'valid'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
embedding_num：可选参数，整形。代表在decoder模块中编码数据的数目。对于分类问题，应该为类别+1，对于预测问题，该值在有限范围内越大越好。默认值为10000
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
nb_filters：可选参数，整形。该参数代表tcn网络的神经元个数，默认值为64
kernel_size：可选参数，整形。该参数代表tcn网络的卷积核大小，默认值为2
nb_stacks：可选参数，整形。该参数代表tcn网络的残差块堆叠数，默认值为1
padding：可选参数，字符串类型。该参数代表tcn网络是因果卷积还是非因果卷积，'causal'代表因果卷积，因果卷积代表不能够用未来预测现在；'same'或者'valid'代表非因果卷积，非因果卷代表可以用未来预测现在。默认值为'causal'
dropout_rate：可选参数，实型。该参数代表tcn随机丢弃数据/网络节点的比率，用于防止过拟合。默认值为0.0
activation：可选参数，字符串类型。该参数代表tcn网络使用的激活函数类型，更多可选项详情见tcn github官网。默认值为'tanh'
kernel_initializer：可选参数，字符串类型。该参数代表权重矩阵初始化方案，更多可选项详情见tcn github官网。默认值为'he_normal'
if_use_batch_norm：可选参数，布尔值类型。该参数代表是否在tcn中使用batchnormalization，True使用，False不使用。默认值为False
if_use_layer_norm：可选参数，布尔值类型。该参数代表是否在tcn中使用layernormalization，True使用，False不使用。默认值为False
if_use_weight_norm：可选参数，布尔值类型。该参数代表是否在tcn中使用weightnormalization，True使用，False不使用。默认值为False
de_last_activation：可选参数，字符串类型。该参数代表在decoder中最后一个dense层所使用的激活函数。对于分类问题，通常使用'sigmoid'(二分类)或者'softmax'(多分类)；对于回归问题，通常使用'tanh'。默认值为'tanh'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要输出每个预报因子对于预报值的预报贡献，'yes'代表输出，'no'代表不输出。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
covs:返回训练好的卷积层cov
encoders：返回训练好的编码器encoder
decoders：返回训练好的解码器decoder
lasts：返回训练好的解码器decoder后的网络层所组成的模型last
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.91 model,covs,encoders,decoders,lasts,predicty,testy,r,p,weights=Auto_paint_self.Auto_Resnet_Transformer_more_output(vy,vx,timestep,outputstep,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,cov_padding='same',cov_strides=1,residual_deep=1,residual_activation='relu',residual_norm='batchnormalization',pooling_padding='valid',pooling_strides=2,embedding_num=None,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,encoder_deep=1,decoder_deep=1,num_heads=2,key_dim=2,ifdropout='no',trans_dropout_rate=0.0,trans_units=64,trans_activation='sigmoid',de_last_activation='tanh',if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifrandom_split='yes',ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于融合Resnet和Transformer多输出网络
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
outputstep:必要参数，整形。该参数代表预测vy的时次数目。例如等于5时代表预测vy向后的5个时次的值。
model_list：必要参数，tumple类型。该参数代表构建的网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['localcov',[64,3,3]]代表插入权重参数不共享的卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['transformer']代表插入Transformer层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
residual_deep：可选参数，整形。该参数代表残差模块中包含几层（卷积层+激活函数+归一化层）模块，即残差模块深度。默认值为1
residual_activation：可选参数，字符串类型。该参数代表残差模块中所使用的激活函数。默认值为'relu'
residual_norm：可选参数，字符串类型。该参数代表残差模块中所使用的归一化方法。默认值为'batchnormalization'
pooling_padding：可选参数，该参数代表池化层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'valid'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
embedding_num：可选参数，整形。代表在decoder模块中编码数据的数目。对于分类问题，应该为类别+1，对于预测问题，该值在有限范围内越大越好。默认值为10000
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
encoder_deep：可选参数，整形。该参数代表函数中encoder层的数量，默认值为1
decoder_deep：可选参数，整形。该参数代表函数中decoder层的数量，默认值为1
num_heads：可选参数，整形。该参数代表多头自注意模块中头的数量。默认值为2
key_dim：可选参数，整形。该参数代表多头自注意模块中键的数量。默认值为2
ifdropout：可选参数，字符串类型。该函数代表transform模块中是否使用dropout。默认值为'no'
trans_dropout_rate：可选参数，实型。该参数代表transform模块中dropout的比率。默认值为0.0
trans_units：可选参数，整形。该参数代表transform模块内部的dense层的神经元个数。默认值为64
trans_activation：可选参数，字符串类型。该参数代表transform模块中的dense层激活函数，默认值为'sigmoid'
de_last_activation：可选参数，字符串类型。该参数代表在decoder中最后一个dense层所使用的激活函数。对于分类问题，通常使用'sigmoid'(二分类)或者'softmax'(多分类)；对于回归问题，通常使用'tanh'。默认值为'tanh'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要输出每个预报因子对于预报值的预报贡献，'yes'代表输出，'no'代表不输出。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
covs:返回训练好的卷积层cov
encoders：返回训练好的编码器encoder
decoders：返回训练好的解码器decoder
lasts：返回训练好的解码器decoder后的网络层所组成的模型last
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.92 model,encoders,decoders,lasts,predicty,testy,r,p,weights=Auto_paint_self.Auto_Transformer_more_output(vy,vx,timestep,outputstep,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,encoder_deep=1,decoder_deep=1,num_heads=2,key_dim=2,ifdropout='no',trans_dropout_rate=0.0,trans_units=64,trans_activation='sigmoid',de_last_activation='tanh',embedding_num=None,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifrandom_split='yes',ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构造Transformer多输出模型
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，其必须为一维的，只保留时间维度。
vx：必要参数，np.array类型。该参数代表预报因子的值，其必须为二维的，其中第一维为时间维度，与vy长度一致，第二维的长度和预报因子数量相同。vx由预报因子做空间平均后叠加，并且翻转第一维和第二维而成。
timestep：必要参数，整形。该参数代表预测vy所用到的vx提前时段，例如填写7代表用提前1-7个时次的vx预测vy。
outputstep:必要参数，整形。该参数代表预测vy的时次数目。例如等于5时代表预测vy向后的5个时次的值。
model_list：必要参数，tumple类型。该参数代表构建的时间卷积网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['transformer']代表插入Transformer层；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
encoder_deep：可选参数，整形。该参数代表函数中encoder层的数量，默认值为1
decoder_deep：可选参数，整形。该参数代表函数中decoder层的数量，默认值为1
num_heads：可选参数，整形。该参数代表多头自注意模块中头的数量。默认值为2
key_dim：可选参数，整形。该参数代表多头自注意模块中键的数量。默认值为2
ifdropout：可选参数，字符串类型。该函数代表transform模块中是否使用dropout。默认值为'no'
trans_dropout_rate：可选参数，实型。该参数代表transform模块中dropout的比率。默认值为0.0
trans_units：可选参数，整形。该参数代表transform模块内部的dense层的神经元个数。默认值为64
trans_activation：可选参数，字符串类型。该参数代表transform模块中的dense层激活函数，默认值为'sigmoid'
de_last_activation：可选参数，字符串类型。该参数代表在decoder中最后一个dense层所使用的激活函数。对于分类问题，通常使用'sigmoid'(二分类)或者'softmax'(多分类)；对于回归问题，通常使用'tanh'。默认值为'tanh'
embedding_num：可选参数，整形。代表在decoder模块中编码数据的数目。对于分类问题，应该为类别+1，对于预测问题，该值在有限范围内越大越好。默认值为10000
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
de_last_activation：可选参数，字符串类型。该参数代表在decoder中最后一个dense层所使用的激活函数。对于分类问题，通常使用'sigmoid'(二分类)或者'softmax'(多分类)；对于回归问题，通常使用'tanh'。默认值为'tanh'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifweight：可选参数，字符串类型。该参数代表是否要输出每个预报因子对于预报值的预报贡献，'yes'代表输出，'no'代表不输出。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
encoders：返回训练好的编码器encoder
decoders：返回训练好的解码器decoder
lasts：返回训练好的解码器decoder后的网络层所组成的模型last
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.93 model,covs,encoders,decoders,lasts,predicty,testy,r,p,weights=Auto_paint_self.Auto_CNN_Transformer_more_output(vy,vx,timestep,outputstep,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,cov_padding='same',cov_strides=1,pooling_padding='valid',pooling_strides=2,embedding_num=None,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,encoder_deep=1,decoder_deep=1,num_heads=2,key_dim=2,ifdropout='no',trans_dropout_rate=0.0,trans_units=64,trans_activation='sigmoid',de_last_activation='tanh',if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifrandom_split='yes',ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于融合CNN和Transformer多输出网络
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
outputstep:必要参数，整形。该参数代表预测vy的时次数目。例如等于5时代表预测vy向后的5个时次的值。
model_list：必要参数，tumple类型。该参数代表构建的网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['localcov',[64,3,3]]代表插入权重参数不共享的卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['transformer']代表插入Transformer层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
pooling_padding：可选参数，该参数代表池化层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'valid'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
embedding_num：可选参数，整形。代表在decoder模块中编码数据的数目。对于分类问题，应该为类别+1，对于预测问题，该值在有限范围内越大越好。默认值为10000
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
encoder_deep：可选参数，整形。该参数代表函数中encoder层的数量，默认值为1
decoder_deep：可选参数，整形。该参数代表函数中decoder层的数量，默认值为1
num_heads：可选参数，整形。该参数代表多头自注意模块中头的数量。默认值为2
key_dim：可选参数，整形。该参数代表多头自注意模块中键的数量。默认值为2
ifdropout：可选参数，字符串类型。该函数代表transform模块中是否使用dropout。默认值为'no'
trans_dropout_rate：可选参数，实型。该参数代表transform模块中dropout的比率。默认值为0.0
trans_units：可选参数，整形。该参数代表transform模块内部的dense层的神经元个数。默认值为64
trans_activation：可选参数，字符串类型。该参数代表transform模块中的dense层激活函数，默认值为'sigmoid'
de_last_activation：可选参数，字符串类型。该参数代表在decoder中最后一个dense层所使用的激活函数。对于分类问题，通常使用'sigmoid'(二分类)或者'softmax'(多分类)；对于回归问题，通常使用'tanh'。默认值为'tanh'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要输出每个预报因子对于预报值的预报贡献，'yes'代表输出，'no'代表不输出。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
covs:返回训练好的卷积层cov
encoders：返回训练好的编码器encoder
decoders：返回训练好的解码器decoder
lasts：返回训练好的解码器decoder后的网络层所组成的模型last
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.94 model,covs,encoders,decoders,lasts,predicty,testy,r,p,weights=Auto_paint_self.Auto_CNN_LSTMorGRUorRNN_more_output(vy,vx,timestep,outputstep,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,cov_padding='same',cov_strides=1,pooling_padding='valid',pooling_strides=2,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,units=64,dropout=0.0,recurrent_dropout=0.0,activation='tanh',recurrent_activation='sigmoid',de_last_activation='sigmoid',if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifweight='yes',ifmute='no',ifrandom_split='yes',ifsave='no',savepath=None,device='cpu')
该函数用于融合CNN和LSTM/GRU/RNN多输出网络
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
outputstep:必要参数，整形。该参数代表预测vy的时次数目。例如等于5时代表预测vy向后的5个时次的值。
model_list：必要参数，tumple类型。该参数代表构建的网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['localcov',[64,3,3]]代表插入权重参数不共享的卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['lstm']代表插入LSTM层；['gru']代表插入GRU层；['rnn']代表插入RNN层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
pooling_padding：可选参数，该参数代表池化层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'valid'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
units：可选参数，整形。该参数代表网络的内部循环的神经元个数。默认值为64
dropout：可选参数，实型。该参数代表网络外部循环的数据丢弃值，例如0.1代表丢弃百分之10的数据用于防止过拟合。默认值为0.0
recurrent_dropout：可选参数，实型。该参数代表网络内部循环的数据丢弃值，例如0.1代表丢弃百分之10的数据用于防止过拟合。默认值为0.0
activation：可选参数，字符串类型。该参数用于代表网络外部循环所使用的激活函数。默认值为'tanh'
recurrent_activation：可选参数，字符串类型。该参数用于代表网络内部循环所使用的激活函数。默认值为'sigmoid'
de_last_activation：可选参数，字符串类型。该参数代表在decoder中最后一个dense层所使用的激活函数。对于分类问题，通常使用'sigmoid'(二分类)或者'softmax'(多分类)；对于回归问题，通常使用'tanh'。默认值为'tanh'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifweight：可选参数，字符串类型。该参数代表是否要输出每个预报因子对于预报值的预报贡献，'yes'代表输出，'no'代表不输出。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
covs:返回训练好的卷积层cov
encoders：返回训练好的编码器encoder
decoders：返回训练好的解码器decoder
lasts：返回训练好的解码器decoder后的网络层所组成的模型last
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None


2.95 model,encoders,decoders,lasts,predicty,testy,r,p,weights=Auto_paint_self.Auto_LSTMorGRUorRNN_more_output(vy,vx,timestep,outputstep,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,units=64,dropout=0.0,recurrent_dropout=0.0,activation='tanh',recurrent_activation='sigmoid',de_last_activation='sigmoid',if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifweight='yes',ifmute='no',ifrandom_split='yes',ifsave='no',savepath=None,device='cpu')
该函数用于构造LSTM/GRU/RNN多输出网络
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，其必须为一维的，只保留时间维度。
vx：必要参数，np.array类型。该参数代表预报因子的值，其必须为二维的，其中第一维为时间维度，与vy长度一致，第二维的长度和预报因子数量相同。vx由预报因子做空间平均后叠加，并且翻转第一维和第二维而成。
timestep：必要参数，整形。该参数代表预测vy所用到的vx提前时段，例如填写7代表用提前1-7个时次的vx预测vy。
outputstep:必要参数，整形。该参数代表预测vy的时次数目。例如等于5时代表预测vy向后的5个时次的值。
model_list：必要参数，tumple类型。该参数代表构建的时间卷积网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['lstm']代表插入LSTM层；['gru']代表插入GRU层；['rnn']代表插入RNN层；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
units：可选参数，整形。该参数代表网络的内部循环的神经元个数。默认值为64
dropout：可选参数，实型。该参数代表网络外部循环的数据丢弃值，例如0.1代表丢弃百分之10的数据用于防止过拟合。默认值为0.0
recurrent_dropout：可选参数，实型。该参数代表网络内部循环的数据丢弃值，例如0.1代表丢弃百分之10的数据用于防止过拟合。默认值为0.0
activation：可选参数，字符串类型。该参数用于代表网络外部循环所使用的激活函数。默认值为'tanh'
recurrent_activation：可选参数，字符串类型。该参数用于代表网络内部循环所使用的激活函数。默认值为'sigmoid'
de_last_activation：可选参数，字符串类型。该参数代表在decoder中最后一个dense层所使用的激活函数。对于分类问题，通常使用'sigmoid'(二分类)或者'softmax'(多分类)；对于回归问题，通常使用'tanh'。默认值为'tanh'
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifweight：可选参数，字符串类型。该参数代表是否使用贡献率作为挑选预报因子的标准，'yes'代表是，'no'代表否。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
encoders：返回训练好的编码器encoder
decoders：返回训练好的解码器decoder
lasts：返回训练好的解码器decoder后的网络层所组成的模型last
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.96 model,covs,encoders,decoders,lasts,predicty,testy,r,p,weights=Auto_paint_self.Auto_Resnet_LSTMorGRUorRNN_more_output(vy,vx,timestep,outputstep,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,cov_padding='same',cov_strides=1,residual_deep=1,residual_activation='relu',residual_norm='batchnormalization',pooling_padding='valid',pooling_strides=2,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,units=64,dropout=0.0,recurrent_dropout=0.0,activation='tanh',recurrent_activation='sigmoid',de_last_activation='sigmoid',if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifweight='yes',ifmute='no',ifrandom_split='yes',ifsave='no',savepath=None,device='cpu'):
该函数用于融合Resnet和LSTM/GRU/RNN网络
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
outputstep:必要参数，整形。该参数代表预测vy的时次数目。例如等于5时代表预测vy向后的5个时次的值。
model_list：必要参数，tumple类型。该参数代表构建的网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['localcov',[64,3,3]]代表插入权重参数不共享的卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['lstm']代表插入LSTM层；['gru']代表插入GRU层；['rnn']代表插入RNN层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
residual_deep：可选参数，整形。该参数代表残差模块中包含几层（卷积层+激活函数+归一化层）模块，即残差模块深度。默认值为1
residual_activation：可选参数，字符串类型。该参数代表残差模块中所使用的激活函数。默认值为'relu'
residual_norm：可选参数，字符串类型。该参数代表残差模块中所使用的归一化方法。默认值为'batchnormalization'
pooling_padding：可选参数，该参数代表池化层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'valid'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
units：可选参数，整形。该参数代表网络的内部循环的神经元个数。默认值为64
dropout：可选参数，实型。该参数代表网络外部循环的数据丢弃值，例如0.1代表丢弃百分之10的数据用于防止过拟合。默认值为0.0
recurrent_dropout：可选参数，实型。该参数代表网络内部循环的数据丢弃值，例如0.1代表丢弃百分之10的数据用于防止过拟合。默认值为0.0
activation：可选参数，字符串类型。该参数用于代表网络外部循环所使用的激活函数。默认值为'tanh'
recurrent_activation：可选参数，字符串类型。该参数用于代表网络内部循环所使用的激活函数。默认值为'sigmoid'
de_last_activation：可选参数，字符串类型。该参数代表在decoder中最后一个dense层所使用的激活函数。对于分类问题，通常使用'sigmoid'(二分类)或者'softmax'(多分类)；对于回归问题，通常使用'tanh'。默认值为'tanh'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifweight：可选参数，字符串类型。该参数代表是否要输出每个预报因子对于预报值的预报贡献，'yes'代表输出，'no'代表不输出。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
covs:返回训练好的卷积层cov
encoders：返回训练好的编码器encoder
decoders：返回训练好的解码器decoder
lasts：返回训练好的解码器decoder后的网络层所组成的模型last
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.97 sudden_drought_time,sudden_drought_developtime,sudden_drought_developrate,sudden_drought_min,sudden_drought_durationtime,sudden_drought_recovertime,sudden_drought_endtime,sudden_drought_alltime=Auto_paint_self.Auto_sudden_drought(v,times,if_quantiles='yes',timespace='day')
该程序用于识别骤旱（根据Liu etal,2020）
输入值：
v：必要参数，np.array类型或者xr.Dataarray类型。该参数代表识别骤旱所用到的土壤湿度数据。既可以是一维的，也可以是三维的。但是推荐使用一维数据（三维数据运行速度会较慢）
times：必要参数，np.array类型或者xr.Dataarray类型。该参数代表变量v的时间维数据，为一维数据。
if_quantiles：可选参数，字符串类型。该参数代表输入的数据是否要计算分位数，若为'yes'代表输入的数据是原始的土壤湿度数据，需要计算分位数。若为'no'则代表输入的数据本身就是分位数数据，不需要计算分位数。默认值为'yes'
timespace：可选参数，字符串类型。该参数代表输入数据的时间间隔，若为'day'代表输入为日数据，需要处理成候数据。输入'5day'则代表输入的数据本身为候数据，不需要处理。默认值为'day'
返回值：
sudden_drought_time：返回每次骤旱的开始时间
sudden_drought_developtime：返回每次骤旱的发展时间
sudden_drought_developrate：返回每次骤旱的发展速度
sudden_drought_min：返回每次骤旱的土壤水含量百分位最小值
sudden_drought_durationtime：返回每次骤旱的持续时间
sudden_drought_recovertime：返回每次骤旱的回复时间
sudden_drought_endtime：返回每次骤旱的结束时间
sudden_drought_alltime：返回每次骤旱的总时间（总时间=发展时间+持续时间+回复时间+结束时间）

2.98 model,predicty,testy,r,p,heatmap,weights=Auto_paint_self.Auto_Multi_Scale_CNN(vy,vx,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,ifrandom_split='yes',cov_padding='same',cov_strides=1,pooling_padding='valid',pooling_strides=2,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifheatmap='yes',ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构建多尺度卷积神经网络
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的神经网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['localcov',[64,3,3]]代表插入权重参数不共享的卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
pooling_padding：可选参数，该参数代表池化层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'valid'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifheatmap：可选参数，字符串类型。该参数代表是否要返回贡献率图heatmap，'yes'代表返回，填写其他值代表不返回（返回结果为None）。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'或者'shap'代表使用shap库计算贡献率，填写'oob'代表使用oob方法计算贡献率，填写'no'代表不计算贡献率。默认值为'yes'代表使用shap方法计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型model
predicty：返回测试集预测值y'
testy：返回测试集真实值vy
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
heatmap：返回贡献图heatmap，仅在ifheatmap为'yes'时有值，否则为None
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.99 model,predicty,testy,r,p,heatmap,weights=Auto_paint_self.Auto_Multi_Scale_CNN_LSTMorGRUorRNN(vy,vx,timestep,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,cov_padding='same',cov_strides=1,pooling_padding='valid',pooling_strides=2,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,units=64,dropout=0.0,recurrent_dropout=0.0,activation='tanh',recurrent_activation='sigmoid',if_print_model='yes',loss_function='default',if_print_model='yes',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifmute='no',ifrandom_split='yes',ifheatmap='yes',ifweight='yes',ifsave='no',savepath=None,device='cpu')
该函数用于融合多尺度CNN和LSTM/GRU/RNN网络
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['localcov',[64,3,3]]代表插入权重参数不共享的卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['lstm']代表插入LSTM层；['gru']代表插入GRU层；['rnn']代表插入RNN层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
pooling_padding：可选参数，该参数代表池化层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'valid'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
units：可选参数，整形。该参数代表网络的内部循环的神经元个数。默认值为64
dropout：可选参数，实型。该参数代表网络外部循环的数据丢弃值，例如0.1代表丢弃百分之10的数据用于防止过拟合。默认值为0.0
recurrent_dropout：可选参数，实型。该参数代表网络内部循环的数据丢弃值，例如0.1代表丢弃百分之10的数据用于防止过拟合。默认值为0.0
activation：可选参数，字符串类型。该参数用于代表网络外部循环所使用的激活函数。默认值为'tanh'
recurrent_activation：可选参数，字符串类型。该参数用于代表网络内部循环所使用的激活函数。默认值为'sigmoid'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifheatmap：可选参数，字符串类型。该参数代表是否要返回贡献率图heatmap，'yes'代表返回，填写其他值代表不返回（返回结果为None）。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'或者'shap'代表使用shap库计算贡献率，填写'oob'代表使用oob方法计算贡献率，填写'no'代表不计算贡献率。默认值为'yes'代表使用shap方法计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
heatmap：返回贡献图heatmap，仅在ifheatmap为'yes'时有值，否则为None
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.100 model,covs,encoders,decoders,lasts,predicty,testy,r,p,weights=Auto_paint_self.Auto_Multi_Scale_CNN_LSTMorGRUorRNN_more_output(vy,vx,timestep,outputstep,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,cov_padding='same',cov_strides=1,pooling_padding='valid',pooling_strides=2,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,units=64,dropout=0.0,recurrent_dropout=0.0,activation='tanh',recurrent_activation='sigmoid',de_last_activation='sigmoid',if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifweight='yes',ifmute='no',ifrandom_split='yes',ifsave='no',savepath=None,device='cpu')
该函数用于融合多尺度CNN和LSTM/GRU/RNN多输出网络
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
outputstep:必要参数，整形。该参数代表预测vy的时次数目。例如等于5时代表预测vy向后的5个时次的值。
model_list：必要参数，tumple类型。该参数代表构建的网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['localcov',[64,3,3]]代表插入权重参数不共享的卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['lstm']代表插入LSTM层；['gru']代表插入GRU层；['rnn']代表插入RNN层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
pooling_padding：可选参数，该参数代表池化层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'valid'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
units：可选参数，整形。该参数代表网络的内部循环的神经元个数。默认值为64
dropout：可选参数，实型。该参数代表网络外部循环的数据丢弃值，例如0.1代表丢弃百分之10的数据用于防止过拟合。默认值为0.0
recurrent_dropout：可选参数，实型。该参数代表网络内部循环的数据丢弃值，例如0.1代表丢弃百分之10的数据用于防止过拟合。默认值为0.0
activation：可选参数，字符串类型。该参数用于代表网络外部循环所使用的激活函数。默认值为'tanh'
recurrent_activation：可选参数，字符串类型。该参数用于代表网络内部循环所使用的激活函数。默认值为'sigmoid'
de_last_activation：可选参数，字符串类型。该参数代表在decoder中最后一个dense层所使用的激活函数。对于分类问题，通常使用'sigmoid'(二分类)或者'softmax'(多分类)；对于回归问题，通常使用'tanh'。默认值为'tanh'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifweight：可选参数，字符串类型。该参数代表是否要输出每个预报因子对于预报值的预报贡献，'yes'代表输出，'no'代表不输出。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
covs:返回训练好的卷积层cov
encoders：返回训练好的编码器encoder
decoders：返回训练好的解码器decoder
lasts：返回训练好的解码器decoder后的网络层所组成的模型last
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.101 model,predicty,testy,r,p,heatmap,weights=Auto_paint_self.Auto_Multi_Scale_CNN_TCN(vy,vx,timestep,model_list,dilations,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,cov_padding='same',cov_strides=1,pooling_padding='valid',pooling_strides=2,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,nb_filters=64,kernel_size=2,nb_stacks=1,padding='causal',dropout_rate=0.0,activation='tanh',kernel_initializer='he_normal',if_use_batch_norm=False,if_use_layer_norm=False,if_use_weight_norm=False,if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifrandom_split='yes',ifheatmap='yes',ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于融合多尺度CNN和TCN网络
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['localcov',[64,3,3]]代表插入权重参数不共享的卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['tcn']代表插入时间卷积网络层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
dilations：必要参数，tumple类型。该参数代表扩张系数元组。通常按照固定的膨胀基数递增，例如[1,2,4,8,16,32]代表构建6层深度的tcn网络，每向上一层扩张系数增加2倍。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
pooling_padding：可选参数，该参数代表池化层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'valid'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
nb_filters：可选参数，整形。该参数代表tcn网络的神经元个数，默认值为64
kernel_size：可选参数，整形。该参数代表tcn网络的卷积核大小，默认值为2
nb_stacks：可选参数，整形。该参数代表tcn网络的残差块堆叠数，默认值为1
padding：可选参数，字符串类型。该参数代表tcn网络是因果卷积还是非因果卷积，'causal'代表因果卷积，因果卷积代表不能够用未来预测现在；'same'或者'valid'代表非因果卷积，非因果卷代表可以用未来预测现在。默认值为'causal'
dropout_rate：可选参数，实型。该参数代表tcn随机丢弃数据/网络节点的比率，用于防止过拟合。默认值为0.0
activation：可选参数，字符串类型。该参数代表tcn网络使用的激活函数类型，更多可选项详情见tcn github官网。默认值为'tanh'
kernel_initializer：可选参数，字符串类型。该参数代表权重矩阵初始化方案，更多可选项详情见tcn github官网。默认值为'he_normal'
if_use_batch_norm：可选参数，布尔值类型。该参数代表是否在tcn中使用batchnormalization，True使用，False不使用。默认值为False
if_use_layer_norm：可选参数，布尔值类型。该参数代表是否在tcn中使用layernormalization，True使用，False不使用。默认值为False
if_use_weight_norm：可选参数，布尔值类型。该参数代表是否在tcn中使用weightnormalization，True使用，False不使用。默认值为False
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifheatmap：可选参数，字符串类型。该参数代表是否要返回贡献率图heatmap，'yes'代表返回，填写其他值代表不返回（返回结果为None）。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'或者'shap'代表使用shap库计算贡献率，填写'oob'代表使用oob方法计算贡献率，填写'no'代表不计算贡献率。默认值为'yes'代表使用shap方法计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
heatmap：返回贡献图heatmap，仅在ifheatmap为'yes'时有值，否则为None
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.102 model,covs,encoders,decoders,lasts,predicty,testy,r,p,weights=Auto_paint_self.Auto_Multi_Scale_CNN_TCN_more_output(vy,vx,timestep,outputstep,model_list,dilations,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,cov_padding='same',cov_strides=1,pooling_padding='valid',pooling_strides=2,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,nb_filters=64,kernel_size=2,nb_stacks=1,padding='causal',dropout_rate=0.0,activation='tanh',kernel_initializer='he_normal',if_use_batch_norm=False,if_use_layer_norm=False,if_use_weight_norm=False,de_last_activation='sigmoid',if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifweight='yes',ifmute='no',ifrandom_split='yes',ifsave='no',savepath=None,device='cpu'):
该函数用于融合多尺度CNN和TCN多输出网络
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
outputstep:必要参数，整形。该参数代表预测vy的时次数目。例如等于5时代表预测vy向后的5个时次的值。
model_list：必要参数，tumple类型。该参数代表构建的网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['localcov',[64,3,3]]代表插入权重参数不共享的卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['tcn']代表插入时间卷积网络层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
dilations：必要参数，tumple类型。该参数代表扩张系数元组。通常按照固定的膨胀基数递增，例如[1,2,4,8,16,32]代表构建6层深度的tcn网络，每向上一层扩张系数增加2倍。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
pooling_padding：可选参数，该参数代表池化层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'valid'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
nb_filters：可选参数，整形。该参数代表tcn网络的神经元个数，默认值为64
kernel_size：可选参数，整形。该参数代表tcn网络的卷积核大小，默认值为2
nb_stacks：可选参数，整形。该参数代表tcn网络的残差块堆叠数，默认值为1
padding：可选参数，字符串类型。该参数代表tcn网络是因果卷积还是非因果卷积，'causal'代表因果卷积，因果卷积代表不能够用未来预测现在；'same'或者'valid'代表非因果卷积，非因果卷代表可以用未来预测现在。默认值为'causal'
dropout_rate：可选参数，实型。该参数代表tcn随机丢弃数据/网络节点的比率，用于防止过拟合。默认值为0.0
activation：可选参数，字符串类型。该参数代表tcn网络使用的激活函数类型，更多可选项详情见tcn github官网。默认值为'tanh'
kernel_initializer：可选参数，字符串类型。该参数代表权重矩阵初始化方案，更多可选项详情见tcn github官网。默认值为'he_normal'
if_use_batch_norm：可选参数，布尔值类型。该参数代表是否在tcn中使用batchnormalization，True使用，False不使用。默认值为False
if_use_layer_norm：可选参数，布尔值类型。该参数代表是否在tcn中使用layernormalization，True使用，False不使用。默认值为False
if_use_weight_norm：可选参数，布尔值类型。该参数代表是否在tcn中使用weightnormalization，True使用，False不使用。默认值为False
de_last_activation：可选参数，字符串类型。该参数代表在decoder中最后一个dense层所使用的激活函数。对于分类问题，通常使用'sigmoid'(二分类)或者'softmax'(多分类)；对于回归问题，通常使用'tanh'。默认值为'tanh'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要输出每个预报因子对于预报值的预报贡献，'yes'代表输出，'no'代表不输出。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
covs:返回训练好的卷积层cov
encoders：返回训练好的编码器encoder
decoders：返回训练好的解码器decoder
lasts：返回训练好的解码器decoder后的网络层所组成的模型last
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.103 model,predicty,testy,r,p,weights=Auto_paint_self.Auto_Multi_Scale_CNN_Transformer(vy,vx,timestep,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,cov_padding='same',cov_strides=1,pooling_padding='valid',pooling_strides=2,embedding_num=None,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,encoder_deep=1,num_heads=2,key_dim=2,ifdropout='no',trans_dropout_rate=0.0,trans_units=64,trans_activation='sigmoid',if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifrandom_split='yes',ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于融合多尺度CNN和Transformer网络
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['localcov',[64,3,3]]代表插入权重参数不共享的卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['transformer']代表插入Transformer层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
pooling_padding：可选参数，该参数代表池化层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'valid'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
embedding_num：可选参数，代表在decoder模块中编码数据的数目。对于分类问题，应该为类别+1，对于预测问题，该值在有限范围内越大越好。默认值为10000
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
encoder_deep：可选参数，整形。该参数代表函数中encoder层的数量，默认值为1
num_heads：可选参数，整形。该参数代表多头自注意模块中头的数量。默认值为2
key_dim：可选参数，整形。该参数代表多头自注意模块中键的数量。默认值为2
ifdropout：可选参数，字符串类型。该函数代表transform模块中是否使用dropout。默认值为'no'
trans_dropout_rate：可选参数，实型。该参数代表transform模块中dropout的比率。默认值为0.0
trans_units：可选参数，整形。该参数代表transform模块内部的dense层的神经元个数。默认值为64
trans_activation：可选参数，字符串类型。该参数代表transform模块中的dense层激活函数，默认值为'sigmoid'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要输出每个预报因子对于预报值的预报贡献，'yes'代表输出，'no'代表不输出。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.104 model,covs,encoders,decoders,lasts,predicty,testy,r,p,weights=Auto_paint_self.Auto_Multi_Scale_CNN_Transformer_more_output(vy,vx,timestep,outputstep,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,cov_padding='same',cov_strides=1,pooling_padding='valid',pooling_strides=2,embedding_num=None,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,encoder_deep=1,decoder_deep=1,num_heads=2,key_dim=2,ifdropout='no',trans_dropout_rate=0.0,trans_units=64,trans_activation='sigmoid',de_last_activation='tanh',if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifrandom_split='yes',ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于融合多尺度CNN和Transformer多输出网络
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
outputstep:必要参数，整形。该参数代表预测vy的时次数目。例如等于5时代表预测vy向后的5个时次的值。
model_list：必要参数，tumple类型。该参数代表构建的网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['localcov',[64,3,3]]代表插入权重参数不共享的卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['transformer']代表插入Transformer层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
pooling_padding：可选参数，该参数代表池化层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'valid'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
embedding_num：可选参数，整形。代表在decoder模块中编码数据的数目。对于分类问题，应该为类别+1，对于预测问题，该值在有限范围内越大越好。默认值为10000
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
encoder_deep：可选参数，整形。该参数代表函数中encoder层的数量，默认值为1
decoder_deep：可选参数，整形。该参数代表函数中decoder层的数量，默认值为1
num_heads：可选参数，整形。该参数代表多头自注意模块中头的数量。默认值为2
key_dim：可选参数，整形。该参数代表多头自注意模块中键的数量。默认值为2
ifdropout：可选参数，字符串类型。该函数代表transform模块中是否使用dropout。默认值为'no'
trans_dropout_rate：可选参数，实型。该参数代表transform模块中dropout的比率。默认值为0.0
trans_units：可选参数，整形。该参数代表transform模块内部的dense层的神经元个数。默认值为64
trans_activation：可选参数，字符串类型。该参数代表transform模块中的dense层激活函数，默认值为'sigmoid'
de_last_activation：可选参数，字符串类型。该参数代表在decoder中最后一个dense层所使用的激活函数。对于分类问题，通常使用'sigmoid'(二分类)或者'softmax'(多分类)；对于回归问题，通常使用'tanh'。默认值为'tanh'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要输出每个预报因子对于预报值的预报贡献，'yes'代表输出，'no'代表不输出。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
covs:返回训练好的卷积层cov
encoders：返回训练好的编码器encoder
decoders：返回训练好的解码器decoder
lasts：返回训练好的解码器decoder后的网络层所组成的模型last
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.105 model,predicty,testy,r,p,heatmap,weights=Auto_paint_self.Auto_Multi_Scale_Resnet(vy,vx,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,ifrandom_split='yes',cov_padding='same',cov_strides=1,residual_deep=1,residual_activation='relu',residual_norm='batchnormalization',pooling_padding='valid',pooling_strides=2,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifheatmap='yes',ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构建多尺度Resnet网络
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的Resnet架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['localcov',[64,3,3]]代表插入权重参数不共享的卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
residual_deep：可选参数，整形。该参数代表残差模块中包含几层（卷积层+激活函数+归一化层）模块，即残差模块深度。默认值为1
residual_activation：可选参数，字符串类型。该参数代表残差模块中所使用的激活函数。默认值为'relu'
residual_norm：可选参数，字符串类型。该参数代表残差模块中所使用的归一化方法。默认值为'batchnormalization'
pooling_padding：可选参数，该参数代表池化层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'valid'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifheatmap：可选参数，字符串类型。该参数代表是否要返回贡献率图heatmap，'yes'代表返回，填写其他值代表不返回（返回结果为None）。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'或者'shap'代表使用shap库计算贡献率，填写'oob'代表使用oob方法计算贡献率，填写'no'代表不计算贡献率。默认值为'yes'代表使用shap方法计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型model
predicty：返回测试集预测值y'
testy：返回测试集真实值vy
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
heatmap：返回贡献图heatmap，仅在ifheatmap为'yes'时有值，否则为None
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.106 model,predicty,testy,r,p,heatmap,weights=Auto_paint_self.Auto_Multi_Scale_Resnet_LSTMorGRUorRNN(vy,vx,timestep,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,cov_padding='same',cov_strides=1,residual_deep=1,residual_activation='relu',residual_norm='batchnormalization',pooling_padding='valid',pooling_strides=2,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,units=64,dropout=0.0,recurrent_dropout=0.0,activation='tanh',recurrent_activation='sigmoid',if_print_model='yes',loss_function='default',if_print_model='yes',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifheatmap='yes',ifweight='yes',ifmute='no',ifrandom_split='yes',ifsave='no',savepath=None,device='cpu')
该函数用于融合多尺度Resnet和LSTM/GRU/RNN网络
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['localcov',[64,3,3]]代表插入权重参数不共享的卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['lstm']代表插入LSTM层；['gru']代表插入GRU层；['rnn']代表插入RNN层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
residual_deep：可选参数，整形。该参数代表残差模块中包含几层（卷积层+激活函数+归一化层）模块，即残差模块深度。默认值为1
residual_activation：可选参数，字符串类型。该参数代表残差模块中所使用的激活函数。默认值为'relu'
residual_norm：可选参数，字符串类型。该参数代表残差模块中所使用的归一化方法。默认值为'batchnormalization'
pooling_padding：可选参数，该参数代表池化层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'valid'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
units：可选参数，整形。该参数代表网络的内部循环的神经元个数。默认值为64
dropout：可选参数，实型。该参数代表网络外部循环的数据丢弃值，例如0.1代表丢弃百分之10的数据用于防止过拟合。默认值为0.0
recurrent_dropout：可选参数，实型。该参数代表网络内部循环的数据丢弃值，例如0.1代表丢弃百分之10的数据用于防止过拟合。默认值为0.0
activation：可选参数，字符串类型。该参数用于代表网络外部循环所使用的激活函数。默认值为'tanh'
recurrent_activation：可选参数，字符串类型。该参数用于代表网络内部循环所使用的激活函数。默认值为'sigmoid'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifheatmap：可选参数，字符串类型。该参数代表是否要返回贡献率图heatmap，'yes'代表返回，填写其他值代表不返回（返回结果为None）。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'或者'shap'代表使用shap库计算贡献率，填写'oob'代表使用oob方法计算贡献率，填写'no'代表不计算贡献率。默认值为'yes'代表使用shap方法计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
heatmap：返回贡献图heatmap，仅在ifheatmap为'yes'时有值，否则为None
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.107 model,covs,encoders,decoders,lasts,predicty,testy,r,p,weights=Auto_paint_self.Auto_Multi_Scale_Resnet_LSTMorGRUorRNN_more_output(vy,vx,timestep,outputstep,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,cov_padding='same',cov_strides=1,residual_deep=1,residual_activation='relu',residual_norm='batchnormalization',pooling_padding='valid',pooling_strides=2,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,units=64,dropout=0.0,recurrent_dropout=0.0,activation='tanh',recurrent_activation='sigmoid',de_last_activation='sigmoid',if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifweight='yes',ifmute='no',ifrandom_split='yes',ifsave='no',savepath=None,device='cpu'):
该函数用于融合多尺度Resnet和LSTM/GRU/RNN网络
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
outputstep:必要参数，整形。该参数代表预测vy的时次数目。例如等于5时代表预测vy向后的5个时次的值。
model_list：必要参数，tumple类型。该参数代表构建的网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['localcov',[64,3,3]]代表插入权重参数不共享的卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['lstm']代表插入LSTM层；['gru']代表插入GRU层；['rnn']代表插入RNN层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
residual_deep：可选参数，整形。该参数代表残差模块中包含几层（卷积层+激活函数+归一化层）模块，即残差模块深度。默认值为1
residual_activation：可选参数，字符串类型。该参数代表残差模块中所使用的激活函数。默认值为'relu'
residual_norm：可选参数，字符串类型。该参数代表残差模块中所使用的归一化方法。默认值为'batchnormalization'
pooling_padding：可选参数，该参数代表池化层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'valid'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
units：可选参数，整形。该参数代表网络的内部循环的神经元个数。默认值为64
dropout：可选参数，实型。该参数代表网络外部循环的数据丢弃值，例如0.1代表丢弃百分之10的数据用于防止过拟合。默认值为0.0
recurrent_dropout：可选参数，实型。该参数代表网络内部循环的数据丢弃值，例如0.1代表丢弃百分之10的数据用于防止过拟合。默认值为0.0
activation：可选参数，字符串类型。该参数用于代表网络外部循环所使用的激活函数。默认值为'tanh'
recurrent_activation：可选参数，字符串类型。该参数用于代表网络内部循环所使用的激活函数。默认值为'sigmoid'
de_last_activation：可选参数，字符串类型。该参数代表在decoder中最后一个dense层所使用的激活函数。对于分类问题，通常使用'sigmoid'(二分类)或者'softmax'(多分类)；对于回归问题，通常使用'tanh'。默认值为'tanh'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifweight：可选参数，字符串类型。该参数代表是否要输出每个预报因子对于预报值的预报贡献，'yes'代表输出，'no'代表不输出。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
covs:返回训练好的卷积层cov
encoders：返回训练好的编码器encoder
decoders：返回训练好的解码器decoder
lasts：返回训练好的解码器decoder后的网络层所组成的模型last
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.108 model,predicty,testy,r,p,heatmap,weights=Auto_paint_self.Auto_Multi_Scale_Resnet_TCN(vy,vx,timestep,model_list,dilations,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,cov_padding='same',cov_strides=1,residual_deep=1,residual_activation='relu',residual_norm='batchnormalization',pooling_padding='valid',pooling_strides=2,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,nb_filters=64,kernel_size=2,nb_stacks=1,padding='causal',dropout_rate=0.0,activation='tanh',kernel_initializer='he_normal',if_use_batch_norm=False,if_use_layer_norm=False,if_use_weight_norm=False,if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifrandom_split='yes',ifheatmap='yes',ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于融合多尺度Resnet和TCN网络
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['localcov',[64,3,3]]代表插入权重参数不共享的卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['tcn']代表插入时间卷积网络层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
dilations：必要参数，tumple类型。该参数代表扩张系数元组。通常按照固定的膨胀基数递增，例如[1,2,4,8,16,32]代表构建6层深度的tcn网络，每向上一层扩张系数增加2倍。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
residual_deep：可选参数，整形。该参数代表残差模块中包含几层（卷积层+激活函数+归一化层）模块，即残差模块深度。默认值为1
residual_activation：可选参数，字符串类型。该参数代表残差模块中所使用的激活函数。默认值为'relu'
residual_norm：可选参数，字符串类型。该参数代表残差模块中所使用的归一化方法。默认值为'batchnormalization'
pooling_padding：可选参数，该参数代表池化层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'valid'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
nb_filters：可选参数，整形。该参数代表tcn网络的神经元个数，默认值为64
kernel_size：可选参数，整形。该参数代表tcn网络的卷积核大小，默认值为2
nb_stacks：可选参数，整形。该参数代表tcn网络的残差块堆叠数，默认值为1
padding：可选参数，字符串类型。该参数代表tcn网络是因果卷积还是非因果卷积，'causal'代表因果卷积，因果卷积代表不能够用未来预测现在；'same'或者'valid'代表非因果卷积，非因果卷代表可以用未来预测现在。默认值为'causal'
dropout_rate：可选参数，实型。该参数代表tcn随机丢弃数据/网络节点的比率，用于防止过拟合。默认值为0.0
activation：可选参数，字符串类型。该参数代表tcn网络使用的激活函数类型，更多可选项详情见tcn github官网。默认值为'tanh'
kernel_initializer：可选参数，字符串类型。该参数代表权重矩阵初始化方案，更多可选项详情见tcn github官网。默认值为'he_normal'
if_use_batch_norm：可选参数，布尔值类型。该参数代表是否在tcn中使用batchnormalization，True使用，False不使用。默认值为False
if_use_layer_norm：可选参数，布尔值类型。该参数代表是否在tcn中使用layernormalization，True使用，False不使用。默认值为False
if_use_weight_norm：可选参数，布尔值类型。该参数代表是否在tcn中使用weightnormalization，True使用，False不使用。默认值为False
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifheatmap：可选参数，字符串类型。该参数代表是否要返回贡献率图heatmap，'yes'代表返回，填写其他值代表不返回（返回结果为None）。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'或者'shap'代表使用shap库计算贡献率，填写'oob'代表使用oob方法计算贡献率，填写'no'代表不计算贡献率。默认值为'yes'代表使用shap方法计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
heatmap：返回贡献图heatmap，仅在ifheatmap为'yes'时有值，否则为None
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.109 model,covs,encoders,decoders,lasts,predicty,testy,r,p,weights=Auto_paint_self.Auto_Multi_Scale_Resnet_TCN_more_output(vy,vx,timestep,outputstep,model_list,dilations,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,cov_padding='same',cov_strides=1,residual_deep=1,residual_activation='relu',residual_norm='batchnormalization',pooling_padding='valid',pooling_strides=2,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,nb_filters=64,kernel_size=2,nb_stacks=1,padding='causal',dropout_rate=0.0,activation='tanh',kernel_initializer='he_normal',if_use_batch_norm=False,if_use_layer_norm=False,if_use_weight_norm=False,de_last_activation='sigmoid',if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifweight='yes',ifmute='no',ifrandom_split='yes',ifsave='no',savepath=None,device='cpu')
该函数用于融合多尺度Resnet和TCN多输出网络
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
outputstep:必要参数，整形。该参数代表预测vy的时次数目。例如等于5时代表预测vy向后的5个时次的值。
model_list：必要参数，tumple类型。该参数代表构建的网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['localcov',[64,3,3]]代表插入权重参数不共享的卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['tcn']代表插入时间卷积网络层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
dilations：必要参数，tumple类型。该参数代表扩张系数元组。通常按照固定的膨胀基数递增，例如[1,2,4,8,16,32]代表构建6层深度的tcn网络，每向上一层扩张系数增加2倍。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
residual_deep：可选参数，整形。该参数代表残差模块中包含几层（卷积层+激活函数+归一化层）模块，即残差模块深度。默认值为1
residual_activation：可选参数，字符串类型。该参数代表残差模块中所使用的激活函数。默认值为'relu'
residual_norm：可选参数，字符串类型。该参数代表残差模块中所使用的归一化方法。默认值为'batchnormalization'
pooling_padding：可选参数，该参数代表池化层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'valid'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
nb_filters：可选参数，整形。该参数代表tcn网络的神经元个数，默认值为64
kernel_size：可选参数，整形。该参数代表tcn网络的卷积核大小，默认值为2
nb_stacks：可选参数，整形。该参数代表tcn网络的残差块堆叠数，默认值为1
padding：可选参数，字符串类型。该参数代表tcn网络是因果卷积还是非因果卷积，'causal'代表因果卷积，因果卷积代表不能够用未来预测现在；'same'或者'valid'代表非因果卷积，非因果卷代表可以用未来预测现在。默认值为'causal'
dropout_rate：可选参数，实型。该参数代表tcn随机丢弃数据/网络节点的比率，用于防止过拟合。默认值为0.0
activation：可选参数，字符串类型。该参数代表tcn网络使用的激活函数类型，更多可选项详情见tcn github官网。默认值为'tanh'
kernel_initializer：可选参数，字符串类型。该参数代表权重矩阵初始化方案，更多可选项详情见tcn github官网。默认值为'he_normal'
if_use_batch_norm：可选参数，布尔值类型。该参数代表是否在tcn中使用batchnormalization，True使用，False不使用。默认值为False
if_use_layer_norm：可选参数，布尔值类型。该参数代表是否在tcn中使用layernormalization，True使用，False不使用。默认值为False
if_use_weight_norm：可选参数，布尔值类型。该参数代表是否在tcn中使用weightnormalization，True使用，False不使用。默认值为False
de_last_activation：可选参数，字符串类型。该参数代表在decoder中最后一个dense层所使用的激活函数。对于分类问题，通常使用'sigmoid'(二分类)或者'softmax'(多分类)；对于回归问题，通常使用'tanh'。默认值为'tanh'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要输出每个预报因子对于预报值的预报贡献，'yes'代表输出，'no'代表不输出。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
covs:返回训练好的卷积层cov
encoders：返回训练好的编码器encoder
decoders：返回训练好的解码器decoder
lasts：返回训练好的解码器decoder后的网络层所组成的模型last
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.110 model,predicty,testy,r,p,weights=Auto_paint_self.Auto_Multi_Scale_Resnet_Transformer(vy,vx,timestep,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,cov_padding='same',cov_strides=1,residual_deep=1,residual_activation='relu',residual_norm='batchnormalization',pooling_padding='valid',pooling_strides=2,embedding_num=None,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,encoder_deep=1,num_heads=2,key_dim=2,ifdropout='no',trans_dropout_rate=0.0,trans_units=64,trans_activation='sigmoid',if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifrandom_split='yes',ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于融合多尺度Resnet和Transformer网络
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['localcov',[64,3,3]]代表插入权重参数不共享的卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['transformer']代表插入Transformer层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
residual_deep：可选参数，整形。该参数代表残差模块中包含几层（卷积层+激活函数+归一化层）模块，即残差模块深度。默认值为1
residual_activation：可选参数，字符串类型。该参数代表残差模块中所使用的激活函数。默认值为'relu'
residual_norm：可选参数，字符串类型。该参数代表残差模块中所使用的归一化方法。默认值为'batchnormalization'
pooling_padding：可选参数，该参数代表池化层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'valid'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
embedding_num：可选参数，代表在decoder模块中编码数据的数目。对于分类问题，应该为类别+1，对于预测问题，该值在有限范围内越大越好。默认值为10000
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
encoder_deep：可选参数，整形。该参数代表函数中encoder层的数量，默认值为1
num_heads：可选参数，整形。该参数代表多头自注意模块中头的数量。默认值为2
key_dim：可选参数，整形。该参数代表多头自注意模块中键的数量。默认值为2
ifdropout：可选参数，字符串类型。该函数代表transform模块中是否使用dropout。默认值为'no'
trans_dropout_rate：可选参数，实型。该参数代表transform模块中dropout的比率。默认值为0.0
trans_units：可选参数，整形。该参数代表transform模块内部的dense层的神经元个数。默认值为64
trans_activation：可选参数，字符串类型。该参数代表transform模块中的dense层激活函数，默认值为'sigmoid'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要输出每个预报因子对于预报值的预报贡献，'yes'代表输出，'no'代表不输出。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.111 model,covs,encoders,decoders,lasts,predicty,testy,r,p,weights=Auto_paint_self.Auto_Multi_Scale_Resnet_Transformer_more_output(vy,vx,timestep,outputstep,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,cov_padding='same',cov_strides=1,residual_deep=1,residual_activation='relu',residual_norm='batchnormalization',pooling_padding='valid',pooling_strides=2,embedding_num=None,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,encoder_deep=1,decoder_deep=1,num_heads=2,key_dim=2,ifdropout='no',trans_dropout_rate=0.0,trans_units=64,trans_activation='sigmoid',de_last_activation='tanh',if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifrandom_split='yes',ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于融合多尺度Resnet和Transformer多输出网络
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
outputstep:必要参数，整形。该参数代表预测vy的时次数目。例如等于5时代表预测vy向后的5个时次的值。
model_list：必要参数，tumple类型。该参数代表构建的网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['localcov',[64,3,3]]代表插入权重参数不共享的卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['transformer']代表插入Transformer层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
residual_deep：可选参数，整形。该参数代表残差模块中包含几层（卷积层+激活函数+归一化层）模块，即残差模块深度。默认值为1
residual_activation：可选参数，字符串类型。该参数代表残差模块中所使用的激活函数。默认值为'relu'
residual_norm：可选参数，字符串类型。该参数代表残差模块中所使用的归一化方法。默认值为'batchnormalization'
pooling_padding：可选参数，该参数代表池化层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'valid'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
embedding_num：可选参数，整形。代表在decoder模块中编码数据的数目。对于分类问题，应该为类别+1，对于预测问题，该值在有限范围内越大越好。默认值为10000
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
encoder_deep：可选参数，整形。该参数代表函数中encoder层的数量，默认值为1
decoder_deep：可选参数，整形。该参数代表函数中decoder层的数量，默认值为1
num_heads：可选参数，整形。该参数代表多头自注意模块中头的数量。默认值为2
key_dim：可选参数，整形。该参数代表多头自注意模块中键的数量。默认值为2
ifdropout：可选参数，字符串类型。该函数代表transform模块中是否使用dropout。默认值为'no'
trans_dropout_rate：可选参数，实型。该参数代表transform模块中dropout的比率。默认值为0.0
trans_units：可选参数，整形。该参数代表transform模块内部的dense层的神经元个数。默认值为64
trans_activation：可选参数，字符串类型。该参数代表transform模块中的dense层激活函数，默认值为'sigmoid'
de_last_activation：可选参数，字符串类型。该参数代表在decoder中最后一个dense层所使用的激活函数。对于分类问题，通常使用'sigmoid'(二分类)或者'softmax'(多分类)；对于回归问题，通常使用'tanh'。默认值为'tanh'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要输出每个预报因子对于预报值的预报贡献，'yes'代表输出，'no'代表不输出。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
covs:返回训练好的卷积层cov
encoders：返回训练好的编码器encoder
decoders：返回训练好的解码器decoder
lasts：返回训练好的解码器decoder后的网络层所组成的模型last
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.112 generator,discriminator,Vgg_19,predicty,testy,r,p=Auto_paint_self.Auto_SRGAN(vy,vx,upscale,test_size=0.2,valid_size=0.1,k_fold=None,if_best_mode='no',modelpath=None,conv_core_num=64,cov_strides=1,cov_padding='same',conv_core_size=3,generator_deep=5,discriminator_deep=7,Vgg_deep=5,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,loss_function='default',if_print_model='yes',optimizer='SGD',g_learning_rate=0.001,d_learning_rate=0.01,epochs=2000,batch_size=20,g_train_time=2,ifrandom_split='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构建降尺度网络SRGAN
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是三维或四维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是三维或四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，通常第一个维度即时间维要与vy长度相同
upscale：必要参数，整形。该参数代表要将分辨率增强多少倍，如填写2代表将纬度和经度分辨率都增强到原来的2倍，例如原来分辨率为1.0°，增强后则变为0.5°
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
conv_core_num：可选参数，整形。该参数代表卷积层的卷积核个数，默认值为64
cov_strides：可选参数，整形。该参数代表卷积层的卷积步长，默认值为1
cov_padding：可选参数，字符串类型。该参数代表卷积层卷积后是否进行填充。'same'代表填充，'valid'代表不填充。默认值为'same'
conv_core_size：可选参数，整形。该参数代表卷积层卷积核大小，默认值为3
generator_deep：可选参数，整形。该参数代表生成器中循环模块的个数，默认值为5
discriminator_deep：可选参数，整形。该参数代表判别器中循环模块的个数，默认值为7
Vgg_deep：可选参数，整形。该参数代表Vgg网络中循环模块的个数，默认值为5
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
loss_function：可选参数，字符串类型。该参数代表生成器所使用的损失函数。'default'或者'Pearson'代表使用Pearson相关系数作为损失函数；'SSIM'代表使用SSIM结构相似度作为损失函数；'Vgg'代表使用Vgg的特征对比mae作为损失函数；也可以使用'SSIM+Vgg'或者'Pearson+Vgg'代表SSIM结构相似度和Vgg特征对比mae或Pearson相关系数和Vgg特征对比共同作为损失函数。损失函数中判别器结果的二进制交叉熵和生成器结果与高分辨率数据的mse是默认包含的。
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
g_learning_rate：可选参数，实型。该参数代表生成器的学习率，默认值为0.001
d_learning_rate：可选参数，实型。该参数代表判别器的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
g_train_time：可选参数，整形。该参数代表训练一次判别器的同时，训练多少次生成器，默认值为2
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存，'every'代表每训练一个epochs均保存一次。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
generator：返回训练好的生成器generator
discriminator：返回训练好的判别器discriminator
Vgg_19：返回用于特征提取的Vgg_19网络
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。

2.113 stderr,rho,snr_db,sensitivity=Auto_paint_self.Auto_triple_collocation(v1,v2,v3)
该函数用于做三源匹配
输入值：
v1：必要参数，np.array类型或者xr.Dataarray类型。该参数是三源匹配的第一个数据变量，可以是一维或三维的。但是要求每个维度的长度必须和v2和v3一致。
v2：必要参数，np.array类型或者xr.Dataarray类型。该参数是三源匹配的第二个数据变量，可以是一维或三维的。但是要求每个维度的长度必须和v1和v3一致。
v3：必要参数，np.array类型或者xr.Dataarray类型。该参数是三源匹配的第三个数据变量，可以是一维或三维的。但是要求每个维度的长度必须和v1和v2一致。
返回值：
stderr：返回三源匹配后各个数据的噪声标准误差
rho：返回三源匹配后各个数据与真实值的相关系数
snr_db：返回三源匹配后各个数据以分贝为单位的信噪比
sensitivity：返回三源匹配后各个数据对目标变量变化的敏感性

2.114 som,cluster_index,predicty,testy=Auto_paint_self.Auto_SOM(vx,task_mode='show',test_size=0.25,vy=None,n=None,m=None,sigma=1.0,learning_rate=0.5,neighborhood_function='gaussian',initiate_method='default',train_method='default',epochs=1000,ifplot='yes')
该函数用于SOM可视化、聚类和分类
输入值：
vx：必要参数，np.array类型或者xr.Dataarray类型。该参数代表进行可视化、聚类或分类所用到的数据，通常是二维的，第一个维度是样本数，第二个维度是特征数。
task_mode：可选参数，字符串类型。该参数代表SOM所做任务，'show'代表做可视化，'cluster'代表做聚类，'classify'代表做分类。默认值为'show'
test_size：可选参数，实型。该参数代表做分类时测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.25
vy：可选参数，np.array类型或者xr.Dataarray类型。该参数代表做可视化或者分类任务时，所用到的标签。聚类任务时赋值为None即可。默认值为None
n：可选参数，整形。该参数代表SOM网络映射到二维时，行节点数。通常推荐为sqrt(5*sqrt(N)),其中N为样本数量。填写None时将自动按照上述公式计算。注意，当进行聚类时，n建议为1。默认值为None
m：可选参数，整形。该参数代表SOM网络映射到二维时，列节点数。通常推荐为sqrt(5*sqrt(N)),其中N为样本数量。填写None时将自动按照上述公式计算。注意，当进行聚类时，m建议为S，其中S为聚类簇数。默认值为None
sigma：可选参数，实型。sigma确定邻域范围，sigma越大，邻域范围越大。注意，sigma不能够大于m或者n中的最大值，同时sigma必须大于0。默认值为1.0
learning_rate：可选参数，实型。该参数代表网络的学习率。默认值为0.5
neighborhood_function：可选参数，字符串类型。neighborhood函数用来确定优胜节点对其近邻节点的影响强弱，即优胜邻域中每个节点的更新幅度。默为'gaussian'代表使用高斯函数
initiate_method：可选参数，字符串类型。代表权重参数初始化方法，为'default'时默认SOM函数自己选择，为'pca'时代表使用pca初始化，为'random'时代表使用随机初始化。默认值为'defualt'
train_method：可选参数，字符串类型。代表网络训练时样本选取方法，'default'代表默认顺序选取样本。'random'代表随机选取样本。'batch'代表对每个样本进行单独训练。默认值为'default'
epochs：可选参数，整形。该参数代表网络最大训练次数，默认值为1000
ifplot：可选参数，字符串类型。代表是否用图展示最后结果，'yes'代表展示，其他赋值不展示。默认值为'yes'
返回值：
som：返回训练好的SOM网络
cluster_index：返回聚类任务中聚类标签。如果是其他任务，则返回None
predicty：返回分类任务中的预测值。如果是其他任务，则返回None
testy：返回分类任务中的真实值。如果是其他任务，则返回None

2.115 Auto_paint_self.Auto_TSNE(vx,vy=None,n_components=2,perplexity=30.0,early_exaggeration=12.0,learning_rate='auto',n_iter=1000,metric='euclidean',initiate_method='random')
该函数用于TSNE的降维可视化
输入值：
vx：必要参数，np.array类型或者xr.Dataarray类型。该参数代表进行可视化所用到的数据，通常是二维的，第一个维度是样本数，第二个维度是特征数。
vy：可选参数，np.array类型或者xr.Dataarray类型。该参数代表做可视化时，所用到的聚类结果标签。赋值为None时，可视化没有聚类结果标签作为参考，将在plot图中呈现相同颜色打点。默认值为None
n_components：可选参数，整形。该参数代表TSNE的嵌入维度。若要做可视化，则嵌入维度只能为3及以下。本函数作为二维可视化函数，该参数只能为2。默认值为2
perplexity：可选参数，实型。该参数代表混乱度，表示t-SNE优化过程中考虑邻近点的多少，建议取值在5到50之间。默认值为30.0
early_exaggeration：表示嵌入空间簇间距的大小，该值越大，可视化后的簇间距越大。默认值为12.0
learning_rate：可选参数，实型或字符串类型。该参数代表学习率，表示梯度下降的快慢，填写实型代表手动设置学习率，建议取值在10到1000之间；填写字符串'auto'代表自动设置学习率。默认值为'auto'
n_iter：可选参数，整形。该参数代表迭代次数。默认值为1000
metric：可选参数，字符串类型。该参数代表向量间距离度量的方式。默认值为'euclidean'即欧氏距离
initiate_method：可选参数，字符串类型。代表权重参数初始化方法，为'pca'时代表使用pca初始化，为'random'时代表使用随机初始化。默认值为'random'

2.116 tc_times,tc_lat,tc_lon,tc_slp=Auto_paint_self.Auto_UZ_detect(slp,z_300,z_500,u10m,v10m,z_surf,lon,lat,times)
此函数用于UZ台风探测
#注意，本函数中wind10m风速阈值默认值为14.5，用于包含热带低压的台风检测。如果不包含热带低压，则建议调整阈值为18.0
输入值：
slp：必要参数，np.array类型或者xr.Dataarray类型。该参数代表UZ台风探测算法使用的海平面气压，必须是三维场（时间，纬度，经度）
z_300：必要参数，np.array类型或者xr.Dataarray类型。该参数代表UZ台风探测算法使用的300hpa位势高度场，必须是三维场（时间，纬度，经度）
z_500：必要参数，np.array类型或者xr.Dataarray类型。该参数代表UZ台风探测算法使用的500hpa位势高度场，必须是三维场（时间，纬度，经度）
u10m：必要参数，np.array类型或者xr.Dataarray类型。该参数代表UZ台风探测算法使用的10mu风速场，必须是三维场（时间，纬度，经度）
v10m：必要参数，np.array类型或者xr.Dataarray类型。该参数代表UZ台风探测算法使用的10mv风速场，必须是三维场（时间，纬度，经度）
z_surf：必要参数，np.array类型或者xr.Dataarray类型。该参数代表UZ台风探测算法使用的地形数据，必须是二维场（纬度，经度）
lon：必要参数，np.array类型或者xr.Dataarray类型。该参数代表各个变量的纬度维数据
lat：必要参数，np.array类型或者xr.Dataarray类型。该参数代表各个变量的经度维数据
times：必要参数，np.array类型或者xr.Dataarray类型。该参数代表各个变量的时间维数据
返回值：
tc_times：返回每个台风候选点对应的时间
tc_lat：返回每个台风候选点对应的纬度
tc_lon：返回每个台风候选点对应的经度
tc_slp：返回每个台风候选点对应的气压

2.117 tc_track,tc_life=Auto_paint_self.Auto_UZ_track(tc_times,tc_lat,tc_lon,timespace='6hour')
此函数用于UZ台风追踪
输入值：
tc_times：必要参数，np.array类型。该参数代表每个台风候选点的对应时间，通常由Auto_UZ_detect返回值tc_times继承
tc_lat：必要参数，np.array类型。该参数代表每个台风候选点的对应纬度，通常由Auto_UZ_detect返回值tc_lat继承
tc_lon：必要参数，np.array类型。该参数代表每个台风候选点的对应经度，通常由Auto_UZ_detect返回值tc_lon继承
timespace：可选参数，字符串类型。该参数代表输入数据的台风时次间隔，'day'代表日数据，'6hour'代表6小时间隔数据。默认值为'6hour'代表6小时间隔数据（不推荐使用日数据）
返回值：
tc_track：返回一个两维数组，第一个维度代表每条轨迹，第二个维度代表每条轨迹中候选点的tc_times，tc_lat和tc_lon对应index。该返回值需要配合tc_times，tc_lat和tc_lon使用，作为其index
tc_life：返回每个台风对应的寿命（单位：天）

2.118 ob_times,ob_lat,ob_lon,ob_number,ob_track=Auto_paint_self.Auto_IBTrACS_read(filename,timename,latname,lonname,seasonname,tc_number_name,timestartyear,timeendyear,space=1,timespace='day')
该函数用于读取IBTrACS台风观测数据csv文件
输入值：
filename：必要参数，字符串类型。该参数代表IBTrACS台风观测数据csv文件的路径和文件名。
timename：必要参数，字符串类型。该参数代表IBTrACS台风观测数据csv文件的时间维度名。
latname：必要参数，字符串类型。该参数代表IBTrACS台风观测数据csv文件的纬度维名。
lonname：必要参数，字符串类型。该参数代表IBTrACS台风观测数据csv文件的经度维名。
seasonname：必要参数，字符串类型。该参数代表IBTrACS台风观测数据csv文件的年份名。
tc_number_name：必要参数，字符串类型。该参数代表IBTrACS台风观测数据csv文件的台风编号名。
timestartyear：必要参数，整形。该参数代表需要截取的IBTrACS台风观测数据的起始年份。
timeendyear：必要参数，整形。该参数代表需要截取的IBTrACS台风观测数据的终止年份。
space：可选参数，整形。该参数代表csv文件除了文件头以外，到正式数据之间的间隔行数。默认值为1
timespace：可选参数，字符串类型。该参数代表读取进来的IBTrACS数据要被处理成何种分辨率，'3hour'代表处理成3小时间隔数据；'6hour'代表处理成6hour间隔数据（0时，6时，12时和18时）；'day'代表处理成日间隔数据。默认值为'day'
返回值：
ob_times：返回每个台风点对应的时间
ob_lat：返回每个台风点对应的纬度
ob_lon：返回每个台风点对应的经度
ob_track：返回一个两维数组，第一个维度代表每条轨迹，第二个维度代表每条轨迹中台风点的ob_times，ob_lat和ob_lon对应index。该返回值需要配合ob_times，ob_lat和ob_lon使用，作为其index

2.119 tc_class,ob_number_unique,POD,FAR=Auto_paint_self.Auto_TC_compare(tc_track,tc_times,tc_lat,tc_lon,ob_track,ob_times,ob_lat,ob_lon,ob_number)
该函数用于计算UZ探测追踪算法得到热带气旋的匹配命中率和误报率
输入值：
tc_times：必要参数，np.array类型。该参数代表每个台风候选点的对应时间，通常由Auto_UZ_detect返回值tc_times继承
tc_lat：必要参数，np.array类型。该参数代表每个台风候选点的对应纬度，通常由Auto_UZ_detect返回值tc_lat继承
tc_lon：必要参数，np.array类型。该参数代表每个台风候选点的对应经度，通常由Auto_UZ_detect返回值tc_lon继承
ob_track：必要参数，np.array类型。该参数代表每个台风点的对应ob_times,ob_lat和ob_lat的index值，通常由Auto_IBTrACS_read返回值ob_track继承
ob_times：必要参数，np.array类型。该参数代表每个台风点的对应时间，通常由Auto_IBTrACS_read返回值ob_times继承
ob_lat：必要参数，np.array类型。该参数代表每个台风点的对应纬度，通常由Auto_IBTrACS_read返回值ob_lat继承
ob_lon：必要参数，np.array类型。该参数代表每个台风点的对应经度，通常由Auto_IBTrACS_read返回值ob_lon继承
ob_number：必要参数，np.array类型。该参数代表每个台风点的对应类型，通常由Auto_IBTrACS_read返回值ob_number继承
返回值：
tc_class：返回每个探测的台风轨迹对应的观测值中ob_number号码，如果在ob_number中不存在，则返回-1
ob_number_unique：返回每个观测的台风轨迹对应的ob_number号码
POD：返回UZ探测追踪算法得到的热带气旋匹配命中率
FAR：返回UZ探测追踪算法得到的热带气旋匹配误警率

2.120 generator,discriminator,Vgg_19,predicty,testy,r,p=Auto_paint_self.Auto_ESRGAN(vy,vx,upscale,test_size=0.2,valid_size=0.1,k_fold=None,if_best_mode='no',modelpath=None,conv_core_num=64,cov_strides=1,cov_padding='same',conv_core_size=3,generator_deep=5,discriminator_deep=7,Vgg_deep=5,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,loss_function='default',if_print_model='yes',optimizer='SGD',g_learning_rate=0.001,d_learning_rate=0.01,epochs=2000,batch_size=20,g_train_time=2,ifrandom_split='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构建降尺度网络ESRGAN
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是三维或四维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是三维或四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，通常第一个维度即时间维要与vy长度相同
upscale：必要参数，整形。该参数代表要将分辨率增强多少倍，如填写2代表将纬度和经度分辨率都增强到原来的2倍，例如原来分辨率为1.0°，增强后则变为0.5°
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
conv_core_num：可选参数，整形。该参数代表卷积层的卷积核个数，默认值为64
cov_strides：可选参数，整形。该参数代表卷积层的卷积步长，默认值为1
cov_padding：可选参数，字符串类型。该参数代表卷积层卷积后是否进行填充。'same'代表填充，'valid'代表不填充。默认值为'same'
conv_core_size：可选参数，整形。该参数代表卷积层卷积核大小，默认值为3
generator_deep：可选参数，整形。该参数代表生成器中循环模块的个数，默认值为5
discriminator_deep：可选参数，整形。该参数代表判别器中循环模块的个数，默认值为7
Vgg_deep：可选参数，整形。该参数代表Vgg网络中循环模块的个数，默认值为5
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
loss_function：可选参数，字符串类型。该参数代表生成器所使用的损失函数。'default'或者'SSIM+Vgg'代表使用SSIM结构相似度和Vgg特征对比mae作为损失函数；'SSIM'代表使用SSIM结构相似度作为损失函数；'Vgg'代表使用Vgg的特征对比mae作为损失函数；'Pearson'代表使用Pearson相关系数作为损失函数；也可以使用Pearson+Vgg'代表Pearson相关系数和Vgg特征对比共同作为损失函数。损失函数中判别器结果的二进制交叉熵和生成器结果与高分辨率数据的mse是默认包含的。
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
g_learning_rate：可选参数，实型。该参数代表生成器的学习率，默认值为0.001
d_learning_rate：可选参数，实型。该参数代表判别器的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，若为0代表网络只用于预测，不进行训练。默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
g_train_time：可选参数，整形。该参数代表训练一次判别器的同时，训练多少次生成器，默认值为2
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存，'every'代表每训练一个epochs均保存一次。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
generator：返回训练好的生成器generator
discriminator：返回训练好的判别器discriminator
Vgg_19：返回用于特征提取的Vgg_19网络
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。

2.121 model,predicty,testy,r,p,weights=Auto_paint_self.Auto_ANN(vy,vx,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,ifrandom_split='yes',if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构建人工神经网络
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是二维的。第一个维度代表时间维，第二个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的神经网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'或者'shap'代表使用shap库计算贡献率，填写'oob'代表使用oob方法计算贡献率，填写'no'代表不计算贡献率。默认值为'yes'代表使用shap方法计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型model
predicty：返回测试集预测值y'
testy：返回测试集真实值vy
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.122 best_x_name,best_vx,best_trainx,best_testx,best_r=Auto_paint_self.Auto_ANN_chose(vy,vx,model_list,x_name=None,test_size=0.25,task_mode='regression',chosemode='forward',ifrandom_split='yes',if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifweight='yes',ifmute='no',device='cpu')
该函数用于ANN网络前向/后向回归挑选预报因子(该函数目前已经被废除)
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是二维的。第一个维度代表时间维，第二个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
timestep：必要参数，整形。该参数代表预测vy所用到的vx提前时段，例如填写7代表用提前1-7个时次的vx预测vy。
model_list：必要参数，tumple类型。该参数代表构建的神经网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
x_name：可选参数，np.array类型。该参数代表vx即各个预报因子的名称，用于模型输出结果时预报因子名称的输出，如果为None则自动赋值数字1到n，n为预报因子个数。默认值为None
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.25
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
chosemode：可选参数，字符串类型。该参数代表模型是使用前向回归还是后向回归。'forward'代表前项回归，'backward'代表后向回归。默认值为'forward'
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
pooling_padding：可选参数，该参数代表池化层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'valid'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率。默认值为'yes'代表计算
ifmute：可选参数，字符串类型。代表是否不打印调优次数以及是否打印每次加入/剔除模型的预报因子。默认值为'no'代表打印
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
best_x_name：返回模型挑选的最好的预报因子名称
best_vx：返回模型挑选的最好的预报因子序列
best_trainx：返回模型挑选的最好的预报因子训练集序列
best_testx：返回模型挑选的最好的预报因子测试集序列
best_r：返回模型测试集中最优的预报因子组合所达到的最高的预测值与准确值的相关系数

2.123  model,predicty,testy,r,p=Auto_paint_self.Auto_EfficientTempNet(vy,vx,test_size=0.2,valid_size=0.1,k_fold=None,if_best_mode='no',modelpath=None,base_layer=16,simpleconv_deep=3,mbconv_deep=2,seradio=0.5,ifrandom_split='yes',if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构建时间超分辨率网络EfficientTempNet
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的或者二维的。通常与vx的第一个维度即时间维长度相同，第二个维度代表被预报值个数。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表前一个时间帧和后一个时间帧。通常第一个维度即时间维要与vy长度相同
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
base_layer：可选参数，整形。该参数代表网络的起始卷积层个数。网络会根据循环嵌套次数，逐步增加卷积层个数，增加卷积层个数为base_layer的整数倍。默认值为16
simpleconv_deep：可选参数，整形。该参数代表网络中simpleconv的套用层数。默认值为3
mbconv_deep；可选参数，整形。该参数代表网络中mbconv的套用层数。默认值为2
seradio：可选参数，实型。该参数代表se网络中的缩放参数，这个参数的目的是为了减少通道个数从而降低计算量。默认值为0.5
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'时代表'MeanSquaredError'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'时为'regression'时代表'MeanSquaredError'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型model
predicty：返回测试集预测值y'
testy：返回测试集真实值vy
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。

2.124 model,predicty,testy,r,p,heatmap,weights=Auto_paint_self.Auto_GCN(vy,vx,lat,lon,model_list,r_number=None,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,ifrandom_split='yes',a_mode='d',u=None,v=None,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构建图卷积神经网络
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，可以是一维、二维、三维或者四维的。常第一个维度即时间维要与vx长度相同
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是三维的。第一个维度代表时间维，第二个维度代表站点维，第三个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
lat：必要参数，np.array类型。该参数代表与vx站点数据对应的每个站点的的纬度，必须是必须是一维的。
lon：必要参数，np.array类型。该参数代表与vx站点数据对应的每个站点的的经度，必须是必须是一维的。
model_list：必要参数，tumple类型。该参数代表构建的神经网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['gc',64,'tanh']代表插入一层卷积层，神经元个数为64，使用tanh激活函数；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
r_number：可选参数，整形。该参数代表邻接矩阵中，每个格点与前多少个与之最密切（体现为邻接矩阵对应数值排名靠前）的格点建立联系（与剩下的格点则不建立联系，即邻接矩阵对应值为0），如填写3则代表代表与排名前三的格点建立联系。默认值为None代表与所有格点都建立联系，但不推荐（GCN要求输入邻接矩阵为系数矩阵）
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
a_mode：可选参数，字符串类型。代表邻接矩阵采用的度量方式，'d'代表使用距离度量，'uvd'代表使用风向-距离度量。默认值为'd'
u：可选参数，np.array类型。当a_mode为'uvd'时，填入纬向风数组。默认值为None
v：可选参数，np.array类型。当a_mode为'uvd'时，填入经向风数组。默认值为None
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'代表计算，'no'代表不计算。默认值为'yes'代表计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型model
predicty：返回测试集预测值y'
testy：返回测试集真实值vy
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.125 model,predicty,testy,r,p,heatmap,weights=Auto_paint_self.Auto_CNN_pytorch(vy,vx,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,ifrandom_split='yes',cov_padding='same',cov_strides=1,pooling_strides=2,if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifheatmap='yes',ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构建卷积神经网络-Pytorch版本
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的神经网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割，'all_test'代表所有数据均用于测试。默认值为'yes'
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，默认值为'default'在task_mode为'regression'时代表'MSELoss'，在task_mode为'binary_classify'时代表'BCELoss'，在task_mode为'multi_classify'时代表'CrossEntropyLoss'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前有'SGD'和'Adam'及'NAdam'三种，具体说明可见官网（https://pytorch.org/docs/stable/optim.html）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,大部分与loss_function相同，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，在进行二分类和多分类时使用torchmetrics库包（https://lightning.ai/docs/torchmetrics/stable/classification）。默认值为'default'在task_mode为'regression'时代表'BCELoss'，在task_mode为'binary_classify'时代表'F1Score'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifheatmap：可选参数，字符串类型。该参数代表是否要返回贡献率图heatmap，'yes'代表返回，填写其他值代表不返回（返回结果为None）。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'或者'shap'代表使用shap库计算贡献率，填写'oob'代表使用oob方法计算贡献率，填写'no'代表不计算贡献率。默认值为'yes'代表使用shap方法计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型model
predicty：返回测试集预测值y'
testy：返回测试集真实值vy
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
heatmap：返回贡献图heatmap，仅在ifheatmap为'yes'时有值，否则为None
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.126 model,predicty,testy,r,p,heatmap,heatmap,weights=Auto_paint_self.Auto_Resnet_pytorch(vy,vx,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,ifrandom_split='yes',cov_padding='same',cov_strides=1,residual_deep=1,residual_activation='relu',residual_norm='batchnormalization',pooling_strides=2,if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifheatmap='yes',ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构建Resnet网络-Pytorch版本
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的神经网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割，'all_test'代表所有数据均用于测试。默认值为'yes'
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
residual_deep：可选参数，整形。该参数代表残差模块中包含几层（卷积层+激活函数+归一化层）模块，即残差模块深度。默认值为1
residual_activation：可选参数，字符串类型。该参数代表残差模块中所使用的激活函数。默认值为'relu'
residual_norm：可选参数，字符串类型。该参数代表残差模块中所使用的归一化方法。默认值为'batchnormalization'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，默认值为'default'在task_mode为'regression'时代表'MSELoss'，在task_mode为'binary_classify'时代表'BCELoss'，在task_mode为'multi_classify'时代表'CrossEntropyLoss'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前有'SGD'和'Adam'及'NAdam'三种，具体说明可见官网（https://pytorch.org/docs/stable/optim.html）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,大部分与loss_function相同，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，在进行二分类和多分类时使用torchmetrics库包（https://lightning.ai/docs/torchmetrics/stable/classification）。默认值为'default'在task_mode为'regression'时代表'BCELoss'，在task_mode为'binary_classify'时代表'F1Score'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifheatmap：可选参数，字符串类型。该参数代表是否要返回贡献率图heatmap，'yes'代表返回，填写其他值代表不返回（返回结果为None）。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'或者'shap'代表使用shap库计算贡献率，填写'oob'代表使用oob方法计算贡献率，填写'no'代表不计算贡献率。默认值为'yes'代表使用shap方法计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型model
predicty：返回测试集预测值y'
testy：返回测试集真实值vy
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
heatmap：返回贡献图heatmap，仅在ifheatmap为'yes'时有值，否则为None
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.127 model,predicty,testy,r,p,heatmap,weights=Auto_paint_self.Auto_CNN_LSTMorGRUorRNN_pytorch(vy,vx,timestep,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,ifrandom_split='yes',cov_padding='same',cov_strides=1,pooling_strides=2,units=64,num_layers=1,dropout=0.0,if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifheatmap='yes',ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于融合CNN和LSTM/GRU/RNN网络-Pytorch版本
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的神经网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['lstm']代表插入LSTM层；['gru']代表插入GRU层；['rnn']代表插入RNN层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
units：可选参数，整形。该参数代表网络的内部循环的神经元个数。默认值为64
num_layers：：可选参数，整形。该参数代表使用多少次LSTM网络，例如填写1代表只使用1次。默认值为1
dropout：可选参数，实型。该参数代表网络外部循环的数据丢弃值，例如0.1代表丢弃百分之10的数据用于防止过拟合。默认值为0.0
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，默认值为'default'在task_mode为'regression'时代表'MSELoss'，在task_mode为'binary_classify'时代表'BCELoss'，在task_mode为'multi_classify'时代表'CrossEntropyLoss'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前有'SGD'和'Adam'及'NAdam'三种，具体说明可见官网（https://pytorch.org/docs/stable/optim.html）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,大部分与loss_function相同，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，在进行二分类和多分类时使用torchmetrics库包（https://lightning.ai/docs/torchmetrics/stable/classification）。默认值为'default'在task_mode为'regression'时代表'BCELoss'，在task_mode为'binary_classify'时代表'F1Score'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifheatmap：可选参数，字符串类型。该参数代表是否要返回贡献率图heatmap，'yes'代表返回，填写其他值代表不返回（返回结果为None）。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'或者'shap'代表使用shap库计算贡献率，填写'oob'代表使用oob方法计算贡献率，填写'no'代表不计算贡献率。默认值为'yes'代表使用shap方法计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
heatmap：返回贡献图heatmap，仅在ifheatmap为'yes'时有值，否则为None
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.128 model,predicty,testy,r,p,heatmap,weights=Auto_paint_self.Auto_CNN_TCN_pytorch(vy,vx,timestep,model_list,dilations,num_channels,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,ifrandom_split='yes',cov_padding='same',cov_strides=1,pooling_strides=2,kernel_size=2,dropout=0.0,activation='relu',if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifheatmap='yes',ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于融合CNN和TCN网络-Pytorch版本
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的神经网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['tcn']代表插入时间卷积网络；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
dilations：必要参数，tumple类型。该参数代表扩张系数元组。通常按照固定的膨胀基数递增，例如[1,2,4,8,16,32]代表构建6层深度的tcn网络，每向上一层扩张系数增加2倍。理论上该参数应该与num_channels长度相同。
num_channels：必要参数，tumple类型。该参数代表每层tcn网络的神经元个数，例如填写[64,32,16,8,4,2]代表构建6层深度的tcn网络，每层的神经元个数为上一层的1/2。理论上该参数应该与dilations长度相同。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
kernel：可选参数，整形。该参数代表tcn网络卷积核大小。默认值为2
dropout：可选参数，实型。该参数代表tcn随机丢弃数据/网络节点的比率，用于防止过拟合。默认值为0.0
activation：可选参数，字符串类型。该参数代表tcn网络使用的激活函数类型，更多可选项详情见pytorch-tcn github官网。默认值为'relu'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，默认值为'default'在task_mode为'regression'时代表'MSELoss'，在task_mode为'binary_classify'时代表'BCELoss'，在task_mode为'multi_classify'时代表'CrossEntropyLoss'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前有'SGD'和'Adam'及'NAdam'三种，具体说明可见官网（https://pytorch.org/docs/stable/optim.html）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,大部分与loss_function相同，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，在进行二分类和多分类时使用torchmetrics库包（https://lightning.ai/docs/torchmetrics/stable/classification）。默认值为'default'在task_mode为'regression'时代表'BCELoss'，在task_mode为'binary_classify'时代表'F1Score'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifheatmap：可选参数，字符串类型。该参数代表是否要返回贡献率图heatmap，'yes'代表返回，填写其他值代表不返回（返回结果为None）。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'或者'shap'代表使用shap库计算贡献率，填写'oob'代表使用oob方法计算贡献率，填写'no'代表不计算贡献率。默认值为'yes'代表使用shap方法计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
heatmap：返回贡献图heatmap，仅在ifheatmap为'yes'时有值，否则为None
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.129  model,predicty,testy,r,p,heatmap,weights=Auto_paint_self.Auto_Resnet_LSTMorGRUorRNN_pytorch(vy,vx,timestep,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,ifrandom_split='yes',cov_padding='same',cov_strides=1,residual_deep=1,residual_activation='relu',residual_norm='batchnormalization',pooling_strides=2,units=64,num_layers=1,dropout=0.0,if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifheatmap='yes',ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于融合Resnet和LSTM/GRU/RNN网络-Pytorch版本
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的神经网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['lstm']代表插入LSTM层；['gru']代表插入GRU层；['rnn']代表插入RNN层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
residual_deep：可选参数，整形。该参数代表残差模块中包含几层（卷积层+激活函数+归一化层）模块，即残差模块深度。默认值为1
residual_activation：可选参数，字符串类型。该参数代表残差模块中所使用的激活函数。默认值为'relu'
residual_norm：可选参数，字符串类型。该参数代表残差模块中所使用的归一化方法。默认值为'batchnormalization'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
units：可选参数，整形。该参数代表网络的内部循环的神经元个数。默认值为64
num_layers：：可选参数，整形。该参数代表使用多少次LSTM网络，例如填写1代表只使用1次。默认值为1
dropout：可选参数，实型。该参数代表网络外部循环的数据丢弃值，例如0.1代表丢弃百分之10的数据用于防止过拟合。默认值为0.0
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，默认值为'default'在task_mode为'regression'时代表'MSELoss'，在task_mode为'binary_classify'时代表'BCELoss'，在task_mode为'multi_classify'时代表'CrossEntropyLoss'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前有'SGD'和'Adam'及'NAdam'三种，具体说明可见官网（https://pytorch.org/docs/stable/optim.html）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,大部分与loss_function相同，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，在进行二分类和多分类时使用torchmetrics库包（https://lightning.ai/docs/torchmetrics/stable/classification）。默认值为'default'在task_mode为'regression'时代表'BCELoss'，在task_mode为'binary_classify'时代表'F1Score'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifheatmap：可选参数，字符串类型。该参数代表是否要返回贡献率图heatmap，'yes'代表返回，填写其他值代表不返回（返回结果为None）。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'或者'shap'代表使用shap库计算贡献率，填写'oob'代表使用oob方法计算贡献率，填写'no'代表不计算贡献率。默认值为'yes'代表使用shap方法计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'

返回值：
model：返回训练好的模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
heatmap：返回贡献图heatmap，仅在ifheatmap为'yes'时有值，否则为None
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.130  model,predicty,testy,r,p,heatmap,weights=Auto_paint_self.Auto_Resnet_TCN_pytorch(vy,vx,timestep,model_list,dilations,num_channels,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,ifrandom_split='yes',cov_padding='same',cov_strides=1,residual_deep=1,residual_activation='relu',residual_norm='batchnormalization',pooling_strides=2,kernel_size=2,dropout=0.0,activation='relu',if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifheatmap='yes',ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于融合Resnet和TCN网络-Pytorch版本
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的神经网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['tcn']代表插入时间卷积网络；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
dilations：必要参数，tumple类型。该参数代表扩张系数元组。通常按照固定的膨胀基数递增，例如[1,2,4,8,16,32]代表构建6层深度的tcn网络，每向上一层扩张系数增加2倍。理论上该参数应该与num_channels长度相同。
num_channels：必要参数，tumple类型。该参数代表每层tcn网络的神经元个数，例如填写[64,32,16,8,4,2]代表构建6层深度的tcn网络，每层的神经元个数为上一层的1/2。理论上该参数应该与dilations长度相同。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
residual_deep：可选参数，整形。该参数代表残差模块中包含几层（卷积层+激活函数+归一化层）模块，即残差模块深度。默认值为1
residual_activation：可选参数，字符串类型。该参数代表残差模块中所使用的激活函数。默认值为'relu'
residual_norm：可选参数，字符串类型。该参数代表残差模块中所使用的归一化方法。默认值为'batchnormalization'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
kernel：可选参数，整形。该参数代表tcn网络卷积核大小。默认值为2
dropout：可选参数，实型。该参数代表tcn随机丢弃数据/网络节点的比率，用于防止过拟合。默认值为0.0
activation：可选参数，字符串类型。该参数代表tcn网络使用的激活函数类型，更多可选项详情见pytorch-tcn github官网。默认值为'relu'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，默认值为'default'在task_mode为'regression'时代表'MSELoss'，在task_mode为'binary_classify'时代表'BCELoss'，在task_mode为'multi_classify'时代表'CrossEntropyLoss'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前有'SGD'和'Adam'及'NAdam'三种，具体说明可见官网（https://pytorch.org/docs/stable/optim.html）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,大部分与loss_function相同，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，在进行二分类和多分类时使用torchmetrics库包（https://lightning.ai/docs/torchmetrics/stable/classification）。默认值为'default'在task_mode为'regression'时代表'BCELoss'，在task_mode为'binary_classify'时代表'F1Score'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifheatmap：可选参数，字符串类型。该参数代表是否要返回贡献率图heatmap，'yes'代表返回，填写其他值代表不返回（返回结果为None）。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'或者'shap'代表使用shap库计算贡献率，填写'oob'代表使用oob方法计算贡献率，填写'no'代表不计算贡献率。默认值为'yes'代表使用shap方法计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
heatmap：返回贡献图heatmap，仅在ifheatmap为'yes'时有值，否则为None
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.131 model,predicty,testy,r,p,weights=Auto_paint_self.Auto_CNN_Transformer_pytorch(vy,vx,timestep,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,ifrandom_split='yes',cov_padding='same',cov_strides=1,pooling_strides=2,encoder_deep=1,num_heads=2,dim_feedforward=256,dropout=0.0,activation='relu',if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifheatmap='yes',ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于融合CNN和Transformerh-Pytorch版本
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的神经网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['transformer']代表插入transformer的encoder层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值n'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
encoder_deep：可选参数，整形。该参数代表函数中encoder层的数量，默认值为1
num_heads：可选参数，整形。该参数代表多头自注意模块中头的数量。默认值为2
dim_feedforward：可选参数，整形。该参数代表encoder中前馈神经网络中神经元的个数。默认值为256
dropout：可选参数，实型。该参数代表Transformer encoder层中随机丢弃数据/网络节点的比率，用于防止过拟合。默认值为0.0
activation：可选参数，字符串类型。该参数代表Transformer encoder层中使用的激活函数类型。默认值为'relu'
trans_dropout_rate：可选参数，实型。该参数代表transform模块中dropout的比率。默认值为0.0
trans_units：可选参数，整形。该参数代表transform模块内部的dense层的神经元个数。默认值为64
trans_activation：可选参数，字符串类型。该参数代表transform模块中的dense层激活函数，默认值为'sigmoid'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，默认值为'default'在task_mode为'regression'时代表'MSELoss'，在task_mode为'binary_classify'时代表'BCELoss'，在task_mode为'multi_classify'时代表'CrossEntropyLoss'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前有'SGD'和'Adam'及'NAdam'三种，具体说明可见官网（https://pytorch.org/docs/stable/optim.html）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,大部分与loss_function相同，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，在进行二分类和多分类时使用torchmetrics库包（https://lightning.ai/docs/torchmetrics/stable/classification）。默认值为'default'在task_mode为'regression'时代表'BCELoss'，在task_mode为'binary_classify'时代表'F1Score'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifheatmap：可选参数，字符串类型。该参数代表是否要返回贡献率图heatmap，'yes'代表返回，填写其他值代表不返回（返回结果为None）。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'或者'shap'代表使用shap库计算贡献率，填写'oob'代表使用oob方法计算贡献率，填写'no'代表不计算贡献率。默认值为'yes'代表使用shap方法计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
heatmap：返回贡献图heatmap，仅在ifheatmap为'yes'时有值，否则为None
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.132 model,predicty,testy,r,p,weights=Auto_paint_self.Auto_Resnet_Transformer_pytorch(vy,vx,timestep,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,ifrandom_split='yes',cov_padding='same',cov_strides=1,residual_deep=1,residual_activation='relu',residual_norm='batchnormalization',pooling_strides=2,encoder_deep=1,num_heads=2,dim_feedforward=256,dropout=0.0,activation='relu',if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifheatmap='yes',ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于融合Resnet和Transformerh-Pytorch版本
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的神经网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['transformer']代表插入transformer的encoder层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值n'
residual_deep：可选参数，整形。该参数代表残差模块中包含几层（卷积层+激活函数+归一化层）模块，即残差模块深度。默认值为1
residual_activation：可选参数，字符串类型。该参数代表残差模块中所使用的激活函数。默认值为'relu'
residual_norm：可选参数，字符串类型。该参数代表残差模块中所使用的归一化方法。默认值为'batchnormalization'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
encoder_deep：可选参数，整形。该参数代表函数中encoder层的数量，默认值为1
num_heads：可选参数，整形。该参数代表多头自注意模块中头的数量。默认值为2
dim_feedforward：可选参数，整形。该参数代表encoder中前馈神经网络中神经元的个数。默认值为256
dropout：可选参数，实型。该参数代表Transformer encoder层中随机丢弃数据/网络节点的比率，用于防止过拟合。默认值为0.0
activation：可选参数，字符串类型。该参数代表Transformer encoder层中使用的激活函数类型。默认值为'relu'
trans_dropout_rate：可选参数，实型。该参数代表transform模块中dropout的比率。默认值为0.0
trans_units：可选参数，整形。该参数代表transform模块内部的dense层的神经元个数。默认值为64
trans_activation：可选参数，字符串类型。该参数代表transform模块中的dense层激活函数，默认值为'sigmoid'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，默认值为'default'在task_mode为'regression'时代表'MSELoss'，在task_mode为'binary_classify'时代表'BCELoss'，在task_mode为'multi_classify'时代表'CrossEntropyLoss'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前有'SGD'和'Adam'及'NAdam'三种，具体说明可见官网（https://pytorch.org/docs/stable/optim.html）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,大部分与loss_function相同，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，在进行二分类和多分类时使用torchmetrics库包（https://lightning.ai/docs/torchmetrics/stable/classification）。默认值为'default'在task_mode为'regression'时代表'BCELoss'，在task_mode为'binary_classify'时代表'F1Score'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifheatmap：可选参数，字符串类型。该参数代表是否要返回贡献率图heatmap，'yes'代表返回，填写其他值代表不返回（返回结果为None）。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'或者'shap'代表使用shap库计算贡献率，填写'oob'代表使用oob方法计算贡献率，填写'no'代表不计算贡献率。默认值为'yes'代表使用shap方法计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
heatmap：返回贡献图heatmap，仅在ifheatmap为'yes'时有值，否则为None
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None


2.133 model,predicty,testy,r,p,heatmap,weights=Auto_paint_self.Auto_Multi_Scale_CNN_pytorch(vy,vx,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,ifrandom_split='yes',cov_padding='same',cov_strides=1,pooling_strides=2,if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifheatmap='yes',ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构建多尺度卷积神经网络-Pytorch版本
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的神经网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割，'all_test'代表所有数据均用于测试。默认值为'yes'
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，默认值为'default'在task_mode为'regression'时代表'MSELoss'，在task_mode为'binary_classify'时代表'BCELoss'，在task_mode为'multi_classify'时代表'CrossEntropyLoss'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前有'SGD'和'Adam'及'NAdam'三种，具体说明可见官网（https://pytorch.org/docs/stable/optim.html）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,大部分与loss_function相同，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，在进行二分类和多分类时使用torchmetrics库包（https://lightning.ai/docs/torchmetrics/stable/classification）。默认值为'default'在task_mode为'regression'时代表'BCELoss'，在task_mode为'binary_classify'时代表'F1Score'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifheatmap：可选参数，字符串类型。该参数代表是否要返回贡献率图heatmap，'yes'代表返回，填写其他值代表不返回（返回结果为None）。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'或者'shap'代表使用shap库计算贡献率，填写'oob'代表使用oob方法计算贡献率，填写'no'代表不计算贡献率。默认值为'yes'代表使用shap方法计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型model
predicty：返回测试集预测值y'
testy：返回测试集真实值vy
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
heatmap：返回贡献图heatmap，仅在ifheatmap为'yes'时有值，否则为None
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.134 model,predicty,testy,r,p,heatmap,heatmap,weights=Auto_paint_self.Auto_Multi_Scale_Resnet_pytorch(vy,vx,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,ifrandom_split='yes',cov_padding='same',cov_strides=1,residual_deep=1,residual_activation='relu',residual_norm='batchnormalization',pooling_strides=2,if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifheatmap='yes',ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构建多尺度Resnet网络-Pytorch版本
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的神经网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割，'all_test'代表所有数据均用于测试。默认值为'yes'
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
residual_deep：可选参数，整形。该参数代表残差模块中包含几层（卷积层+激活函数+归一化层）模块，即残差模块深度。默认值为1
residual_activation：可选参数，字符串类型。该参数代表残差模块中所使用的激活函数。默认值为'relu'
residual_norm：可选参数，字符串类型。该参数代表残差模块中所使用的归一化方法。默认值为'batchnormalization'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，默认值为'default'在task_mode为'regression'时代表'MSELoss'，在task_mode为'binary_classify'时代表'BCELoss'，在task_mode为'multi_classify'时代表'CrossEntropyLoss'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前有'SGD'和'Adam'及'NAdam'三种，具体说明可见官网（https://pytorch.org/docs/stable/optim.html）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,大部分与loss_function相同，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，在进行二分类和多分类时使用torchmetrics库包（https://lightning.ai/docs/torchmetrics/stable/classification）。默认值为'default'在task_mode为'regression'时代表'BCELoss'，在task_mode为'binary_classify'时代表'F1Score'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifheatmap：可选参数，字符串类型。该参数代表是否要返回贡献率图heatmap，'yes'代表返回，填写其他值代表不返回（返回结果为None）。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'或者'shap'代表使用shap库计算贡献率，填写'oob'代表使用oob方法计算贡献率，填写'no'代表不计算贡献率。默认值为'yes'代表使用shap方法计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型model
predicty：返回测试集预测值y'
testy：返回测试集真实值vy
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
heatmap：返回贡献图heatmap，仅在ifheatmap为'yes'时有值，否则为None
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.135 model,predicty,testy,r,p,heatmap,weights=Auto_paint_self.Auto_Multi_Scale_CNN_LSTMorGRUorRNN_pytorch(vy,vx,timestep,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,ifrandom_split='yes',cov_padding='same',cov_strides=1,pooling_strides=2,units=64,num_layers=1,dropout=0.0,if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifheatmap='yes',ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于融合多尺度CNN和LSTM/GRU/RNN网络-Pytorch版本
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的神经网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['lstm']代表插入LSTM层；['gru']代表插入GRU层；['rnn']代表插入RNN层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
units：可选参数，整形。该参数代表网络的内部循环的神经元个数。默认值为64
num_layers：：可选参数，整形。该参数代表使用多少次LSTM网络，例如填写1代表只使用1次。默认值为1
dropout：可选参数，实型。该参数代表网络外部循环的数据丢弃值，例如0.1代表丢弃百分之10的数据用于防止过拟合。默认值为0.0
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，默认值为'default'在task_mode为'regression'时代表'MSELoss'，在task_mode为'binary_classify'时代表'BCELoss'，在task_mode为'multi_classify'时代表'CrossEntropyLoss'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前有'SGD'和'Adam'及'NAdam'三种，具体说明可见官网（https://pytorch.org/docs/stable/optim.html）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,大部分与loss_function相同，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，在进行二分类和多分类时使用torchmetrics库包（https://lightning.ai/docs/torchmetrics/stable/classification）。默认值为'default'在task_mode为'regression'时代表'BCELoss'，在task_mode为'binary_classify'时代表'F1Score'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifheatmap：可选参数，字符串类型。该参数代表是否要返回贡献率图heatmap，'yes'代表返回，填写其他值代表不返回（返回结果为None）。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'或者'shap'代表使用shap库计算贡献率，填写'oob'代表使用oob方法计算贡献率，填写'no'代表不计算贡献率。默认值为'yes'代表使用shap方法计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
heatmap：返回贡献图heatmap，仅在ifheatmap为'yes'时有值，否则为None
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.136 model,predicty,testy,r,p,heatmap,weights=Auto_paint_self.Auto_Multi_Scale_Resnet_LSTMorGRUorRNN_pytorch(vy,vx,timestep,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,ifrandom_split='yes',cov_padding='same',cov_strides=1,residual_deep=1,residual_activation='relu',residual_norm='batchnormalization',pooling_strides=2,units=64,num_layers=1,dropout=0.0,if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifheatmap='yes',ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于融合多尺度Resnet和LSTM/GRU/RNN网络-Pytorch版本
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的神经网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['lstm']代表插入LSTM层；['gru']代表插入GRU层；['rnn']代表插入RNN层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
residual_deep：可选参数，整形。该参数代表残差模块中包含几层（卷积层+激活函数+归一化层）模块，即残差模块深度。默认值为1
residual_activation：可选参数，字符串类型。该参数代表残差模块中所使用的激活函数。默认值为'relu'
residual_norm：可选参数，字符串类型。该参数代表残差模块中所使用的归一化方法。默认值为'batchnormalization'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
units：可选参数，整形。该参数代表网络的内部循环的神经元个数。默认值为64
num_layers：：可选参数，整形。该参数代表使用多少次LSTM网络，例如填写1代表只使用1次。默认值为1
dropout：可选参数，实型。该参数代表网络外部循环的数据丢弃值，例如0.1代表丢弃百分之10的数据用于防止过拟合。默认值为0.0
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，默认值为'default'在task_mode为'regression'时代表'MSELoss'，在task_mode为'binary_classify'时代表'BCELoss'，在task_mode为'multi_classify'时代表'CrossEntropyLoss'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前有'SGD'和'Adam'及'NAdam'三种，具体说明可见官网（https://pytorch.org/docs/stable/optim.html）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,大部分与loss_function相同，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，在进行二分类和多分类时使用torchmetrics库包（https://lightning.ai/docs/torchmetrics/stable/classification）。默认值为'default'在task_mode为'regression'时代表'BCELoss'，在task_mode为'binary_classify'时代表'F1Score'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifheatmap：可选参数，字符串类型。该参数代表是否要返回贡献率图heatmap，'yes'代表返回，填写其他值代表不返回（返回结果为None）。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'或者'shap'代表使用shap库计算贡献率，填写'oob'代表使用oob方法计算贡献率，填写'no'代表不计算贡献率。默认值为'yes'代表使用shap方法计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'

返回值：
model：返回训练好的模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
heatmap：返回贡献图heatmap，仅在ifheatmap为'yes'时有值，否则为None
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.137 model,predicty,testy,r,p,heatmap,weights=Auto_paint_self.Auto_Multi_Scale_CNN_TCN_pytorch(vy,vx,timestep,model_list,dilations,num_channels,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,ifrandom_split='yes',cov_padding='same',cov_strides=1,pooling_strides=2,kernel_size=2,dropout=0.0,activation='relu',if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifheatmap='yes',ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于多尺度融合CNN和TCN网络-Pytorch版本
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的神经网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['tcn']代表插入时间卷积网络；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
dilations：必要参数，tumple类型。该参数代表扩张系数元组。通常按照固定的膨胀基数递增，例如[1,2,4,8,16,32]代表构建6层深度的tcn网络，每向上一层扩张系数增加2倍。理论上该参数应该与num_channels长度相同。
num_channels：必要参数，tumple类型。该参数代表每层tcn网络的神经元个数，例如填写[64,32,16,8,4,2]代表构建6层深度的tcn网络，每层的神经元个数为上一层的1/2。理论上该参数应该与dilations长度相同。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
kernel：可选参数，整形。该参数代表tcn网络卷积核大小。默认值为2
dropout：可选参数，实型。该参数代表tcn随机丢弃数据/网络节点的比率，用于防止过拟合。默认值为0.0
activation：可选参数，字符串类型。该参数代表tcn网络使用的激活函数类型，更多可选项详情见pytorch-tcn github官网。默认值为'relu'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，默认值为'default'在task_mode为'regression'时代表'MSELoss'，在task_mode为'binary_classify'时代表'BCELoss'，在task_mode为'multi_classify'时代表'CrossEntropyLoss'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前有'SGD'和'Adam'及'NAdam'三种，具体说明可见官网（https://pytorch.org/docs/stable/optim.html）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,大部分与loss_function相同，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，在进行二分类和多分类时使用torchmetrics库包（https://lightning.ai/docs/torchmetrics/stable/classification）。默认值为'default'在task_mode为'regression'时代表'BCELoss'，在task_mode为'binary_classify'时代表'F1Score'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifheatmap：可选参数，字符串类型。该参数代表是否要返回贡献率图heatmap，'yes'代表返回，填写其他值代表不返回（返回结果为None）。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'或者'shap'代表使用shap库计算贡献率，填写'oob'代表使用oob方法计算贡献率，填写'no'代表不计算贡献率。默认值为'yes'代表使用shap方法计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
heatmap：返回贡献图heatmap，仅在ifheatmap为'yes'时有值，否则为None
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.138 model,predicty,testy,r,p,weights=Auto_paint_self.Auto_Multi_Scale_CNN_Transformer_pytorch(vy,vx,timestep,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,ifrandom_split='yes',cov_padding='same',cov_strides=1,pooling_strides=2,encoder_deep=1,num_heads=2,dim_feedforward=256,dropout=0.0,activation='relu',if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifheatmap='yes',ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于融合多尺度CNN和Transformerh-Pytorch版本
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的神经网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['transformer']代表插入transformer的encoder层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值n'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
encoder_deep：可选参数，整形。该参数代表函数中encoder层的数量，默认值为1
num_heads：可选参数，整形。该参数代表多头自注意模块中头的数量。默认值为2
dim_feedforward：可选参数，整形。该参数代表encoder中前馈神经网络中神经元的个数。默认值为256
dropout：可选参数，实型。该参数代表Transformer encoder层中随机丢弃数据/网络节点的比率，用于防止过拟合。默认值为0.0
activation：可选参数，字符串类型。该参数代表Transformer encoder层中使用的激活函数类型。默认值为'relu'
trans_dropout_rate：可选参数，实型。该参数代表transform模块中dropout的比率。默认值为0.0
trans_units：可选参数，整形。该参数代表transform模块内部的dense层的神经元个数。默认值为64
trans_activation：可选参数，字符串类型。该参数代表transform模块中的dense层激活函数，默认值为'sigmoid'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，默认值为'default'在task_mode为'regression'时代表'MSELoss'，在task_mode为'binary_classify'时代表'BCELoss'，在task_mode为'multi_classify'时代表'CrossEntropyLoss'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前有'SGD'和'Adam'及'NAdam'三种，具体说明可见官网（https://pytorch.org/docs/stable/optim.html）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,大部分与loss_function相同，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，在进行二分类和多分类时使用torchmetrics库包（https://lightning.ai/docs/torchmetrics/stable/classification）。默认值为'default'在task_mode为'regression'时代表'BCELoss'，在task_mode为'binary_classify'时代表'F1Score'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifheatmap：可选参数，字符串类型。该参数代表是否要返回贡献率图heatmap，'yes'代表返回，填写其他值代表不返回（返回结果为None）。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'或者'shap'代表使用shap库计算贡献率，填写'oob'代表使用oob方法计算贡献率，填写'no'代表不计算贡献率。默认值为'yes'代表使用shap方法计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
heatmap：返回贡献图heatmap，仅在ifheatmap为'yes'时有值，否则为None
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.139 model,predicty,testy,r,p,weights=Auto_paint_self.Auto_Multi_Scale_Resnet_Transformer_pytorch(vy,vx,timestep,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,ifrandom_split='yes',cov_padding='same',cov_strides=1,residual_deep=1,residual_activation='relu',residual_norm='batchnormalization',pooling_strides=2,encoder_deep=1,num_heads=2,dim_feedforward=256,dropout=0.0,activation='relu',if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifheatmap='yes',ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于融合多尺度Resnet和Transformerh-Pytorch版本
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的神经网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['transformer']代表插入transformer的encoder层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值n'
residual_deep：可选参数，整形。该参数代表残差模块中包含几层（卷积层+激活函数+归一化层）模块，即残差模块深度。默认值为1
residual_activation：可选参数，字符串类型。该参数代表残差模块中所使用的激活函数。默认值为'relu'
residual_norm：可选参数，字符串类型。该参数代表残差模块中所使用的归一化方法。默认值为'batchnormalization'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
encoder_deep：可选参数，整形。该参数代表函数中encoder层的数量，默认值为1
num_heads：可选参数，整形。该参数代表多头自注意模块中头的数量。默认值为2
dim_feedforward：可选参数，整形。该参数代表encoder中前馈神经网络中神经元的个数。默认值为256
dropout：可选参数，实型。该参数代表Transformer encoder层中随机丢弃数据/网络节点的比率，用于防止过拟合。默认值为0.0
activation：可选参数，字符串类型。该参数代表Transformer encoder层中使用的激活函数类型。默认值为'relu'
trans_dropout_rate：可选参数，实型。该参数代表transform模块中dropout的比率。默认值为0.0
trans_units：可选参数，整形。该参数代表transform模块内部的dense层的神经元个数。默认值为64
trans_activation：可选参数，字符串类型。该参数代表transform模块中的dense层激活函数，默认值为'sigmoid'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，默认值为'default'在task_mode为'regression'时代表'MSELoss'，在task_mode为'binary_classify'时代表'BCELoss'，在task_mode为'multi_classify'时代表'CrossEntropyLoss'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前有'SGD'和'Adam'及'NAdam'三种，具体说明可见官网（https://pytorch.org/docs/stable/optim.html）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,大部分与loss_function相同，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，在进行二分类和多分类时使用torchmetrics库包（https://lightning.ai/docs/torchmetrics/stable/classification）。默认值为'default'在task_mode为'regression'时代表'BCELoss'，在task_mode为'binary_classify'时代表'F1Score'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifheatmap：可选参数，字符串类型。该参数代表是否要返回贡献率图heatmap，'yes'代表返回，填写其他值代表不返回（返回结果为None）。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'或者'shap'代表使用shap库计算贡献率，填写'oob'代表使用oob方法计算贡献率，填写'no'代表不计算贡献率。默认值为'yes'代表使用shap方法计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
heatmap：返回贡献图heatmap，仅在ifheatmap为'yes'时有值，否则为None
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.140 model,predicty,testy,r,p,heatmap,weights=Auto_paint_self.Auto_Multi_Scale_Resnet_TCN_pytorch(vy,vx,timestep,model_list,dilations,num_channels,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,ifrandom_split='yes',cov_padding='same',cov_strides=1,residual_deep=1,residual_activation='relu',residual_norm='batchnormalization',pooling_strides=2,kernel_size=2,dropout=0.0,activation='relu',if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifheatmap='yes',ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于融合多尺度Resnet和TCN网络-Pytorch版本
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的神经网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['tcn']代表插入时间卷积网络；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
dilations：必要参数，tumple类型。该参数代表扩张系数元组。通常按照固定的膨胀基数递增，例如[1,2,4,8,16,32]代表构建6层深度的tcn网络，每向上一层扩张系数增加2倍。理论上该参数应该与num_channels长度相同。
num_channels：必要参数，tumple类型。该参数代表每层tcn网络的神经元个数，例如填写[64,32,16,8,4,2]代表构建6层深度的tcn网络，每层的神经元个数为上一层的1/2。理论上该参数应该与dilations长度相同。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
residual_deep：可选参数，整形。该参数代表残差模块中包含几层（卷积层+激活函数+归一化层）模块，即残差模块深度。默认值为1
residual_activation：可选参数，字符串类型。该参数代表残差模块中所使用的激活函数。默认值为'relu'
residual_norm：可选参数，字符串类型。该参数代表残差模块中所使用的归一化方法。默认值为'batchnormalization'
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
kernel：可选参数，整形。该参数代表tcn网络卷积核大小。默认值为2
dropout：可选参数，实型。该参数代表tcn随机丢弃数据/网络节点的比率，用于防止过拟合。默认值为0.0
activation：可选参数，字符串类型。该参数代表tcn网络使用的激活函数类型，更多可选项详情见pytorch-tcn github官网。默认值为'relu'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，默认值为'default'在task_mode为'regression'时代表'MSELoss'，在task_mode为'binary_classify'时代表'BCELoss'，在task_mode为'multi_classify'时代表'CrossEntropyLoss'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前有'SGD'和'Adam'及'NAdam'三种，具体说明可见官网（https://pytorch.org/docs/stable/optim.html）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,大部分与loss_function相同，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，在进行二分类和多分类时使用torchmetrics库包（https://lightning.ai/docs/torchmetrics/stable/classification）。默认值为'default'在task_mode为'regression'时代表'BCELoss'，在task_mode为'binary_classify'时代表'F1Score'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifheatmap：可选参数，字符串类型。该参数代表是否要返回贡献率图heatmap，'yes'代表返回，填写其他值代表不返回（返回结果为None）。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'或者'shap'代表使用shap库计算贡献率，填写'oob'代表使用oob方法计算贡献率，填写'no'代表不计算贡献率。默认值为'yes'代表使用shap方法计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
heatmap：返回贡献图heatmap，仅在ifheatmap为'yes'时有值，否则为None
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.141 model,predicty,testy,r,p,weights=Auto_paint_self.Auto_LSTMorGRUorRNN_pytorch(vy,vx,timestep,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,ifrandom_split='yes',units=64,num_layers=1,dropout=0.0,if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构建LSTM/GRU/RNN网络-Pytorch版本
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的神经网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['lstm']代表插入LSTM层；['gru']代表插入GRU层；['rnn']代表插入RNN层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
units：可选参数，整形。该参数代表网络的内部循环的神经元个数。默认值为64
num_layers：：可选参数，整形。该参数代表使用多少次LSTM网络，例如填写1代表只使用1次。默认值为1
dropout：可选参数，实型。该参数代表网络外部循环的数据丢弃值，例如0.1代表丢弃百分之10的数据用于防止过拟合。默认值为0.0
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，默认值为'default'在task_mode为'regression'时代表'MSELoss'，在task_mode为'binary_classify'时代表'BCELoss'，在task_mode为'multi_classify'时代表'CrossEntropyLoss'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前有'SGD'和'Adam'及'NAdam'三种，具体说明可见官网（https://pytorch.org/docs/stable/optim.html）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,大部分与loss_function相同，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，在进行二分类和多分类时使用torchmetrics库包（https://lightning.ai/docs/torchmetrics/stable/classification）。默认值为'default'在task_mode为'regression'时代表'BCELoss'，在task_mode为'binary_classify'时代表'F1Score'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'或者'shap'代表使用shap库计算贡献率，填写'oob'代表使用oob方法计算贡献率，填写'no'代表不计算贡献率。默认值为'yes'代表使用shap方法计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.142 model,predicty,testy,r,p,heatmap,weights=Auto_paint_self.Auto_TCN_pytorch(vy,vx,timestep,model_list,dilations,num_channels,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,ifrandom_split='yes',kernel_size=2,dropout=0.0,activation='relu',if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构建TCN网络-Pytorch版本
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的神经网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['tcn']代表插入时间卷积网络；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
dilations：必要参数，tumple类型。该参数代表扩张系数元组。通常按照固定的膨胀基数递增，例如[1,2,4,8,16,32]代表构建6层深度的tcn网络，每向上一层扩张系数增加2倍。理论上该参数应该与num_channels长度相同。
num_channels：必要参数，tumple类型。该参数代表每层tcn网络的神经元个数，例如填写[64,32,16,8,4,2]代表构建6层深度的tcn网络，每层的神经元个数为上一层的1/2。理论上该参数应该与dilations长度相同。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
kernel：可选参数，整形。该参数代表tcn网络卷积核大小。默认值为2
dropout：可选参数，实型。该参数代表tcn随机丢弃数据/网络节点的比率，用于防止过拟合。默认值为0.0
activation：可选参数，字符串类型。该参数代表tcn网络使用的激活函数类型，更多可选项详情见pytorch-tcn github官网。默认值为'relu'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，默认值为'default'在task_mode为'regression'时代表'MSELoss'，在task_mode为'binary_classify'时代表'BCELoss'，在task_mode为'multi_classify'时代表'CrossEntropyLoss'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前有'SGD'和'Adam'及'NAdam'三种，具体说明可见官网（https://pytorch.org/docs/stable/optim.html）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,大部分与loss_function相同，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，在进行二分类和多分类时使用torchmetrics库包（https://lightning.ai/docs/torchmetrics/stable/classification）。默认值为'default'在task_mode为'regression'时代表'BCELoss'，在task_mode为'binary_classify'时代表'F1Score'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'或者'shap'代表使用shap库计算贡献率，填写'oob'代表使用oob方法计算贡献率，填写'no'代表不计算贡献率。默认值为'yes'代表使用shap方法计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.143 model,predicty,testy,r,p,weights=Auto_paint_self.Auto_Transformer_pytorch(vy,vx,timestep,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,ifrandom_split='yes',encoder_deep=1,num_heads=2,dim_feedforward=256,dropout=0.0,activation='relu',if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构建Transformerh-Pytorch版本
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的神经网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['transformer']代表插入transformer的encoder层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
encoder_deep：可选参数，整形。该参数代表函数中encoder层的数量，默认值为1
num_heads：可选参数，整形。该参数代表多头自注意模块中头的数量。默认值为2
dim_feedforward：可选参数，整形。该参数代表encoder中前馈神经网络中神经元的个数。默认值为256
dropout：可选参数，实型。该参数代表Transformer encoder层中随机丢弃数据/网络节点的比率，用于防止过拟合。默认值为0.0
activation：可选参数，字符串类型。该参数代表Transformer encoder层中使用的激活函数类型。默认值为'relu'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，默认值为'default'在task_mode为'regression'时代表'MSELoss'，在task_mode为'binary_classify'时代表'BCELoss'，在task_mode为'multi_classify'时代表'CrossEntropyLoss'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前有'SGD'和'Adam'及'NAdam'三种，具体说明可见官网（https://pytorch.org/docs/stable/optim.html）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,大部分与loss_function相同，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，在进行二分类和多分类时使用torchmetrics库包（https://lightning.ai/docs/torchmetrics/stable/classification）。默认值为'default'在task_mode为'regression'时代表'BCELoss'，在task_mode为'binary_classify'时代表'F1Score'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'或者'shap'代表使用shap库计算贡献率，填写'oob'代表使用oob方法计算贡献率，填写'no'代表不计算贡献率。默认值为'yes'代表使用shap方法计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.144 model,predicty,testy,r,p,weights=Auto_paint_self.Auto_ANN_pytorch(vy,vx,model_list,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,ifrandom_split='yes',if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构建人工神经网络pytorch版本
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是二维的。第一个维度代表时间维，第二个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的神经网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割，'all_test'代表所有数据均用于测试。默认值为'yes'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，默认值为'default'在task_mode为'regression'时代表'MSELoss'，在task_mode为'binary_classify'时代表'BCELoss'，在task_mode为'multi_classify'时代表'CrossEntropyLoss'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前有'SGD'和'Adam'及'NAdam'三种，具体说明可见官网（https://pytorch.org/docs/stable/optim.html）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,大部分与loss_function相同，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，在进行二分类和多分类时使用torchmetrics库包（https://lightning.ai/docs/torchmetrics/stable/classification）。默认值为'default'在task_mode为'regression'时代表'BCELoss'，在task_mode为'binary_classify'时代表'F1Score'，在task_mode为'multi_classify'时代表'Accuracy'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,大部分与loss_function相同，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，在进行二分类和多分类时使用torchmetrics库包（https://lightning.ai/docs/torchmetrics/stable/classification）。默认值为'default'在task_mode为'regression'时代表'BCELoss'，在task_mode为'binary_classify'时代表'F1Score'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'或者'shap'代表使用shap库计算贡献率，填写'oob'代表使用oob方法计算贡献率，填写'no'代表不计算贡献率。默认值为'yes'代表使用shap方法计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型model
predicty：返回测试集预测值y'
testy：返回测试集真实值vy
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.145 model,predicty,testy,r,p,weights=Auto_paint_self.Auto_Unet_pytorch(vy,vx,downnum,covnum,test_size=0.2,valid_size=0.1,k_fold=None,task_mode='regression',if_best_mode='no',modelpath=None,ifrandom_split='yes',baselayer=64,cov_kernelsize=3,cov_strides=1,pool_method='maxpooling',pool_kernel_size=2,pool_strides=2,ifnormalization='no',normalization_method=None,activate='tanh',if_last_act='no',if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构造Unet网络Pytorch版本
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是三维的。其前三个维度分别对应（时间，纬度，经度）
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。
downnum：必要参数，整形。该参数代表Unet网络的深度。下采样/上采样次数为网络深度-1。当数据的纬度和经度比较小时，网络深度不要过深，否则可能导致下层的下采样使得输入数据经度/纬度长度小于0
covnum：必要参数，整形。该参数代表每层网络要进行多少次卷积。卷积不会导致输入值和输出值在时间/经度/纬度上缺失（默认做补全操作）
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割，'all_test'代表所有数据均用于测试。默认值为'yes'
baselayer：可选参数，整形。该参数代表起始卷积核个数，每做一次下采样，卷积核个数都会增加一倍。默认值为64
cov_kernelsize：可选参数，整形。该参数代表卷积核大小。默认值为3
cov_strides：可选参数，整形。该参数代表卷积层的步长。默认值为1
pool_method：可选参数，字符串类型。该参数代表池化方法，'maxpoolng'代表做最大值池化,'avepooling'代表做平均池化。默认值为'maxpooling'
poolkernelsize：可选参数，整形。该参数代表池化核大小。默认值为2
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
ifnormalization：可选参数，字符串类型。该参数代表是否做归一化操作，'yes'代表做，'no'代表不做。默认值为'no'
normalization_method：可选参数，字符串类型。该参数代表做归一化操作的方法，只有在ifnormalization为'yes'时才会生效。填写'batchnormalization'代表做全局归一化，填写'LayerNormalization'代表做层归一化。默认值为None
activate：可选参数，字符串类型。该参数代表卷积使用的激活函数。默认值为'tanh'
if_last_act：可选参数，字符串类型。该参数代表最后一层卷积后，是否使用激活函数。通常回归任务最后一层不使用激活函数，分类任务最后一层使用；填写'no'表示最后一层不使用激活函数，填写激活函数名称代表使用激活函数。默认值为'no'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，默认值为'default'在task_mode为'regression'时代表'MSELoss'，在task_mode为'binary_classify'时代表'BCELoss'，在task_mode为'multi_classify'时代表'CrossEntropyLoss'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前有'SGD'和'Adam'及'NAdam'三种，具体说明可见官网（https://pytorch.org/docs/stable/optim.html）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,大部分与loss_function相同，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，在进行二分类和多分类时使用torchmetrics库包（https://lightning.ai/docs/torchmetrics/stable/classification）。默认值为'default'在task_mode为'regression'时代表'BCELoss'，在task_mode为'binary_classify'时代表'F1Score'，在task_mode为'multi_classify'时代表'Accuracy'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,大部分与loss_function相同，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，在进行二分类和多分类时使用torchmetrics库包（https://lightning.ai/docs/torchmetrics/stable/classification）。默认值为'default'在task_mode为'regression'时代表'BCELoss'，在task_mode为'binary_classify'时代表'F1Score'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifweight：可选参数，字符串类型。该参数代表是否使用贡献率作为挑选预报因子的标准，'yes'代表是，'no'代表否。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.146 generator,discriminator,Vgg_19,predicty,testy,r,p=Auto_paint_self.Auto_SRGAN_pytorch(vy,vx,upscale,test_size=0.2,valid_size=0.1,k_fold=None,if_best_mode='no',modelpath=None,conv_core_num=64,cov_strides=1,cov_padding='same',conv_core_size=3,generator_deep=5,discriminator_deep=7,Vgg_deep=5,loss_function='default',if_print_model='yes',optimizer='SGD',g_learning_rate=0.001,d_learning_rate=0.01,epochs=2000,batch_size=20,g_train_time=2,ifrandom_split='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构建降尺度网络SRGAN的Pytorch版本
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是三维或四维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是三维或四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，通常第一个维度即时间维要与vy长度相同
upscale：必要参数，整形。该参数代表要将分辨率增强多少倍，如填写2代表将纬度和经度分辨率都增强到原来的2倍，例如原来分辨率为1.0°，增强后则变为0.5°
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
conv_core_num：可选参数，整形。该参数代表卷积层的卷积核个数，默认值为64
cov_strides：可选参数，整形。该参数代表卷积层的卷积步长，默认值为1
cov_padding：可选参数，字符串类型。该参数代表卷积层卷积后是否进行填充。'same'代表填充，'valid'代表不填充。默认值为'same'
conv_core_size：可选参数，整形。该参数代表卷积层卷积核大小，默认值为3
generator_deep：可选参数，整形。该参数代表生成器中循环模块的个数，默认值为5
discriminator_deep：可选参数，整形。该参数代表判别器中循环模块的个数，默认值为7
Vgg_deep：可选参数，整形。该参数代表Vgg网络中循环模块的个数，默认值为5
loss_function：可选参数，字符串类型。该参数代表生成器所使用的损失函数。'default'或者'Pearson'代表使用Pearson相关系数作为损失函数；'SSIM'代表使用SSIM结构相似度作为损失函数；'Vgg'代表使用Vgg的特征对比mae作为损失函数；也可以使用'SSIM+Vgg'或者'Pearson+Vgg'代表SSIM结构相似度和Vgg特征对比mae或Pearson相关系数和Vgg特征对比共同作为损失函数。损失函数中判别器结果的二进制交叉熵和生成器结果与高分辨率数据的mse是默认包含的。
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前有'SGD'和'Adam'及'NAdam'三种，具体说明可见官网（https://pytorch.org/docs/stable/optim.html）,默认值为'SGD'
g_learning_rate：可选参数，实型。该参数代表生成器的学习率，默认值为0.001
d_learning_rate：可选参数，实型。该参数代表判别器的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
g_train_time：可选参数，整形。该参数代表训练一次判别器的同时，训练多少次生成器，默认值为2
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割，'all_test'代表所有数据均用于测试。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存，'every'代表每训练一个epochs均保存一次。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
generator：返回训练好的生成器generator
discriminator：返回训练好的判别器discriminator
Vgg_19：返回用于特征提取的Vgg_19网络
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。

2.147 generator,discriminator,Vgg_19,predicty,testy,r,p=Auto_paint_self.Auto_ESRGAN_pytorch(vy,vx,upscale,test_size=0.2,valid_size=0.1,k_fold=None,if_best_mode='no',modelpath=None,conv_core_num=64,cov_strides=1,cov_padding='same',conv_core_size=3,generator_deep=5,discriminator_deep=7,Vgg_deep=5,loss_function='default',if_print_model='yes',optimizer='SGD',g_learning_rate=0.001,d_learning_rate=0.01,epochs=2000,batch_size=20,g_train_time=2,ifrandom_split='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构建降尺度网络ESRGAN的pytorch版本
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是三维或四维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是三维或四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，通常第一个维度即时间维要与vy长度相同
upscale：必要参数，整形。该参数代表要将分辨率增强多少倍，如填写2代表将纬度和经度分辨率都增强到原来的2倍，例如原来分辨率为1.0°，增强后则变为0.5°
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
conv_core_num：可选参数，整形。该参数代表卷积层的卷积核个数，默认值为64
cov_strides：可选参数，整形。该参数代表卷积层的卷积步长，默认值为1
cov_padding：可选参数，字符串类型。该参数代表卷积层卷积后是否进行填充。'same'代表填充，'valid'代表不填充。默认值为'same'
conv_core_size：可选参数，整形。该参数代表卷积层卷积核大小，默认值为3
generator_deep：可选参数，整形。该参数代表生成器中循环模块的个数，默认值为5
discriminator_deep：可选参数，整形。该参数代表判别器中循环模块的个数，默认值为7
Vgg_deep：可选参数，整形。该参数代表Vgg网络中循环模块的个数，默认值为5
loss_function：可选参数，字符串类型。该参数代表生成器所使用的损失函数。'default'或者'SSIM+Vgg'代表使用SSIM结构相似度和Vgg特征对比mae作为损失函数；'SSIM'代表使用SSIM结构相似度作为损失函数；'Vgg'代表使用Vgg的特征对比mae作为损失函数；'Pearson'代表使用Pearson相关系数作为损失函数；也可以使用Pearson+Vgg'代表Pearson相关系数和Vgg特征对比共同作为损失函数。损失函数中判别器结果的二进制交叉熵和生成器结果与高分辨率数据的mse是默认包含的。
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前有'SGD'和'Adam'及'NAdam'三种，具体说明可见官网（https://pytorch.org/docs/stable/optim.html）,默认值为'SGD'
g_learning_rate：可选参数，实型。该参数代表生成器的学习率，默认值为0.001
d_learning_rate：可选参数，实型。该参数代表判别器的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，若为0代表网络只用于预测，不进行训练。默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
g_train_time：可选参数，整形。该参数代表训练一次判别器的同时，训练多少次生成器，默认值为2
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割；'all_train'或者'all_test'代表不进行切割，所有数据均用于训练/测试。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存，'every'代表每训练一个epochs均保存一次。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
generator：返回训练好的生成器generator
discriminator：返回训练好的判别器discriminator
Vgg_19：返回用于特征提取的Vgg_19网络
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。

2.148 model,predicty,testy,r,p=Auto_paint_self.Auto_EfficientTempNet_pytorch(vy,vx,test_size=0.2,valid_size=0.1,k_fold=None,if_best_mode='no',modelpath=None,base_layer=16,simpleconv_deep=3,mbconv_deep=2,seradio=0.5,ifrandom_split='yes',if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构建时间超分辨率网络EfficientTempNet的pytorch版本
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的或者二维的。通常与vx的第一个维度即时间维长度相同，第二个维度代表被预报值个数。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表前一个时间帧和后一个时间帧。通常第一个维度即时间维要与vy长度相同
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
base_layer：可选参数，整形。该参数代表网络的起始卷积层个数。网络会根据循环嵌套次数，逐步增加卷积层个数，增加卷积层个数为base_layer的整数倍。默认值为16
simpleconv_deep：可选参数，整形。该参数代表网络中simpleconv的套用层数。默认值为3
mbconv_deep：可选参数，整形。该参数代表网络中mbconv的套用层数。默认值为2
seradio：可选参数，实型。该参数代表se网络中的缩放参数，这个参数的目的是为了减少通道个数从而降低计算量。默认值为0.5
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，默认值为'default'代表'MSELoss'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前有'SGD'和'Adam'及'NAdam'三种，具体说明可见官网（https://pytorch.org/docs/stable/optim.html）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,大部分与loss_function相同，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)。默认值为'default'代表'BCELoss'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型model
predicty：返回测试集预测值y'
testy：返回测试集真实值vy
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。

2.149 generator,discriminator,predicty,testy,r,p=Auto_paint_self.Auto_MSG_SE_Densenet_GAN_pytorch(vy,vx,upscale,test_size=0.2,valid_size=0.1,k_fold=None,if_best_mode='no',modelpath=None,conv_core_num=512,model_deep=5,Vgg_deep=5,se_radio=0.5,loss_function='default',if_print_model='yes',optimizer='SGD',g_learning_rate=0.001,d_learning_rate=0.01,epochs=2000,batch_size=20,g_train_time=2,ifrandom_split='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构建降尺度网络MSG_SE_Densenet_GAN的pytorch版本
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是三维或四维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是三维或四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，通常第一个维度即时间维要与vy长度相同
upscale：必要参数，整形。该参数代表要将分辨率增强多少倍，如填写2代表将纬度和经度分辨率都增强到原来的2倍，例如原来分辨率为1.0°，增强后则变为0.5°
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
conv_core_num：可选参数，整形。该参数代表卷积层的卷积核个数，默认值为512
model_deep：可选参数，整形。该参数代表生成器和判别器中循环模块的个数，默认值为5
Vgg_deep：可选参数，整形。该参数代表Vgg网络中循环模块的个数，默认值为5
se_radio：可选参数，实型。该参数代表se网络中的缩放参数，这个参数的目的是为了减少通道个数从而降低计算量。默认值为0.5
loss_function：可选参数，字符串类型。该参数代表生成器所使用的损失函数。'default'或者'SSIM+Vgg'代表使用SSIM结构相似度和Vgg特征对比mae作为损失函数；'SSIM'代表使用SSIM结构相似度作为损失函数；'Vgg'代表使用Vgg的特征对比mae作为损失函数；'Pearson'代表使用Pearson相关系数作为损失函数；也可以使用Pearson+Vgg'代表Pearson相关系数和Vgg特征对比共同作为损失函数。损失函数中判别器结果的二进制交叉熵和生成器结果与高分辨率数据的mse是默认包含的。
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前有'SGD'和'Adam'及'NAdam'三种，具体说明可见官网（https://pytorch.org/docs/stable/optim.html）,默认值为'SGD'
g_learning_rate：可选参数，实型。该参数代表生成器的学习率，默认值为0.001
d_learning_rate：可选参数，实型。该参数代表判别器的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，若为0代表网络只用于预测，不进行训练。默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
g_train_time：可选参数，整形。该参数代表训练一次判别器的同时，训练多少次生成器，默认值为2
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割；'all_train'或者'all_test'代表不进行切割，所有数据均用于训练/测试。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存，'every'代表每训练一个epochs均保存一次。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
generator：返回训练好的生成器generator
discriminator：返回训练好的判别器discriminator
Vgg_19：返回用于特征提取的Vgg_19网络
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。


2.150 generator,discriminator,predicty,testy,r,p=Auto_paint_self.Auto_MSG_SE_Densenet_GAN(vy,vx,upscale,test_size=0.2,valid_size=0.1,k_fold=None,if_best_mode='no',modelpath=None,conv_core_num=512,model_deep=5,Vgg_deep=5,se_radio=0.5,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,loss_function='default',if_print_model='yes',optimizer='SGD',g_learning_rate=0.001,d_learning_rate=0.01,epochs=2000,g_train_time=2,ifrandom_split='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构建降尺度网络MSG_SE_Densenet_GAN
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是三维或四维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是三维或四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，通常第一个维度即时间维要与vy长度相同
upscale：必要参数，整形。该参数代表要将分辨率增强多少倍，如填写2代表将纬度和经度分辨率都增强到原来的2倍，例如原来分辨率为1.0°，增强后则变为0.5°
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
conv_core_num：可选参数，整形。该参数代表卷积层的卷积核个数，默认值为512
model_deep：可选参数，整形。该参数代表生成器和判别器中循环模块的个数，默认值为5
Vgg_deep：可选参数，整形。该参数代表Vgg网络中循环模块的个数，默认值为5
se_radio：可选参数，实型。该参数代表se网络中的缩放参数，这个参数的目的是为了减少通道个数从而降低计算量。默认值为0.5
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
loss_function：可选参数，字符串类型。该参数代表生成器所使用的损失函数。'default'或者'SSIM+Vgg'代表使用SSIM结构相似度和Vgg特征对比mae作为损失函数；'SSIM'代表使用SSIM结构相似度作为损失函数；'Vgg'代表使用Vgg的特征对比mae作为损失函数；'Pearson'代表使用Pearson相关系数作为损失函数；也可以使用Pearson+Vgg'代表Pearson相关系数和Vgg特征对比共同作为损失函数。损失函数中判别器结果的二进制交叉熵和生成器结果与高分辨率数据的mse是默认包含的。
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
g_learning_rate：可选参数，实型。该参数代表生成器的学习率，默认值为0.001
d_learning_rate：可选参数，实型。该参数代表判别器的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，若为0代表网络只用于预测，不进行训练。默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
g_train_time：可选参数，整形。该参数代表训练一次判别器的同时，训练多少次生成器，默认值为2
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割；'all_train'或者'all_test'代表不进行切割，所有数据均用于训练/测试。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存，'every'代表每训练一个epochs均保存一次。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
generator：返回训练好的生成器generator
discriminator：返回训练好的判别器discriminator
Vgg_19：返回用于特征提取的Vgg_19网络
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。


2.151 generator,discriminator,Vgg_19,predicty,testy,r,p=Auto_paint_self.Auto_ESR_EfficientTemp_GAN(vy,vx,upscale,test_size=0.2,valid_size=0.1,k_fold=None,if_best_mode='no',modelpath=None,conv_core_num=64,cov_strides=1,cov_padding='same',conv_core_size=3,generator_deep=5,discriminator_deep=7,Vgg_deep=5,base_layer=16,simpleconv_deep=3,mbconv_deep=2,seradio=0.5,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,loss_function='default',if_print_model='yes',optimizer='SGD',g_learning_rate=0.001,d_learning_rate=0.01,epochs=2000,batch_size=20,g_train_time=2,ifrandom_split='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构建时空降尺度网络ESR_EfficientTemp_GAN
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是三维或四维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是三维或四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，通常第一个维度即时间维要与vy长度相同
upscale：必要参数，整形。该参数代表要将分辨率增强多少倍，如填写2代表将纬度和经度分辨率都增强到原来的2倍，例如原来分辨率为1.0°，增强后则变为0.5°
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
conv_core_num：可选参数，整形。该参数代表卷积层的卷积核个数，默认值为64
cov_strides：可选参数，整形。该参数代表卷积层的卷积步长，默认值为1
cov_padding：可选参数，字符串类型。该参数代表卷积层卷积后是否进行填充。'same'代表填充，'valid'代表不填充。默认值为'same'
conv_core_size：可选参数，整形。该参数代表卷积层卷积核大小，默认值为3
generator_deep：可选参数，整形。该参数代表生成器中循环模块的个数，默认值为5
discriminator_deep：可选参数，整形。该参数代表判别器中循环模块的个数，默认值为7
Vgg_deep：可选参数，整形。该参数代表Vgg网络中循环模块的个数，默认值为5
base_layer：可选参数，整形。该参数代表网络的起始卷积层个数。网络会根据循环嵌套次数，逐步增加卷积层个数，增加卷积层个数为base_layer的整数倍。默认值为16
simpleconv_deep：可选参数，整形。该参数代表网络中simpleconv的套用层数。默认值为3
mbconv_deep；可选参数，整形。该参数代表网络中mbconv的套用层数。默认值为2
seradio：可选参数，实型。该参数代表se网络中的缩放参数，这个参数的目的是为了减少通道个数从而降低计算量。默认值为0.5
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
loss_function：可选参数，字符串类型。该参数代表生成器所使用的损失函数。'default'或者'SSIM+Vgg'代表使用SSIM结构相似度和Vgg特征对比mae作为损失函数；'SSIM'代表使用SSIM结构相似度作为损失函数；'Vgg'代表使用Vgg的特征对比mae作为损失函数；'Pearson'代表使用Pearson相关系数作为损失函数；也可以使用Pearson+Vgg'代表Pearson相关系数和Vgg特征对比共同作为损失函数。损失函数中判别器结果的二进制交叉熵和生成器结果与高分辨率数据的mse是默认包含的。
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
g_learning_rate：可选参数，实型。该参数代表生成器的学习率，默认值为0.001
d_learning_rate：可选参数，实型。该参数代表判别器的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，若为0代表网络只用于预测，不进行训练。默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
g_train_time：可选参数，整形。该参数代表训练一次判别器的同时，训练多少次生成器，默认值为2
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存，'every'代表每训练一个epochs均保存一次。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
generator：返回训练好的生成器generator
discriminator：返回训练好的判别器discriminator
Vgg_19：返回用于特征提取的Vgg_19网络
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。

2.152 generator,discriminator,Vgg_19,predicty,testy,r,p=Auto_paint_self.Auto_EfficientTemp_ESR_GAN(vy,vx,upscale,test_size=0.2,valid_size=0.1,k_fold=None,if_best_mode='no',modelpath=None,conv_core_num=64,cov_strides=1,cov_padding='same',conv_core_size=3,generator_deep=5,discriminator_deep=7,Vgg_deep=5,base_layer=16,simpleconv_deep=3,mbconv_deep=2,seradio=0.5,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,loss_function='default',if_print_model='yes',optimizer='SGD',g_learning_rate=0.001,d_learning_rate=0.01,epochs=2000,batch_size=20,g_train_time=2,ifrandom_split='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构建时空降尺度网络EfficientTemp_ESR_GAN
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是三维或四维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是三维或四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，通常第一个维度即时间维要与vy长度相同
upscale：必要参数，整形。该参数代表要将分辨率增强多少倍，如填写2代表将纬度和经度分辨率都增强到原来的2倍，例如原来分辨率为1.0°，增强后则变为0.5°
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
conv_core_num：可选参数，整形。该参数代表卷积层的卷积核个数，默认值为64
cov_strides：可选参数，整形。该参数代表卷积层的卷积步长，默认值为1
cov_padding：可选参数，字符串类型。该参数代表卷积层卷积后是否进行填充。'same'代表填充，'valid'代表不填充。默认值为'same'
conv_core_size：可选参数，整形。该参数代表卷积层卷积核大小，默认值为3
generator_deep：可选参数，整形。该参数代表生成器中循环模块的个数，默认值为5
discriminator_deep：可选参数，整形。该参数代表判别器中循环模块的个数，默认值为7
Vgg_deep：可选参数，整形。该参数代表Vgg网络中循环模块的个数，默认值为5
base_layer：可选参数，整形。该参数代表网络的起始卷积层个数。网络会根据循环嵌套次数，逐步增加卷积层个数，增加卷积层个数为base_layer的整数倍。默认值为16
simpleconv_deep：可选参数，整形。该参数代表网络中simpleconv的套用层数。默认值为3
mbconv_deep；可选参数，整形。该参数代表网络中mbconv的套用层数。默认值为2
seradio：可选参数，实型。该参数代表se网络中的缩放参数，这个参数的目的是为了减少通道个数从而降低计算量。默认值为0.5
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
loss_function：可选参数，字符串类型。该参数代表生成器所使用的损失函数。'default'或者'SSIM+Vgg'代表使用SSIM结构相似度和Vgg特征对比mae作为损失函数；'SSIM'代表使用SSIM结构相似度作为损失函数；'Vgg'代表使用Vgg的特征对比mae作为损失函数；'Pearson'代表使用Pearson相关系数作为损失函数；也可以使用Pearson+Vgg'代表Pearson相关系数和Vgg特征对比共同作为损失函数。损失函数中判别器结果的二进制交叉熵和生成器结果与高分辨率数据的mse是默认包含的。
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
g_learning_rate：可选参数，实型。该参数代表生成器的学习率，默认值为0.001
d_learning_rate：可选参数，实型。该参数代表判别器的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，若为0代表网络只用于预测，不进行训练。默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
g_train_time：可选参数，整形。该参数代表训练一次判别器的同时，训练多少次生成器，默认值为2
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存，'every'代表每训练一个epochs均保存一次。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
generator：返回训练好的生成器generator
discriminator：返回训练好的判别器discriminator
Vgg_19：返回用于特征提取的Vgg_19网络
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。

2.153 generator,discriminator,predicty,testy,r,p=Auto_MSG_SE_Densenet_EfficientTemp_GAN(vy,vx,upscale,test_size=0.2,valid_size=0.1,k_fold=None,if_best_mode='no',modelpath=None,conv_core_num=512,model_deep=5,Vgg_deep=5,base_layer=16,simpleconv_deep=3,mbconv_deep=2,se_radio=0.5,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,loss_function='default',if_print_model='yes',optimizer='SGD',g_learning_rate=0.001,d_learning_rate=0.01,epochs=2000,batch_size=20,g_train_time=2,ifrandom_split='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构建时空降尺度网络MSG_SE_Densenet_EfficientTemp_GAN
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是三维或四维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是三维或四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，通常第一个维度即时间维要与vy长度相同
upscale：必要参数，整形。该参数代表要将分辨率增强多少倍，如填写2代表将纬度和经度分辨率都增强到原来的2倍，例如原来分辨率为1.0°，增强后则变为0.5°
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
conv_core_num：可选参数，整形。该参数代表卷积层的卷积核个数，默认值为512
model_deep：可选参数，整形。该参数代表生成器和判别器中循环模块的个数，默认值为5
Vgg_deep：可选参数，整形。该参数代表Vgg网络中循环模块的个数，默认值为5
base_layer：可选参数，整形。该参数代表网络的起始卷积层个数。网络会根据循环嵌套次数，逐步增加卷积层个数，增加卷积层个数为base_layer的整数倍。默认值为16
simpleconv_deep：可选参数，整形。该参数代表网络中simpleconv的套用层数。默认值为3
mbconv_deep；可选参数，整形。该参数代表网络中mbconv的套用层数。默认值为2
se_radio：可选参数，实型。该参数代表se网络中的缩放参数，这个参数的目的是为了减少通道个数从而降低计算量。默认值为0.5
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
loss_function：可选参数，字符串类型。该参数代表生成器所使用的损失函数。'default'或者'SSIM+Vgg'代表使用SSIM结构相似度和Vgg特征对比mae作为损失函数；'SSIM'代表使用SSIM结构相似度作为损失函数；'Vgg'代表使用Vgg的特征对比mae作为损失函数；'Pearson'代表使用Pearson相关系数作为损失函数；也可以使用Pearson+Vgg'代表Pearson相关系数和Vgg特征对比共同作为损失函数。损失函数中判别器结果的二进制交叉熵和生成器结果与高分辨率数据的mse是默认包含的。
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
g_learning_rate：可选参数，实型。该参数代表生成器的学习率，默认值为0.001
d_learning_rate：可选参数，实型。该参数代表判别器的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，若为0代表网络只用于预测，不进行训练。默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
g_train_time：可选参数，整形。该参数代表训练一次判别器的同时，训练多少次生成器，默认值为2
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割；'all_train'或者'all_test'代表不进行切割，所有数据均用于训练/测试。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存，'every'代表每训练一个epochs均保存一次。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
generator：返回训练好的生成器generator
discriminator：返回训练好的判别器discriminator
Vgg_19：返回用于特征提取的Vgg_19网络
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。

2.154 generator,discriminator,predicty,testy,r,p=Auto_paint_self.Auto_EfficientTemp_MSG_SE_Densenet_GAN(vy,vx,upscale,test_size=0.2,valid_size=0.1,k_fold=None,,if_best_mode='no',modelpath=None,conv_core_num=512,model_deep=5,Vgg_deep=5,base_layer=16,simpleconv_deep=3,mbconv_deep=2,se_radio=0.5,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,loss_function='default',if_print_model='yes',optimizer='SGD',g_learning_rate=0.001,d_learning_rate=0.01,epochs=2000,batch_size=20,g_train_time=2,ifrandom_split='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构建时空降尺度网络EfficientTemp_MSG_SE_Densenet_GAN
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是三维或四维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是三维或四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，通常第一个维度即时间维要与vy长度相同
upscale：必要参数，整形。该参数代表要将分辨率增强多少倍，如填写2代表将纬度和经度分辨率都增强到原来的2倍，例如原来分辨率为1.0°，增强后则变为0.5°
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
conv_core_num：可选参数，整形。该参数代表卷积层的卷积核个数，默认值为512
model_deep：可选参数，整形。该参数代表生成器和判别器中循环模块的个数，默认值为5
Vgg_deep：可选参数，整形。该参数代表Vgg网络中循环模块的个数，默认值为5
base_layer：可选参数，整形。该参数代表网络的起始卷积层个数。网络会根据循环嵌套次数，逐步增加卷积层个数，增加卷积层个数为base_layer的整数倍。默认值为16
simpleconv_deep：可选参数，整形。该参数代表网络中simpleconv的套用层数。默认值为3
mbconv_deep；可选参数，整形。该参数代表网络中mbconv的套用层数。默认值为2
se_radio：可选参数，实型。该参数代表se网络中的缩放参数，这个参数的目的是为了减少通道个数从而降低计算量。默认值为0.5
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
loss_function：可选参数，字符串类型。该参数代表生成器所使用的损失函数。'default'或者'SSIM+Vgg'代表使用SSIM结构相似度和Vgg特征对比mae作为损失函数；'SSIM'代表使用SSIM结构相似度作为损失函数；'Vgg'代表使用Vgg的特征对比mae作为损失函数；'Pearson'代表使用Pearson相关系数作为损失函数；也可以使用Pearson+Vgg'代表Pearson相关系数和Vgg特征对比共同作为损失函数。损失函数中判别器结果的二进制交叉熵和生成器结果与高分辨率数据的mse是默认包含的。
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
g_learning_rate：可选参数，实型。该参数代表生成器的学习率，默认值为0.001
d_learning_rate：可选参数，实型。该参数代表判别器的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，若为0代表网络只用于预测，不进行训练。默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
g_train_time：可选参数，整形。该参数代表训练一次判别器的同时，训练多少次生成器，默认值为2
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割；'all_train'或者'all_test'代表不进行切割，所有数据均用于训练/测试。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存，'every'代表每训练一个epochs均保存一次。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
generator：返回训练好的生成器generator
discriminator：返回训练好的判别器discriminator
Vgg_19：返回用于特征提取的Vgg_19网络
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。

2.155 generator,discriminator,predicty,testy,r,p=Auto_paint_self.Auto_ESR_EfficientTemp_GAN_pytorch(vy,vx,upscale,test_size=0.2,valid_size=0.1,k_fold=None,,if_best_mode='no',modelpath=None,conv_core_num=64,cov_strides=1,cov_padding='same',conv_core_size=3,generator_deep=5,discriminator_deep=7,Vgg_deep=5,base_layer=16,simpleconv_deep=3,mbconv_deep=2,seradio=0.5,loss_function='default',if_print_model='yes',optimizer='SGD',g_learning_rate=0.001,d_learning_rate=0.01,epochs=2000,batch_size=20,g_train_time=2,ifrandom_split='yes',ifmute='no',ifsave='no',savepath=None,device='cpu'):
该函数用于构建时空降尺度网络ESR_EfficientTemp_GAN的pytorch版本
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是三维或四维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是三维或四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，通常第一个维度即时间维要与vy长度相同
upscale：必要参数，整形。该参数代表要将分辨率增强多少倍，如填写2代表将纬度和经度分辨率都增强到原来的2倍，例如原来分辨率为1.0°，增强后则变为0.5°
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
conv_core_num：可选参数，整形。该参数代表卷积层的卷积核个数，默认值为64
cov_strides：可选参数，整形。该参数代表卷积层的卷积步长，默认值为1
cov_padding：可选参数，字符串类型。该参数代表卷积层卷积后是否进行填充。'same'代表填充，'valid'代表不填充。默认值为'same'
conv_core_size：可选参数，整形。该参数代表卷积层卷积核大小，默认值为3
generator_deep：可选参数，整形。该参数代表生成器中循环模块的个数，默认值为5
discriminator_deep：可选参数，整形。该参数代表判别器中循环模块的个数，默认值为7
Vgg_deep：可选参数，整形。该参数代表Vgg网络中循环模块的个数，默认值为5
base_layer：可选参数，整形。该参数代表网络的起始卷积层个数。网络会根据循环嵌套次数，逐步增加卷积层个数，增加卷积层个数为base_layer的整数倍。默认值为16
simpleconv_deep：可选参数，整形。该参数代表网络中simpleconv的套用层数。默认值为3
mbconv_deep：可选参数，整形。该参数代表网络中mbconv的套用层数。默认值为2
seradio：可选参数，实型。该参数代表se网络中的缩放参数，这个参数的目的是为了减少通道个数从而降低计算量。默认值为0.5
loss_function：可选参数，字符串类型。该参数代表生成器所使用的损失函数。'default'或者'SSIM+Vgg'代表使用SSIM结构相似度和Vgg特征对比mae作为损失函数；'SSIM'代表使用SSIM结构相似度作为损失函数；'Vgg'代表使用Vgg的特征对比mae作为损失函数；'Pearson'代表使用Pearson相关系数作为损失函数；也可以使用Pearson+Vgg'代表Pearson相关系数和Vgg特征对比共同作为损失函数。损失函数中判别器结果的二进制交叉熵和生成器结果与高分辨率数据的mse是默认包含的。
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前有'SGD'和'Adam'及'NAdam'三种，具体说明可见官网（https://pytorch.org/docs/stable/optim.html）,默认值为'SGD'
g_learning_rate：可选参数，实型。该参数代表生成器的学习率，默认值为0.001
d_learning_rate：可选参数，实型。该参数代表判别器的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，若为0代表网络只用于预测，不进行训练。默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
g_train_time：可选参数，整形。该参数代表训练一次判别器的同时，训练多少次生成器，默认值为2
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割；'all_train'或者'all_test'代表不进行切割，所有数据均用于训练/测试。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存，'every'代表每训练一个epochs均保存一次。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
generator：返回训练好的生成器generator
discriminator：返回训练好的判别器discriminator
Vgg_19：返回用于特征提取的Vgg_19网络
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。

2.156 generator,discriminator,predicty,testy,r,p=Auto_paint_self.Auto_EfficientTemp_ESR_GAN_pytorch(vy,vx,upscale,test_size=0.2,valid_size=0.1,k_fold=None,,if_best_mode='no',modelpath=None,conv_core_num=64,cov_strides=1,cov_padding='same',conv_core_size=3,generator_deep=5,discriminator_deep=7,Vgg_deep=5,base_layer=16,simpleconv_deep=3,mbconv_deep=2,seradio=0.5,loss_function='default',if_print_model='yes',optimizer='SGD',g_learning_rate=0.001,d_learning_rate=0.01,epochs=2000,batch_size=20,g_train_time=2,ifrandom_split='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构建时空降尺度网络Auto_EfficientTemp_ESR_GAN的pytorch版本
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是三维或四维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是三维或四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，通常第一个维度即时间维要与vy长度相同
upscale：必要参数，整形。该参数代表要将分辨率增强多少倍，如填写2代表将纬度和经度分辨率都增强到原来的2倍，例如原来分辨率为1.0°，增强后则变为0.5°
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
conv_core_num：可选参数，整形。该参数代表卷积层的卷积核个数，默认值为64
cov_strides：可选参数，整形。该参数代表卷积层的卷积步长，默认值为1
cov_padding：可选参数，字符串类型。该参数代表卷积层卷积后是否进行填充。'same'代表填充，'valid'代表不填充。默认值为'same'
conv_core_size：可选参数，整形。该参数代表卷积层卷积核大小，默认值为3
generator_deep：可选参数，整形。该参数代表生成器中循环模块的个数，默认值为5
discriminator_deep：可选参数，整形。该参数代表判别器中循环模块的个数，默认值为7
Vgg_deep：可选参数，整形。该参数代表Vgg网络中循环模块的个数，默认值为5
base_layer：可选参数，整形。该参数代表网络的起始卷积层个数。网络会根据循环嵌套次数，逐步增加卷积层个数，增加卷积层个数为base_layer的整数倍。默认值为16
simpleconv_deep：可选参数，整形。该参数代表网络中simpleconv的套用层数。默认值为3
mbconv_deep：可选参数，整形。该参数代表网络中mbconv的套用层数。默认值为2
seradio：可选参数，实型。该参数代表se网络中的缩放参数，这个参数的目的是为了减少通道个数从而降低计算量。默认值为0.5
loss_function：可选参数，字符串类型。该参数代表生成器所使用的损失函数。'default'或者'SSIM+Vgg'代表使用SSIM结构相似度和Vgg特征对比mae作为损失函数；'SSIM'代表使用SSIM结构相似度作为损失函数；'Vgg'代表使用Vgg的特征对比mae作为损失函数；'Pearson'代表使用Pearson相关系数作为损失函数；也可以使用Pearson+Vgg'代表Pearson相关系数和Vgg特征对比共同作为损失函数。损失函数中判别器结果的二进制交叉熵和生成器结果与高分辨率数据的mse是默认包含的。
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前有'SGD'和'Adam'及'NAdam'三种，具体说明可见官网（https://pytorch.org/docs/stable/optim.html）,默认值为'SGD'
g_learning_rate：可选参数，实型。该参数代表生成器的学习率，默认值为0.001
d_learning_rate：可选参数，实型。该参数代表判别器的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，若为0代表网络只用于预测，不进行训练。默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
g_train_time：可选参数，整形。该参数代表训练一次判别器的同时，训练多少次生成器，默认值为2
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割；'all_train'或者'all_test'代表不进行切割，所有数据均用于训练/测试。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存，'every'代表每训练一个epochs均保存一次。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
generator：返回训练好的生成器generator
discriminator：返回训练好的判别器discriminator
Vgg_19：返回用于特征提取的Vgg_19网络
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。


2.157 generator,discriminator,predicty,testy,r,p=Auto_paint_self.Auto_MSG_SE_Densenet_EfficientTempt_GAN_pytorch(vy,vx,upscale,test_size=0.2,valid_size=0.1,k_fold=None,,if_best_mode='no',modelpath=None,conv_core_num=512,model_deep=5,Vgg_deep=5,se_radio=0.5,loss_function='default',if_print_model='yes',optimizer='SGD',g_learning_rate=0.001,d_learning_rate=0.01,epochs=2000,batch_size=20,g_train_time=2,ifrandom_split='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构建时空降尺度网络MSG_SE_Densenet_EfficientTempt_GAN的pytorch版本
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是三维或四维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是三维或四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，通常第一个维度即时间维要与vy长度相同
upscale：必要参数，整形。该参数代表要将分辨率增强多少倍，如填写2代表将纬度和经度分辨率都增强到原来的2倍，例如原来分辨率为1.0°，增强后则变为0.5°
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
conv_core_num：可选参数，整形。该参数代表卷积层的卷积核个数，默认值为512
model_deep：可选参数，整形。该参数代表生成器和判别器中循环模块的个数，默认值为5
Vgg_deep：可选参数，整形。该参数代表Vgg网络中循环模块的个数，默认值为5
base_layer：可选参数，整形。该参数代表网络的起始卷积层个数。网络会根据循环嵌套次数，逐步增加卷积层个数，增加卷积层个数为base_layer的整数倍。默认值为16
simpleconv_deep：可选参数，整形。该参数代表网络中simpleconv的套用层数。默认值为3
mbconv_deep：可选参数，整形。该参数代表网络中mbconv的套用层数。默认值为2
se_radio：可选参数，实型。该参数代表se网络中的缩放参数，这个参数的目的是为了减少通道个数从而降低计算量。默认值为0.5
loss_function：可选参数，字符串类型。该参数代表生成器所使用的损失函数。'default'或者'SSIM+Vgg'代表使用SSIM结构相似度和Vgg特征对比mae作为损失函数；'SSIM'代表使用SSIM结构相似度作为损失函数；'Vgg'代表使用Vgg的特征对比mae作为损失函数；'Pearson'代表使用Pearson相关系数作为损失函数；也可以使用Pearson+Vgg'代表Pearson相关系数和Vgg特征对比共同作为损失函数。损失函数中判别器结果的二进制交叉熵和生成器结果与高分辨率数据的mse是默认包含的。
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前有'SGD'和'Adam'及'NAdam'三种，具体说明可见官网（https://pytorch.org/docs/stable/optim.html）,默认值为'SGD'
g_learning_rate：可选参数，实型。该参数代表生成器的学习率，默认值为0.001
d_learning_rate：可选参数，实型。该参数代表判别器的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，若为0代表网络只用于预测，不进行训练。默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
g_train_time：可选参数，整形。该参数代表训练一次判别器的同时，训练多少次生成器，默认值为2
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割；'all_train'或者'all_test'代表不进行切割，所有数据均用于训练/测试。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存，'every'代表每训练一个epochs均保存一次。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
generator：返回训练好的生成器generator
discriminator：返回训练好的判别器discriminator
Vgg_19：返回用于特征提取的Vgg_19网络
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。

2.158 generator,discriminator,predicty,testy,r,p=Auto_paint_self.Auto_EfficientTempt_MSG_SE_Densenet_GAN_pytorch(vy,vx,upscale,test_size=0.2,valid_size=0.1,k_fold=None,,if_best_mode='no',modelpath=None,conv_core_num=512,model_deep=5,Vgg_deep=5,se_radio=0.5,loss_function='default',if_print_model='yes',optimizer='SGD',g_learning_rate=0.001,d_learning_rate=0.01,epochs=2000,batch_size=20,g_train_time=2,ifrandom_split='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构建时空降尺度网络EfficientTempt_MSG_SE_Densenet_GAN的pytorch版本
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是三维或四维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是三维或四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，通常第一个维度即时间维要与vy长度相同
upscale：必要参数，整形。该参数代表要将分辨率增强多少倍，如填写2代表将纬度和经度分辨率都增强到原来的2倍，例如原来分辨率为1.0°，增强后则变为0.5°
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
conv_core_num：可选参数，整形。该参数代表卷积层的卷积核个数，默认值为512
model_deep：可选参数，整形。该参数代表生成器和判别器中循环模块的个数，默认值为5
Vgg_deep：可选参数，整形。该参数代表Vgg网络中循环模块的个数，默认值为5
base_layer：可选参数，整形。该参数代表网络的起始卷积层个数。网络会根据循环嵌套次数，逐步增加卷积层个数，增加卷积层个数为base_layer的整数倍。默认值为16
simpleconv_deep：可选参数，整形。该参数代表网络中simpleconv的套用层数。默认值为3
mbconv_deep：可选参数，整形。该参数代表网络中mbconv的套用层数。默认值为2
se_radio：可选参数，实型。该参数代表se网络中的缩放参数，这个参数的目的是为了减少通道个数从而降低计算量。默认值为0.5
loss_function：可选参数，字符串类型。该参数代表生成器所使用的损失函数。'default'或者'SSIM+Vgg'代表使用SSIM结构相似度和Vgg特征对比mae作为损失函数；'SSIM'代表使用SSIM结构相似度作为损失函数；'Vgg'代表使用Vgg的特征对比mae作为损失函数；'Pearson'代表使用Pearson相关系数作为损失函数；也可以使用Pearson+Vgg'代表Pearson相关系数和Vgg特征对比共同作为损失函数。损失函数中判别器结果的二进制交叉熵和生成器结果与高分辨率数据的mse是默认包含的。
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前有'SGD'和'Adam'及'NAdam'三种，具体说明可见官网（https://pytorch.org/docs/stable/optim.html）,默认值为'SGD'
g_learning_rate：可选参数，实型。该参数代表生成器的学习率，默认值为0.001
d_learning_rate：可选参数，实型。该参数代表判别器的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，若为0代表网络只用于预测，不进行训练。默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
g_train_time：可选参数，整形。该参数代表训练一次判别器的同时，训练多少次生成器，默认值为2
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割；'all_train'或者'all_test'代表不进行切割，所有数据均用于训练/测试。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存，'every'代表每训练一个epochs均保存一次。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
generator：返回训练好的生成器generator
discriminator：返回训练好的判别器discriminator
Vgg_19：返回用于特征提取的Vgg_19网络
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。

2.159 matched_vx=Auto_paint_self.Auto_cdf_matching(vx,vy)
该函数用于进行CDF匹配
输入值：
vx：必要参数，np.array类型。该参数代表要做CDF匹配的原始数据，最多支持到4维。
vy：必要参数，np.array类型。该参数代表要做CDF匹配的目标数据，最多支持到4维，其维度和每个维度大小必须与vx相同。
返回值：
matched_vx：返回做完CDF匹配的vx的结果

2.160 middle_frame,vy,r,p=Auto_paint_self.Auto_optical_flow(vx,vy=None,winsize=None)
该函数使用光流法进行时间插帧
输入值：
vx：必要参数，np.array类型。该参数代表要做时间插帧的原始数据，必须是四维的（时间维，纬度维，经度维，2），其中最后一个维度代表前一时刻时间帧和后一时刻时间帧。
vy：可选参数，np.array类型。该参数代表时间插帧结果真实值，当为None值时，函数不计算插帧结果和真实值的相关系数和显著性，否则会计算插帧结果和真实值的相关系数和显著性，必须是三维的（时间维，纬度维，经度维）。
winsize：可选参数，整形。该参数代表用于计算光流的窗口大小。在计算光流时，算法会在每个像素点周围建立一个 winsize x winsize 的窗口。这个窗口内的像素点将用于估计该像素点的运动向量。为None时，winsize等于图像长和宽平均的1/10。默认值为None
返回值：
middle_frame：返回时间插帧结果
vy：如果输入值vy不为nan，则把它原封不动返回
r：如果输入值vy不为nan，则计算时间插帧结果和真实值之间的相关系数r
r：如果输入值vy不为nan，则计算时间插帧结果和真实值之间的相关系数显著性p

2.161 Auto_paint_self.Auto_pcolormesh(x,y,v,ifself_vmax_vmin='no',selfvmax=None,selfvmin=None,xlabelname='x',ylabelname='y',title=None,shadedcolor=None,valuemodel='+-',labelsize=20,ifcolorbar='yes',iftest='no',ifsave='no',savename=None,dpi=600)
该函数用于绘制马赛克图
输入值：
x：必要参数，np.array类型。该参数代表马赛克图的x轴数据，必须是一维的。
y：必要参数，np.array类型。该参数代表马赛克图的y轴数据，必须是一维的。
v：必要参数，np.array类型。该参数代表绘制马赛克图的数据v，必须是二维的，其中第一个维度与y长度相同，第二个维度与x长度相同。
ifself_vmax_vmin：可选参数，字符串类型。该参数代表是否要手动设定变量v的最大值与最小值。只对填色图和等值线图部分生效。'yes'表示手动设定，'no'表示不手动设定，'both'表示设定的最上界和最下界以外的值统一用相同颜色表示（即contourf中extend参数采用'both'）。注意，当valuemodel为'+-'或'-+'时，由于要保持colorbar的对称性，故最大值和最小值仍然按照vmax和vmin中绝对值最大的一个来取，故绝对值较小者的设定会失效（并非bug）。默认值为'no'
selfvmax：可选参数，实型。该参数表示手动设定的变量v的最大值。默认值为None
selfvmin：可选参数，实型。该参数表示手动设定的变量v的最小值。默认值为None
xlabelname：可选参数，字符串类型。该参数代表x轴的名称。默认值为'x'。
ylabelname：可选参数，字符串类型。该参数代表y轴的名称。默认值为'y'。
title：可选参数，字符串类型。该参数表明需要设定的图题名称。默认值为' '，即不设定图题名称。
shadedcolor：可选参数，字符串类型。该参数代表马赛克图的填色，可以由读者自定义填色图的颜色，如'BrBG'为低值棕色，高值绿色，适合绘制LAI（leaf area index即叶面积指数）图。具体颜色代码见网址（https://blog.csdn.net/baishuiniyaonulia/article/details/81416649）
valuemodel：可选参数，字符串类型。该参数设定了画图的颜色分布。+-’代表变量有正有负，并且需要正值为红色，负值为蓝色（适合温度距平填色图）；‘-+’代表变量有正有负，并且需要正值为蓝色，负值为红色；‘+’代表变量只有正或者负，并且需要大值为红色，小值为蓝色；‘-’代表变量只有正或者负，并且需要大值为蓝色，小值为红色;'+r'代表红色为小值，白色为大值;'-r'代表蓝色为小值，白色为大值。默认值为'+-'
labelsize：可选参数，整形。该参数表明绘制图中各种字体的大小，包括标题和坐标轴刻度值的字体大小。默认值为20
ifcolorbar：可选参数，字符串类型。该参数表明是否绘制色标，填写‘yes’代表绘制，‘no’代表不绘制。默认值为'no'。
iftest：可选参数，字符串类型。该参数代表是否要在马赛克图每个方格的正中央正中央标记该方格具体数值，'yes'代表标记，'no'代表不标记。默认值为'no',
ifsave：可选参数，字符串类型。该参数代表是否要保存图片，填写‘yes’代表保存图片，‘no’代表不保存图片。默认为'no'。
savename：可选参数，字符串类型。该参数代表保存图片的路径和图片名称，如果ifsave为'yes',则必须手动赋值，如'E:/SVD.png'；ifsave为‘no’可以输入任意值；默认值为None。
dpi：可选参数，整形。该参数可以改变画图所要求的dpi。默认值为600.
返回值：
该函数没有返回值

2.162 model,predicty,testy,r,p,weights=Auto_paint_self.Auto_ANN_KAN_pytorch(vy,vx,model_list,test_size=0.2,valid_size=0.1,k_fold=None,,task_mode='regression',if_best_mode='no',modelpath=None,kan_hide_num=5,k_res=3,ifrandom_split='yes',if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构建KAN网络pytorch版本,该函数目前处于测试阶段（效果不如使用MLP即FC/Linear/Dense层）
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是二维的。第一个维度代表时间维，第二个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的神经网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['kan',4]代表插入一层kan层，神经元个数为4；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
kan_hide_num：可选参数，整形。该参数代表kan网络的隐藏层个数。默认值为5
k_res：可选参数，整形。该参数代表kan网络的样条函数阶数，不推荐0阶和1阶，建议至少2阶起步。默认值为3
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割，'all_test'代表所有数据均用于测试。默认值为'yes'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，默认值为'default'在task_mode为'regression'时代表'MSELoss'，在task_mode为'binary_classify'时代表'BCELoss'，在task_mode为'multi_classify'时代表'CrossEntropyLoss'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前有'SGD'和'Adam'及'NAdam'三种，具体说明可见官网（https://pytorch.org/docs/stable/optim.html）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,大部分与loss_function相同，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，在进行二分类和多分类时使用torchmetrics库包（https://lightning.ai/docs/torchmetrics/stable/classification）。默认值为'default'在task_mode为'regression'时代表'BCELoss'，在task_mode为'binary_classify'时代表'F1Score'，在task_mode为'multi_classify'时代表'Accuracy'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,大部分与loss_function相同，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，在进行二分类和多分类时使用torchmetrics库包（https://lightning.ai/docs/torchmetrics/stable/classification）。默认值为'default'在task_mode为'regression'时代表'BCELoss'，在task_mode为'binary_classify'时代表'F1Score'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'或者'shap'代表使用shap库计算贡献率，填写'oob'代表使用oob方法计算贡献率，填写'no'代表不计算贡献率。默认值为'yes'代表使用shap方法计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型model
predicty：返回测试集预测值y'
testy：返回测试集真实值vy
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.163 model,predicty,testy,r,p,heatmap,weights=Auto_paint_self.Auto_CNN_KAN_pytorch(vy,vx,model_list,test_size=0.2,valid_size=0.1,k_fold=None,,task_mode='regression',if_best_mode='no',modelpath=None,ifrandom_split='yes',cov_padding='same',cov_strides=1,pooling_strides=2,kan_hide_num=5,k_res=3,if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifheatmap='yes',ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构建卷积神经网络_KAN-Pytorch版本,该函数目前处于测试阶段（效果不如使用MLP即FC/Linear/Dense层）
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的神经网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['cov',[64,3,3]]代表插入一层卷积层，神经元个数为64，卷积核大小为(3,3)；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['kan',4]代表插入一层kan层，神经元个数为4；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割，'all_test'代表所有数据均用于测试。默认值为'yes'
cov_padding：可选参数，字符串类型。该参数代表卷积层是否进行边缘填充，'same'代表填充成与输入值相同大小,'valid'代表不进行填充。默认值为'same'
cov_strides：可选参数，整形。该参数代表卷积层的步长，默认值为1
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
kan_hide_num：可选参数，整形。该参数代表kan网络的隐藏层个数。默认值为5
k_res：可选参数，整形。该参数代表kan网络的样条函数阶数，不推荐0阶和1阶，建议至少2阶起步。默认值为3
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，默认值为'default'在task_mode为'regression'时代表'MSELoss'，在task_mode为'binary_classify'时代表'BCELoss'，在task_mode为'multi_classify'时代表'CrossEntropyLoss'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前有'SGD'和'Adam'及'NAdam'三种，具体说明可见官网（https://pytorch.org/docs/stable/optim.html）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,大部分与loss_function相同，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，在进行二分类和多分类时使用torchmetrics库包（https://lightning.ai/docs/torchmetrics/stable/classification）。默认值为'default'在task_mode为'regression'时代表'BCELoss'，在task_mode为'binary_classify'时代表'F1Score'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifheatmap：可选参数，字符串类型。该参数代表是否要返回贡献率图heatmap，'yes'代表返回，填写其他值代表不返回（返回结果为None）。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'或者'shap'代表使用shap库计算贡献率，填写'oob'代表使用oob方法计算贡献率，填写'no'代表不计算贡献率。默认值为'yes'代表使用shap方法计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型model
predicty：返回测试集预测值y'
testy：返回测试集真实值vy
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
heatmap：返回贡献图heatmap，仅在ifheatmap为'yes'时有值，否则为None
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.164 wasserstein_distance_original,wasserstein_distance_white_noise,wasserstein_distance_p=Auto_paint_self.Auto_wasserstein_stability_analysis(vx,vy,p=0.01)
该函数用于做wasserstein稳定性分析
输入值：
vx：必要参数，np.array格式。该参数代表做稳定性分析的第一个变量，可以是一维或者三维的。注意，vx和vy应在各个维度上长度相同
vy：必要参数，np.array格式。该参数代表做稳定性分析的第二个变量，可以是一维或者三维的。注意，vx和vy应在各个维度上长度相同
p：可选参数，实型。该参数代表wasserstein稳定性分析的显著性水平。默认值为0.01
返回值：
wasserstein_distance_original：返回vx和vy的wasserstein距离
wasserstein_distance_white_noise：返回加入了白噪声的vx和vy的wasserstein距离
wasserstein_distance_p：返回vx和vy之间的wasserstein稳定性，输出为1代表不稳定，输出为0代表稳定

2.165 best_max_layers,best_max_depth,best_min_samples_split,best_min_child_samples,best_r=Auto_paint_self.Auto_DeepForest_Bayesian_Optimization(vx,vy,test_size=0.25,task_mode='regression',ifrandom_split='yes',max_layers_range=[10,40],max_depth_range=[10,100],min_samples_split_range=[2,20],min_child_samples_range=[2,40],n_estimators=2,n_trees=100,use_predictor=True,predictor='forest',init_points=10,n_iter=0,metrics='default',ifmute='no')
该函数用于深度森林的贝叶斯调优
输入值：
vx：必要参数，np.array类型。该参数代表预报因子的值，其必须为二维的，其中第一维为时间维度，与vy长度一致，第二维的长度和预报因子数量相同。vx由预报因子做空间平均后叠加，并且翻转第一维和第二维而成。
vy：必要参数，np.array类型。该参数代表预报量的真实值，其必须为一维的，只保留时间维度。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.25
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
max_layers_range：可选参数，tumple类型。该参数代表贝叶斯调优的最大深林级联数量范围。默认值为[10,40]代表最大深林级联数量控制在10到40之间
max_depth_range：可选参数，tumple类型。该参数代表贝叶斯调优的最大树深度范围。默认值为[10,100]代表最大树深度控制在10到100之间
min_samples_split_range：可选参数，tumple类型。该参数代表贝叶斯调优的最小拆分叶子节点样本数范围。默认值为[2,20]代表最小拆分叶子节点样本数控制在2到20之间
min_child_samples_range：可选参数，tumple类型。该参数代表贝叶斯调优的最小叶子节点样本数范围。默认值为[2,40]代表最小叶子节点样本数控制在2到40之间
n_estimators：可选参数，整形。代表模型中森林的数量。越多的森林意味着模型精度越高但是越浪费计算机计算时间，越少的森林意味着越节约计算机计算资源但是模型精度越低。默认值为2
n_trees：可选参数，整形。代表每个森林中树的数量。越多的树意味着模型精度越高但是越浪费计算机计算时间，越少的树意味着越节约计算机计算资源但是模型精度越低。默认值为100
use_predictor：可选参数，布尔类型。该参数代表是否构建与森林串联的预测期。默认值为True
predictor：可选参数，字符串类型。该参数代表与森林串联的预测期类型，只有在use_predictor为True时才生效。可选值有'lightgbm','xgboost','lightgbm'。默认值为'forest'
init_points：可选参数，整形。该参数代表贝叶斯调优的随机调优次数。默认值为10
n_iter：可选参数，整形。该参数代表贝叶斯调优的深度调优次数。默认值为0
metrics：可选参数，字符串类型。该参数代表模型所使用的评估标准。根据task_mode的不同而填写不同参数；当task_mode为'binary_classify'时，填写default或者f1代表使用f1指数作为评估标准，填写recall代表使用召回率作为评估标准，填写precision代表使用精确率作为评估标准；当task_mode为'regression'时填写default或者pearson代表使用相关系数作为评估标准，填写mse代表使用均方根误差作为评估标准；当task_mode为'multi_classify'时填写default或accuracy代表使用准确率作为评估标准。默认值为'default'
ifmute：可选参数，字符串类型。代表是否打印调优的最优参数和最优TCC。默认值为'no'代表打印
返回值：
best_max_layers：返回贝叶斯调优的最优最大深林级联数量
best_max_depth：返回贝叶斯调优的最优最大树深度
best_min_samples_split：返回贝叶斯调优的最优最小拆分叶子节点样本数
best_min_child_samples：返回贝叶斯调优的最优最小叶子节点样本数
best_r：返回贝叶斯调优的最优结果r

2.166 model,predicty,testy,r,p,weights=Auto_paint_self.Auto_DeepForest(vy,vx,test_size = 0.25,task_mode='regression',if_best_mode='no',modelpath=None,ifcross_validation='no',k_fold_num=5,default_max_layers=20,default_max_depth=50,default_min_samples_split=2,default_min_child_samples=2,n_estimators=2,n_trees=100,use_predictor=True,predictor='forest',metrics='default',ifmute='no',ifweight='yes',ifrandom_split='yes',ifsave='no',savepath=None)
该函数用于机器学习deep-forest的参数调优，以及进行deep-forest模型训练。#注：模型部分参数可以参考网址（https://deep-forest.readthedocs.io/en/stable/api_reference.html）
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，其必须为一维的，只保留时间维度。
vx：必要参数，np.array类型。该参数代表预报因子的值，其必须为二维的，其中第一维为时间维度，与vy长度一致，第二维的长度和预报因子数量相同。vx由预报因子做空间平均后叠加，并且翻转第一维和第二维而成。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.25
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表所输入的参数（default_max_depth，default_num_leaves，default_min_child_samples）是否为最优，以及是否需要调优。'no'代表输入参数不是最优，需要调优；'yes'输入参数为最优，不需要调优；'load'代表从指定路径载入训练好的模型。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
ifcross_validation：可选参数，字符串类型。该参数代表是否要做K折交叉验证，'yes'代表做，'no'代表不做。默认值为'no'
k_fold_num：可选参数，整形。该参数代表做K折交叉验证时所指定K值。默认值为5即做5折交叉验证
default_max_layers：可选参数，整形。代表初始的最大深林级联数量，最大深林级联数量代表模型的级联层最多有多少层，过深的模型可能会导致过拟合，而过浅的模型可能会导致预测准确率低。默认值为20
default_max_depth：可选参数，整形。代表初始的最大树深度，最大树深度代表模型的树最多有多少层，过深的模型可能会导致过拟合，而过浅的模型可能会导致预测准确率低。默认值为50
default_min_samples_split：可选参数，整形。代表初始的最小拆分叶子节点样本数，最小拆分叶子节点样本数代表需要拆分节点时，节点上至少有多少个样本才可以被拆分，过大的最小拆分叶子节点样本数可能会导致欠拟合，而过小的最小拆分叶子节点样本数可能会导致过拟合。默认值为2
default_min_child_samples：可选参数，整形。代表初始的每个叶子节点上的最小样本数，每个叶子节点上的最小样本数代表每个叶子节点上最少有多少个样本，否则将该叶子节点剔除，将样本回归到父节点上。每个叶子节点上的最小样本数过少可能会导致过拟合，每个叶子节点上的最小样本数过多可能会导致预测准确率低。默认值为20
n_estimators：可选参数，整形。代表模型中森林的数量。越多的森林意味着模型精度越高但是越浪费计算机计算时间，越少的森林意味着越节约计算机计算资源但是模型精度越低。默认值为2
n_trees：可选参数，整形。代表每个森林中树的数量。越多的树意味着模型精度越高但是越浪费计算机计算时间，越少的树意味着越节约计算机计算资源但是模型精度越低。默认值为100
use_predictor：可选参数，布尔类型。该参数代表是否构建与森林串联的预测期。默认值为True
predictor：可选参数，字符串类型。该参数代表与森林串联的预测期类型，只有在use_predictor为True时才生效。可选值有'lightgbm','xgboost','lightgbm'。默认值为'forest'
metrics：可选参数，字符串类型。该参数代表模型所使用的评估标准。根据task_mode的不同而填写不同参数；当task_mode为'binary_classify'时，填写default或者f1代表使用f1指数作为评估标准，填写recall代表使用召回率作为评估标准，填写precision代表使用精确率作为评估标准；当task_mode为'regression'时填写default或者pearson代表使用相关系数作为评估标准，填写mse代表使用均方根误差作为评估标准；当task_mode为'multi_classify'时填写default或accuracy代表使用准确率作为评估标准。默认值为'default'
ifmute：可选参数，字符串类型。代表是否打印调优次数以及是否打印每次调优时的预测值与真实值的相关系数。默认值为'no'代表打印
ifweight：可选参数，字符串类型。该参数代表是否要输出每个预报因子对于预报值的预报贡献以及使用什么模型计算预报因子贡献，'yes'或者'shap'代表使用shp模型输出预报因子贡献，'PI'代表使用permutation_importance模型输出预报因子贡献，'no'代表不输出。默认值为'yes'
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
返回值：
model：返回训练好的最优模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None
weights：如果ifweight不为'no'，则返回预报因子的贡献率；否则返回None

2.167 best_x_name,best_vx,best_trainx,best_testx,best_r=Auto_paint_self.Auto_DeepForest_chose(vy,vx,x_name=None,test_size=0.25,task_mode='regression',if_best_mode='no',chosemode='forward',default_max_layers=20,default_max_depth=50,default_min_samples_split=2,default_min_child_samples=2,n_estimators=2,n_trees=100,use_predictor=True,predictor='forest',metrics='default',ifmute='no',ifweight='yes',ifrandom_split='yes')
该函数用于DeepForest模型前向/后向回归挑选预报因子
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，其必须为一维的，只保留时间维度。
vx：必要参数，np.array类型。该参数代表预报因子的值，其必须为二维的，其中第一维为时间维度，与vy长度一致，第二维的长度和预报因子数量相同。vx由预报因子做空间平均后叠加，并且翻转第一维和第二维而成。
x_name：可选参数，np.array类型。该参数代表vx即各个预报因子的名称，用于模型输出结果时预报因子名称的输出，如果为None则自动赋值数字1到n，n为预报因子个数。默认值为None
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.25
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表所输入的参数（default_max_depth，default_num_leaves，default_min_child_samples）是否为最优，以及是否需要调优。在该模型中，使用贝叶斯调优。'no'代表输入参数不是最优，需要调优；'yes'输入参数为最优，不需要调优。默认值为'no'
chosemode：可选参数，字符串类型。该参数代表模型是使用前向回归还是后向回归。'forward'代表前项回归，'backward'代表后向回归。默认值为'forward'
default_max_layers：可选参数，整形。代表初始的最大深林级联数量，最大深林级联数量代表模型的级联层最多有多少层，过深的模型可能会导致过拟合，而过浅的模型可能会导致预测准确率低。默认值为20
default_max_depth：可选参数，整形。代表初始的最大树深度，最大树深度代表模型的树最多有多少层，过深的模型可能会导致过拟合，而过浅的模型可能会导致预测准确率低。默认值为50
default_min_samples_split：可选参数，整形。代表初始的最小拆分叶子节点样本数，最小拆分叶子节点样本数代表需要拆分节点时，节点上至少有多少个样本才可以被拆分，过大的最小拆分叶子节点样本数可能会导致欠拟合，而过小的最小拆分叶子节点样本数可能会导致过拟合。默认值为2
default_min_child_samples：可选参数，整形。代表初始的每个叶子节点上的最小样本数，每个叶子节点上的最小样本数代表每个叶子节点上最少有多少个样本，否则将该叶子节点剔除，将样本回归到父节点上。每个叶子节点上的最小样本数过少可能会导致过拟合，每个叶子节点上的最小样本数过多可能会导致预测准确率低。默认值为20
n_estimators：可选参数，整形。代表模型中森林的数量。越多的森林意味着模型精度越高但是越浪费计算机计算时间，越少的森林意味着越节约计算机计算资源但是模型精度越低。默认值为2
n_trees：可选参数，整形。代表每个森林中树的数量。越多的树意味着模型精度越高但是越浪费计算机计算时间，越少的树意味着越节约计算机计算资源但是模型精度越低。默认值为100
use_predictor：可选参数，布尔类型。该参数代表是否构建与森林串联的预测期。默认值为True
predictor：可选参数，字符串类型。该参数代表与森林串联的预测期类型，只有在use_predictor为True时才生效。可选值有'lightgbm','xgboost','lightgbm'。默认值为'forest'
metrics：可选参数，字符串类型。该参数代表模型所使用的评估标准。根据task_mode的不同而填写不同参数；当task_mode为'binary_classify'时，填写default或者f1代表使用f1指数作为评估标准，填写recall代表使用召回率作为评估标准，填写precision代表使用精确率作为评估标准；当task_mode为'regression'时填写default或者pearson代表使用相关系数作为评估标准，填写mse代表使用均方根误差作为评估标准；当task_mode为'multi_classify'时填写default或accuracy代表使用准确率作为评估标准。默认值为'default'
ifmute：可选参数，字符串类型。代表是否不打印调优次数以及是否打印每次加入/剔除模型的预报因子。默认值为'no'代表打印
ifweight：可选参数，字符串类型。该参数代表是否使用贡献率作为挑选预报因子的标准以及使用什么模型计算预报因子贡献，'yes'或者'shap'代表使用shp模型计算预报因子贡献，'PI'代表使用permutation_importance模型计算预报因子贡献，'no'代表不使用贡献率作为挑选预报因子的标准。默认值为'yes'
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
返回值：
best_x_name：返回模型挑选的最好的预报因子名称
best_vx：返回模型挑选的最好的预报因子序列
best_trainx：返回模型挑选的最好的预报因子训练集序列
best_testx：返回模型挑选的最好的预报因子测试集序列
best_r：返回模型测试集中最优的预报因子组合所达到的最高的预测值与准确值的相关系数

2.168 model,predicty,testy,r,p,weights=Auto_paint_self.Auto_TransUnet(vy,vx,downnum,covnum,test_size=0.2,valid_size=0.1,k_fold=None,,task_mode='regression',if_best_mode='no',modelpath=None,ifrandom_split='yes',baselayer=64,cov_method='cov',cov_kernelsize=3,cov_strides=1,pool_strides=2,if_weight_initialize='no',weight_initialize_method='TruncatedNormal',weight_initialize_parameter1=0.00,weight_initialize_parameter2=0.05,trans_num=2,num_heads=2,key_dim=64,trans_dropout_rate=0.0,activate='tanh',if_last_act='no',if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构造TransUnet网络
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是三维的。其前三个维度分别对应（时间，纬度，经度）
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。
downnum：必要参数，整形。该参数代表Unet网络的深度。下采样/上采样次数为网络深度-1。当数据的纬度和经度比较小时，网络深度不要过深，否则可能导致下层的下采样使得输入数据经度/纬度长度小于0
covnum：必要参数，整形。该参数代表每层网络要进行多少次卷积。卷积不会导致输入值和输出值在时间/经度/纬度上缺失（默认做补全操作）
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
baselayer：可选参数，整形。该参数代表起始卷积核个数，每做一次下采样，卷积核个数都会增加一倍。默认值为64
cov_method：可选参数，字符串类型。该参数代表卷积的类型，'cov'代表做Conv2D卷积，而'localcov'代表做LocallyConv2D卷积。注意，LocallyConv2D卷积代表卷积核不共享，将会导致过大的内存占用。默认值为'cov'
cov_kernelsize：可选参数，整形。该参数代表卷积核大小。默认值为3
cov_strides：可选参数，整形。该参数代表卷积层的步长。默认值为1
pool_method：可选参数，字符串类型。该参数代表池化方法，'maxpoolng'代表做最大值池化,'avepooling'代表做平均池化。默认值为'maxpooling'
poolkernelsize：可选参数，整形。该参数代表池化核大小。默认值为2
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
ifnormalization：可选参数，字符串类型。该参数代表是否做归一化操作，'yes'代表做，'no'代表不做。默认值为'no'
normalization_method：可选参数，字符串类型。该参数代表做归一化操作的方法，只有在ifnormalization为'yes'时才会生效。填写'batchnormalization'代表做全局归一化，填写'LayerNormalization'代表做层归一化。默认值为None
if_weight_initialize：可选参数，字符串类型。该参数代表是否进行权重矩阵初始化，'yes'代表是，'no'代表否，默认值为'no'
weight_initialize_method：可选参数，字符串类型。该参数代表权重矩阵初始化方法，'RandomNormal'代表采用随机正态分布初始化，'RandomUniform'代表采用随机均值分布初始化，'TruncatedNormal'代表使用截断正态分布初始化。默认值为'TruncatedNormal'
weight_initialize_parameter1：可选参数，实型。该参数代表权重矩阵初始化的第一个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布均值，当weight_initialize_method为'RandomUniform'时代表均值分布的最小值。默认值为0.00
weight_initialize_parameter2：可选参数，实型。该参数代表权重矩阵初始化的第二个参数，当weight_initialize_method为'RandomNormal'或者'TruncatedNormal'代表正态分布标准差，当weight_initialize_method为'RandomUniform'时代表均值分布的最大值。默认值为0.05
trans_num：可选参数，整形。该参数代表模型中使用多少个Transformer。默认值为2
num_heads：可选参数，整形。该参数代表多头自注意模块中头的数量。默认值为2
key_dim：可选参数，整形。该参数代表多头自注意模块中键的数量。默认值为64
trans_dropout_rate：可选参数，实型。该参数代表transform模块中dropout的比率。默认值为0.0
activate：可选参数，字符串类型。该参数代表卷积使用的激活函数。默认值为'tanh'
if_last_act：可选参数，字符串类型。该参数代表最后一层卷积后，是否使用激活函数；填写'no'表示最后一层不使用激活函数，填写激活函数名称代表使用激活函数。通常回归任务最后一层不使用激活函数，分类任务最后一层使用。默认值为'no'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://keras.io/api/losses/regression_losses/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryCrossentropy'，在task_mode为'multi_classify'时代表'CategoricalCrossentropy'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前只有'SGD'和'Adam'两种，具体说明可见官网（https://keras.io/api/optimizers/）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,具体可选参数可查询官网(https://keras.io/api/metrics/)，默认值为'default'在task_mode为'regression'时代表'MeanSquaredError'，在task_mode为'binary_classify'时代表'BinaryAccuracy'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifweight：可选参数，字符串类型。该参数代表是否使用贡献率作为挑选预报因子的标准，'yes'代表是，'no'代表否。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.169 model,predicty,testy,r,p,weights=Auto_paint_self.Auto_TransUnet_pytorch(vy,vx,downnum,covnum,test_size=0.2,valid_size=0.1,k_fold=None,,task_mode='regression',if_best_mode='no',modelpath=None,ifrandom_split='yes',baselayer=64,cov_kernelsize=3,cov_strides=1,pool_method='maxpooling',pool_kernel_size=2,pool_strides=2,ifnormalization='no',normalization_method=None,trans_num=2,num_heads=2,dim_feedforward=256,trans_dropout_rate=0.0,activate='tanh',if_last_act='no',if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构造TransUnet网络Pytorch版本
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是三维的。其前三个维度分别对应（时间，纬度，经度）
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。
downnum：必要参数，整形。该参数代表Unet网络的深度。下采样/上采样次数为网络深度-1。当数据的纬度和经度比较小时，网络深度不要过深，否则可能导致下层的下采样使得输入数据经度/纬度长度小于0
covnum：必要参数，整形。该参数代表每层网络要进行多少次卷积。卷积不会导致输入值和输出值在时间/经度/纬度上缺失（默认做补全操作）
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割，'all_test'代表所有数据均用于测试。默认值为'yes'
baselayer：可选参数，整形。该参数代表起始卷积核个数，每做一次下采样，卷积核个数都会增加一倍。默认值为64
cov_kernelsize：可选参数，整形。该参数代表卷积核大小。默认值为3
cov_strides：可选参数，整形。该参数代表卷积层的步长。默认值为1
pool_method：可选参数，字符串类型。该参数代表池化方法，'maxpoolng'代表做最大值池化,'avepooling'代表做平均池化。默认值为'maxpooling'
poolkernelsize：可选参数，整形。该参数代表池化核大小。默认值为2
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
ifnormalization：可选参数，字符串类型。该参数代表是否做归一化操作，'yes'代表做，'no'代表不做。默认值为'no'
normalization_method：可选参数，字符串类型。该参数代表做归一化操作的方法，只有在ifnormalization为'yes'时才会生效。填写'batchnormalization'代表做全局归一化，填写'LayerNormalization'代表做层归一化。默认值为None
trans_num：可选参数，整形。该参数代表模型中使用多少个Transformer。默认值为2
num_heads：可选参数，整形。该参数代表多头自注意模块中头的数量。默认值为2
dim_feedforward：可选参数，整形。该参数代表encoder中前馈神经网络中神经元的个数。默认值为256
trans_dropout_rate：可选参数，实型。该参数代表Transformer encoder层中随机丢弃数据/网络节点的比率，用于防止过拟合。默认值为0.0
activate：可选参数，字符串类型。该参数代表卷积使用的激活函数。默认值为'tanh'
if_last_act：可选参数，字符串类型。该参数代表最后一层卷积后，是否使用激活函数。通常回归任务最后一层不使用激活函数，分类任务最后一层使用；填写'no'表示最后一层不使用激活函数，填写激活函数名称代表使用激活函数。默认值为'no'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，默认值为'default'在task_mode为'regression'时代表'MSELoss'，在task_mode为'binary_classify'时代表'BCELoss'，在task_mode为'multi_classify'时代表'CrossEntropyLoss'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前有'SGD'和'Adam'及'NAdam'三种，具体说明可见官网（https://pytorch.org/docs/stable/optim.html）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,大部分与loss_function相同，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，在进行二分类和多分类时使用torchmetrics库包（https://lightning.ai/docs/torchmetrics/stable/classification）。默认值为'default'在task_mode为'regression'时代表'BCELoss'，在task_mode为'binary_classify'时代表'F1Score'，在task_mode为'multi_classify'时代表'Accuracy'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,大部分与loss_function相同，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，在进行二分类和多分类时使用torchmetrics库包（https://lightning.ai/docs/torchmetrics/stable/classification）。默认值为'default'在task_mode为'regression'时代表'BCELoss'，在task_mode为'binary_classify'时代表'F1Score'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifweight：可选参数，字符串类型。该参数代表是否使用贡献率作为挑选预报因子的标准，'yes'代表是，'no'代表否。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.170 Auto_paint_self.Auto_ERA5_download(dataset,year_range,variable,cdsapi_file=None,product_type=None,month_range='all',day_range='all',time_range='all',pressure=None,latlow=-90,lattop=90,lonleft=-180,lonright=180,data_format='netcdf',download_format='unarchived')
该函数用于申请ERA5数据
输入值：
dataset：必要参数，字符串类型。该参数代表申请下载的数据集，例如"reanalysis-era5-single-levels"。
year_range：必要参数，list类型。该参数代表申请下载数据的年份范围，例如[1940,2020]代表下载从1940年到2020年的数据（包括2020年）
variable：必要参数，字符串类型。该参数代表申请下载变量名称。
cdsapi_file：可选参数，字符串类型。该参数代表.cdsapi文件的路径，如果设置为None，则代表从c盘用户目录下读取。默认值为None
product_type：可选参数，字符串类型。该参数代表申请下载数据的类型，如果设置为None默认申请下载reanalysis即再分析数据。默认值为None
month_range：可选参数，字符串类型或list类型。该参数代表申请下载数据的月份范围，例如[1,12]代表从1月下载到12月（包括12月），填写'all'代表下载所有月份数据。默认值为'all'
day_range：可选参数，字符串类型或者list类型。该参数代表申请下载数据的日范围，例如[1,31]代表从1日下载到31日（包括31日），填写'all'代表下载所有日数据。默认值为'all'
time_range：可选参数，字符串类型或者list类型。该参数代表申请下载数据的小时范围，例如填写[0,23]代表从0时下载到23时，填写'all'代表下载所有小时数据。默认值为'all'
pressure：可选参数，list类型。该参数代表申请下载数据的层次，例如填写[1000,925,850]代表下载1000hPa，925hPa和850hPa3个层次；填写None时代表不下载pressure level数据。默认值为None
latlow：可选参数，整形。该参数代表下载数据的最低纬度，默认值为-90
lattop：可选参数，整形。该参数代表下载数据的最高纬度，默认值为90
lonleft：可选参数，整形。该参数代表下载数据的最左经度，默认值为-180
lonright：可选参数，整形。该参数代表下载数据的最右经度，默认值为180
data_format：可选参数，字符串类型。该参数代表下载数据的格式。默认值为'netcdf'（还可选择'grib'代表下载二进制类型数据）
download_format：可选参数，字符串类型。该参数代表下载数据是否压缩。默认值为'unarchived'（还可选择'zip'代表压缩数据）

2.171 hr_bottom_up_path,lr_bottom_up_path,top_down_path,predicty,testy,r,p=Auto_paint_self.Auto_VDVAE_SR_pytorch(vy,vx,upscale,test_size=0.2,valid_size=0.1,k_fold=None,,if_best_mode='no',modelpath=None,base_layer=64,pool_method='maxpooling',normalization_method=None,hr_bottom_up_path_deep=4,lr_bottom_up_path_deep=3,res_block_deep=3,loss_function='default',if_print_model='yes',optimizer='SGD',learning_rate=0.01,epochs=2000,batch_size=20,ifrandom_split='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于建立VDVAE_SR模型进行空间降尺度
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是三维或四维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是三维或四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，通常第一个维度即时间维要与vy长度相同
upscale：必要参数，整形。该参数代表要将分辨率增强多少倍，如填写2代表将纬度和经度分辨率都增强到原来的2倍，例如原来分辨率为1.0°，增强后则变为0.5°
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
base_layer：可选参数，整形。该参数代表起始卷积核个数，每做一次下采样，卷积核个数都会增加一倍。默认值为64
pool_method：可选参数，字符串类型。该参数代表池化方法，'maxpoolng'代表做最大值池化,'avepooling'代表做平均池化。默认值为'maxpooling'
normalization_method：可选参数，字符串类型。该参数代表做归一化操作的方法，填写'batchnormalization'代表做全局归一化，填写'LayerNormalization'代表做层归一化，填写'no'代表不做归一化。默认值为'no'
hr_bottom_up_path_deep：可选参数，整形。该参数代表处理高分辨率数据网络的深度，默认值为4
lr_bottom_up_path_deep：可选参数，整形。该参数代表处理低分辨率数据网络的深度，默认值为3
res_block_deep：可选参数，整形。该参数代表每个base block中Resnet模块的个数，默认值为3
loss_function：可选参数，字符串类型。该参数代表生成器所使用的损失函数。'default'或者'MAE'代表使用MAE平均绝对误差；'SSIM'代表使用SSIM结构相似度作为损失函数；'Pearson'代表使用Pearson相关系数作为损失函数；也可以使用PSNR代表使用峰值信噪比作为损失函数。默认值为default
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前有'SGD'和'Adam'及'NAdam'三种，具体说明可见官网（https://pytorch.org/docs/stable/optim.html）,默认值为'SGD'
learning_rate：可选参数，实型。该参数代表模型的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，若为0代表网络只用于预测，不进行训练。默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割；'all_train'或者'all_test'代表不进行切割，所有数据均用于训练/测试。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
hr_bottom_up_path：返回训练好的高分辨率处理模块hr_bottom_up_path
lr_bottom_up_path：返回训练好的低分辨率处理模块lr_bottom_up_path
top_down_path：返回训练好的decoder模块top_down_path
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。

2.172 VAE_encoder_model,VAE_decoder_model,unet_model,predicty,testy,r,p=Auto_paint_self.Auto_Latent_Diffusion_Model_pytorch(vy,vx,upscale=2,test_size=0.2,valid_size=0.1,k_fold=None,,if_best_mode='no',modelpath=None,num_groups=1,resnet_deep=4,VAE_deep=3,Vgg_deep=3,unet_deep=3,conv_core_num=128,conv_core_size=3,cov_strides=1,cov_padding='same',noise_step_num=100,epochs=200,batch_size=20,test_interval=10,ifrandom_split='yes',if_print_model='yes',loss_function='default',optimizer='SGD',learning_rate=0.01,ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于建立Latent_Diffusion_Model模型进行空间降尺度
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是三维或四维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是三维或四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，通常第一个维度即时间维要与vy长度相同
upscale：必要参数，整形。该参数代表要将分辨率增强多少倍，如填写2代表将纬度和经度分辨率都增强到原来的2倍，例如原来分辨率为1.0°，增强后则变为0.5°
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
num_groups：可选参数，整形。该参数代表做组归一化时，分组的个数。默认值为1
resnet_deep：可选参数，整形。该参数代表内部resnet网络的深度。默认值为4
VAE_deep：可选参数，整形。该参数代表VAE_encoder和VAE_decoder网络的深度，注意该网络每深一层，图像尺寸变为原来的1/2。默认值为3
Vgg_deep：可选参数，整形。该参数代表用于计算特征相似度的Vgg网络的深度。默认值为3
unet_deep：可选参数，整形。该参数该参数代表unet网络的的深度，注意该网络每深一层，图像尺寸变为原来的1/2。默认值为3
conv_core_num：可选参数，整形。该参数代表网络的基础通道数，网络加深会使得网络通道数变为该数的整数倍。默认值为128
conv_core_size：可选参数，整形。该参数代表卷积层卷积核大小，默认值为3
cov_strides：可选参数，整形。该参数代表卷积层的卷积步长，默认值为1
cov_padding：可选参数，字符串类型。该参数代表卷积层卷积后是否进行填充。'same'代表填充，'valid'代表不填充。默认值为'same'
noise_step_num：可选参数，整形。该参数该参数代表降噪的步数，注意训练时，该参数最好可以被epochs整除。默认值为100
epochs：可选参数，整形。该参数代表网络训练次数，若为0代表网络只用于预测，不进行训练，注意训练时，该参数最好是noise_step_num的整数倍。默认值为200
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
test_interval：可选参数，整形。该参数代表测试模块每训练多少次，会执行一次。默认值为10
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割；'all_train'或者'all_test'代表不进行切割，所有数据均用于训练/测试。默认值为'yes'
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表生成器所使用的损失函数。'default'或者'MAE'代表使用MAE平均绝对误差；'SSIM'代表使用SSIM结构相似度作为损失函数；'Pearson'代表使用Pearson相关系数作为损失函数；也可以使用PSNR代表使用峰值信噪比作为损失函数。默认值为default
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前有'SGD'和'Adam'及'NAdam'三种，具体说明可见官网（https://pytorch.org/docs/stable/optim.html）,默认值为'SGD'
learning_rate：可选参数，实型。该参数代表模型的学习率，默认值为0.01
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
VAE_encoder_model：返回训练好的VAE_encoder_model
VAE_decoder_model：返回训练好的VAE_decoder_model
unet_model：返回训练好的unet_model
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。

2.173 model,predicty,testy,r,p=Auto_paint_self.Auto_SRFlow_pytorch(vy,vx,upscale,test_size=0.2,valid_size=0.1,k_fold=None,,if_best_mode='no',modelpath=None,num_levels=4,num_flow_steps=3,base_layer=64,loss_function='default',if_print_model='yes',optimizer='SGD',learning_rate=0.01,epochs=2000,batch_size=20,ifrandom_split='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数英语使用SRFlow网络进行降尺度
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是三维或四维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是三维或四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，通常第一个维度即时间维要与vy长度相同
upscale：必要参数，整形。该参数代表要将分辨率增强多少倍，如填写2代表将纬度和经度分辨率都增强到原来的2倍，例如原来分辨率为1.0°，增强后则变为0.5°
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
num_levels：可选参数，整形。该参数代表整个网络中包含多少个大的base block。默认值为4
num_flow_steps：可选参数，整形。该参数代表每个大的base block中的actnorm,invert_conv,affine_injector和conditional_affine_coupling这样的组合循环使用多少次。默认值为3
base_layer：可选参数，整形。该参数代表网络的起始卷积层个数。网络会根据循环嵌套次数，逐步增加卷积层个数，增加卷积层个数为base_layer的整数倍。默认值为64
loss_function：可选参数，字符串类型。该参数代表生成器所使用的损失函数。'default'或者'MAE'代表使用MAE平均绝对误差；'SSIM'代表使用SSIM结构相似度作为损失函数；'Pearson'代表使用Pearson相关系数作为损失函数；也可以使用PSNR代表使用峰值信噪比作为损失函数。默认值为default
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前有'SGD'和'Adam'及'NAdam'三种，具体说明可见官网（https://pytorch.org/docs/stable/optim.html）,默认值为'SGD'
learning_rate：可选参数，实型。该参数代表模型的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，若为0代表网络只用于预测，不进行训练，注意训练时，该参数最好是noise_step_num的整数倍。默认值为200
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
test_interval：可选参数，整形。该参数代表测试模块每训练多少次，会执行一次。默认值为10
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割；'all_train'或者'all_test'代表不进行切割，所有数据均用于训练/测试。默认值为'yes'
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的model
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。


2.174 Auto_paint_self.Auto_check_data_time(directory,timename,start_date,end_date)
该函数用于检查nc数据中时间是否与给定时间对应
输入值：
directory：必要参数，字符串类型。该参数代表需要检查的文件的保存路径。
timename：必要参数，字符串类型。该参数代表nc文件的时间维度名称。
start_date：必要参数，字符串类型。该参数代表需要检查的起始时间
end_date：必要参数，字符串类型。该参数代表需要检查的结束时间
返回值：
该参数没有返回值

2.175 model,predicty,testy,r,p,heatmap,weights=Auto_VIT_pytorch(vy,vx,model_list,test_size=0.2,valid_size=0.1,k_fold=None,,task_mode='regression',if_best_mode='no',modelpath=None,ifrandom_split='yes',patch_size=None,dim_feedforward=16,vit_deep=1,num_heads=1,dropout=0.0,pooling_strides=2,if_print_model='yes',loss_function='default',optimizer='SGD',metrics='default',learning_rate=0.01,epochs=2000,batch_size=20,ifheatmap='yes',ifweight='yes',ifmute='no',ifsave='no',savepath=None,device='cpu')
该函数用于构建VIT网络-Pytorch版本
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，必须是一维的。通常与vx的第一个维度即时间维长度相同。
vx：必要参数，np.array类型。该参数代表预报因子的值，必须是四维的。第一个维度代表时间维，第二个维度代表纬度维，第三个维度代表经度维，第四个维度代表有多少个预报因子。通常第一个维度即时间维要与vy长度相同
model_list：必要参数，tumple类型。该参数代表构建的神经网络架构。按照[[],[],[],[],...]的格式进行构建。其中第二个中括号内代表一层网络。例如['vit',64]代表插入一层vit层，神经元个数为64；['maxpooling',[2,2]]代表插入一层最大值池化层，池化核大小为(2,2)；['avepooling',[2,2]]代表插入一层平均值池化层，池化核大小为(2,2)；['batchnormalization']代表插入一层全局归一化层，进行归一化；['layernormalization']代表插入一层局地归一化层，进行归一化；['activation','sigmoid']代表插入一层激活层，激活函数使用sigmoid函数；['flatten']代表插入一层把多维数据转化为一位数据的层；['fc',1024]代表插入一层全连接层，神经元个数为1024；['dropout',0.3]代表插入一层dropout层用于随机丢弃一部分数据，随机丢弃30％的数据。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
task_mode：可选参数，字符串类型。该参数代表模型要做的任务，'regression'代表要做回归任务，'binary_classify'代表要做二分类任务，'multi_classify'代表要做多分类任务。默认值为'regression'
if_best_mode：可选参数，字符串类型。该参数代表是否要载入训练好的模型，'no'代表不载入，'yes'或者'load'代表载入。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割，'all_test'代表所有数据均用于测试。默认值为'yes'
patch_size：可选参数，整形。该参数代表vit中，每个分割图像块的大小。必须要能被图像的height和weight整除。填写None时，将会自动寻找最优patch_size。默认值为None
dim_feedforward：可选参数，整形。代表线性变换层的最后一个维度channel大小。默认值为16
vit_deep：可选参数，整形。代表使用的Transformer模块的数量。默认值为1
num_heads：可选参数，整形。代表多头自注意力的头数量，默认值为1
dropout：可选参数，实型。该参数代表网络中丢弃多少百分比的神经元。默认值为0.0
pooling_strides：可选参数，整形。该参数代表池化层的步长，默认值为2
if_print_model：可选参数，字符串类型。该参数代表是否要打印构建网络架构图，'yes'代表打印，'no'代表不打印。默认值为'yes'
loss_function：可选参数，字符串类型。该参数代表网络所使用的loss_function，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，默认值为'default'在task_mode为'regression'时代表'MSELoss'，在task_mode为'binary_classify'时代表'BCELoss'，在task_mode为'multi_classify'时代表'CrossEntropyLoss'
optimizer：可选参数，字符串类型。该参数代表网络所使用的优化器，目前有'SGD'和'Adam'及'NAdam'三种，具体说明可见官网（https://pytorch.org/docs/stable/optim.html）,默认值为'SGD'
metrics：可选参数，字符串类型。该参数代表网络所使用的指标,大部分与loss_function相同，具体可选参数可查询官网(https://pytorch.org/docs/stable/nn.html#loss-functions)，在进行二分类和多分类时使用torchmetrics库包（https://lightning.ai/docs/torchmetrics/stable/classification）。默认值为'default'在task_mode为'regression'时代表'BCELoss'，在task_mode为'binary_classify'时代表'F1Score'，在task_mode为'multi_classify'时代表'Accuracy'
learning_rate：可选参数，实型。该参数代表网络的学习率，默认值为0.01
epochs：可选参数，整形。该参数代表网络训练次数，默认值为2000
batch_size：可选参数，整形。该参数代表网络每次训练多少个样本，默认值为20
ifheatmap：可选参数，字符串类型。该参数代表是否要返回贡献率图heatmap，'yes'代表返回，填写其他值代表不返回（返回结果为None）。默认值为'yes'
ifweight：可选参数，字符串类型。该参数代表是否要计算各个预报因子的相对贡献率，填写'yes'或者'shap'代表使用shap库计算贡献率，填写'oob'代表使用oob方法计算贡献率，填写'no'代表不计算贡献率。默认值为'yes'代表使用shap方法计算贡献率
ifmute：可选参数，字符串类型。代表是否不打印调优结果。默认值为'no'代表打印
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的模型model
predicty：返回测试集预测值y'
testy：返回测试集真实值vy
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None。
heatmap：返回贡献图heatmap，仅在ifheatmap为'yes'时有值，否则为None
weights：返回计算的各个预报因子贡献率，仅在ifweight不为'no'时有值，否则为None

2.176 v,lon,lat,levels,latlow,lattop,lonleft,lonright,times=Auto_paint_self.open_data_tif(tifmode,filename,v_name,iftime,timename,timestart,timeend,iflon,lonname,iflat,latname,latlow,lattop,lonleft,lonright,latresolution,lonresolution,ifexper,iflevel,levelname,level,changeresolution=1,timespace=1,ifchange_west_east='no',ifinterpolate='no')

该函数用于读取单个或多个tif文件并且进行时间、空间上的范围圈定，并且返回与变量有关的各种时间、空间信息
输入值：
tifmode：必要参数，字符串类型。该参数设定为是读取单个tif文件还是读取多个tif文件，'one'代表读取单个tif文件，'more_time'代表读取多个tif文件，tif文件按照时间分隔，'more_level'代表读取多个tif文件，tif文件按照层次分隔。
filename：必要参数，字符串类型。若tifmode为'one'或'one_wrf',则该参数设定为要读取的tif文件的路径，如'E:/hgt.tif'；若tifmode为'more_time'或'more_level',则该参数设定为装载多个tif文件的文件夹，如'E:/hgt/'(hgt文件夹中有多个tif文件，其按照时间分割)。
v_name：必要参数，字符串类型。该参数设定为tif文件中要读取变量的名称，如'temperature'。
iftime：必要参数，字符串类型。该参数代表tif文件是否有时间维，'yes'代表有，'no'代表没有，'self'代表变量时间为自定义时间（时间不是datetime格式）。如果ncmode为'more_time'，还可以填写'create'代表读取的多个tif文件没有时间维，自己指定tif文件的时间。
timename：必要参数，字符串类型。该参数设定为nc文件中变量的时间维名称，如'time'。如果iftime为'create'则填写自己想要命名时间维度的名称。如果iftime为'no'没有时间则可以任意赋值。
timestart：必要参数，字符串类型。该参数代表截取时间的起始日期，根据填写格式的不同而代表时间间隔不同，如'1981'代表时间间隔为年，'1981-01'代表时间间隔为月，'1981-01-01'代表时间间隔为日,'1981-01-01-00'代表时间间隔为小时，'1981-01-01-00-00'代表时间间隔为分钟，'1981-01-01-00-00-00'代表时间间隔为秒。如果iftime为'create'则填写第一个tif文件的时间。如果iftime为'no'没有时间则可以任意赋值。
timeend：必要参数，字符串类型。该参数代表截取时间的结束日期，填写格式同timestart。如果iftime为'create'则填写最后一个tif文件的时间。如果iftime为'no'没有时间则可以任意赋值。
iflon：必要参数，字符串类型。该参数代表nc文件是否有经度维，'yes'代表有，'no'代表没有。
lonname：必要参数，字符串类型。该参数设定为nc文件中变量的经度名称，如'lon'。如果iflon为'no'没有经度维则可以任意赋值。
iflat：必要参数，字符串类型。该参数代表nc文件是否有纬度维，'yes'代表有，'no'代表没有。
latname：必要参数，字符串类型。该参数设定为nc文件中变量的纬度名称，如'lat'。如果iflat为'no'没有纬度维则可以任意赋值。
latlow：必要参数，整形。该参数设定为变量的空间范围中最低纬度，如20。如果iflat为'no'没有纬度维则可以任意赋值。当ifinterpolate为'yes'时，代表插值的最低纬度。
lattop：必要参数，整形。该参数设定为变量的空间范围中最高纬度，如70。如果iflat为'no'没有纬度维则可以任意赋值。当ifinterpolate为'yes'时，代表插值的最高纬度。
lonleft：必要参数，整形。该参数设定为变量的空间范围中最左经度。输入范围请按照原始nc文件lon范围划定；若文件中经度范围为0-360，则小于180代表东半球，大于180代表西半球。若文件中经度范围为-180-180，则小于0代表西半球，大于0代表东半球。输入格式同latlow和lattop。如果iflon为'no'没有经度维则可以任意赋值。当ifinterpolate为'yes'时，代表插值的最左经度。
lonright：必要参数，整形。该参数设定为变量的空间范围中最右经度。输入范围请按照原始nc文件lon范围划定；若文件中经度范围为0-360，则小于180代表东半球，大于180代表西半球。若文件中经度范围为-180-180，则小于0代表西半球，大于0代表东半球。输入格式同latlow和lattop。如果iflon为'no'没有经度维则可以任意赋值。当ifinterpolate为'yes'时，代表插值的最右经度。
latresolution：必要参数，实型。该参数设定为变量空间纬度方向分辨率，如输入0.5代表纬度方向分辨率为0.5。如果iflat为'no'没有纬度维则可以任意赋值。当ifinterpolate为'yes'时，代表插值的纬度分辨率。
lonresolution：必要参数，实型。该参数设定为变量空间经度方向分辨率，如输入0.5代表经度方向分辨率为0.5。如果iflon为'no'没有经度维则可以任意赋值。当ifinterpolate为'yes'时，代表插值的经度分辨率。
ifband：必要参数，字符串类型。该参数代表变量是否有band这个参数，'yes'代表有，'no'代表没有。通常band是tif数据中特有参数。
iflevel：必要参数，字符串类型。该参数代表变量是否有高度层次，'yes'代表有并且选取某一层，'no'代表没有，'all'代表有并且选取全部层次，'self'代表有并且选取其中某个层次区间，'selfchose'代表有并且选取其中某几个层次；当tifmode为'more_level'时可以选择'create'手动创建高度维
levelname：必要参数，字符串类型。该参数设定为变量高度层次的名称，如'level'。若iflevel为'no'则该参数可以任意赋值。
level：必要参数；代表所选取的层次。当iflevel为'yes'时填写某个高度层次，为整形，如'1000'代表选取1000hpa层次；当iflevel为'no'时可以任意赋值；当iflevel为'self'时填写某个高度区间，填写格式如[1000,500]代表选取1000hpa到500hpa之间所有的层次，为tumple类型；当iflevel为'selfchose'填写某几个层次，填写格式如['1000','800','500']代表选取1000hpa，800hpa，500hpa三个层次，为tumple类型；当iflevel为'create'时，填写手动创建的层次，比如要和变量v的数目对应，如读取进来5个文件，填写[100,200,300,400,500]代表创建5个层次的levels
changeresolution：可选参数，整形。该参数用于改变数据的空间分辨率。假如数据空间分辨率为0.1°×0.1°，若该参数填写2，代表改变分辨率到0.2°×0.2°；不改变数据分辨率该参数默认为1。
timespace：可选参数，整形。该参数用于创建时间维时指定时间间隔，只有在iftime为'create'时才会生效。默认值为1
ifchange_west_east：可选参数，字符串类型。该参数代表是否要交换东西半球的数据，'yes'代表交换，'no'代表不交换。目前只能将经度为0°-360°的数据变成-180°-180°或者将-180°-180°的数据变成0°到360°，会自动判别数据属于哪种。对于经度不涵盖全球的数据不支持。默认值为'no'
ifinterpolate：可选参数，字符串类型。该参数代表是否要对tif文件进行空间插值。'yes'代表需要，'no'代表不需要。默认值为'no'
返回值：
v：返回筛选过时间范围和空间范围后的变量。
lon：返回变量的经度维度。
lat：返回变量的纬度维度。
levels：返回变量的高度维度。
latlow：返回变量的最低纬度。
lattop：返回变量的最高纬度。
lonleft：返回变量的最左经度。
lonright：返回变量的最右经度。
times：返回变量的时间维度。

2.177 Auto_paint_self.Auto_petal_plot(v,labels,selfcolor=None,labelsize=20,title=' ',ifsave='no',savename=None)
该函数用于绘制花瓣图
输入值：
v：必要参数，list或者np.array类型。该参数代表绘制花瓣图的变量，必须是一维的。
lables：必要参数，list或者np.array类型。该参数代表代表绘制花瓣图的变量标签，必须和v的长度和和维度一致。
selfcolor：可选参数，字符串类型或者list类型。该参数代表花瓣图的颜色。可以是plt.cm拥有的颜色字符串代码，也可以自己输入list规定每个花瓣颜色；为None时默认分配一个plt.cm下颜色。默认值为None
labelsize：可选参数，整形。该参数代表花瓣图中的文字字体大小。默认值为20
title：可选参数，字符串类型。该参数代表花瓣图图题。默认值为' '代表空图题
ifsave：可选参数，字符串类型。该参数代表是否要保存图像;'yes'代表保存,'no'代表不保存。默认值为'no'
savename：可选参数，字符串类型。该参数代表保存图像的路径，只有ifsave为'yes'时生效。默认值为None
返回值：
该函数没有返回值

2.178 Auto_paint_self.Auto_pie_plot(v,labels,selfcolor=None,labelsize=20,title=' ',ifsave='no',savename=None)
该函数用于绘制饼图图
输入值：
v：必要参数，list或者np.array类型。该参数代表绘制饼图的变量，必须是一维的。
lables：必要参数，list或者np.array类型。该参数代表代表绘制饼图的变量标签，必须和v的长度和和维度一致。
selfcolor：可选参数，字符串类型或者list类型。该参数代表饼图的颜色。可以是plt.cm拥有的颜色字符串代码，也可以自己输入list规定每个扇形颜色；为None时默认分配一个plt.cm下颜色。默认值为None
labelsize：可选参数，整形。该参数代表饼图中的文字字体大小。默认值为20
title：可选参数，字符串类型。该参数代表饼图图题。默认值为' '代表空图题
ifsave：可选参数，字符串类型。该参数代表是否要保存图像;'yes'代表保存,'no'代表不保存。默认值为'no'
savename：可选参数，字符串类型。该参数代表保存图像的路径，只有ifsave为'yes'时生效。默认值为None
返回值：
该函数没有返回值

2.179 Auto_paint_self.Auto_radar_plot(v,labels,selfcolor=None,legend=None,labelsize=20,linewidth=2, vmin=None, vmax=None, space=None,title=' ',ifsave='no',savename=None)
该函数用于绘制雷达图
输入值：
v：必要参数，list或者np.array类型。该参数代表绘制雷达图的变量，可以是一维或者或者二维的。
lables：必要参数，list或者np.array类型。该参数代表代表绘制雷达图的变量标签，必须和v的长度和一致。
selfcolor：可选参数，字符串类型或者list类型。该参数代表雷达图的颜色。必须是单一颜色十六进制或者字符串代码。默认值为None
legend：可选参数，list类型或者字符串类型。该参数代表雷达图变量名称；填写None时时代表代表不绘制legend。默认值为None
labelsize：可选参数，整形。该参数代表雷达图中的文字字体大小。默认值为20
linewidth：可选参数，整形。代表雷达图中线粗。默认值为2,
vmin：可选参数，实型。代表雷达图最外围数字上限。写None时由V的最大值确定。默认值为None
vmax：可选参数，实型。代表雷达图最内圈数字上限。写None时由V的最小值确定。默认值为None,
space：可选参数，整形。该参数代表雷达图中共有多少个圆圈。写None时默认只有5个圆圈。默认值为None
title：可选参数，字符串类型。该参数代表雷达图图题。默认值为' '代表空图题
ifsave：可选参数，字符串类型。该参数代表是否要保存图像;'yes'代表保存,'no'代表不保存。默认值为'no'
savename：可选参数，字符串类型。该参数代表保存图像的路径，只有ifsave为'yes'时生效。默认值为None
返回值：
该函数没有返回值

2.180 model,predicty,testy,r,p,weights=Auto_paint_self.Auto_geoxgboost(vy,vx,lat_col,lon_col,test_size=0.2,valid_size=0.1,k_fold=None,if_best_mode='no',modelpath=None,default_learning_rate=0.5,default_max_depth=50,default_num_leaves=100,default_max_bin=256,default_g_weight=0.5,boosting_type='dart',n_estimators=10000,subsample=0.7,metrics='default',if_early_stopping=None,ifmute='no',ifweight='yes',ifrandom_split='yes',ifsave='no',savepath=None,device='cpu')
该函数用于机器学习geoxgboost的参数调优，以及进行geoxgboost模型训练。#注：模型部分参数可以参考网址（https://geoxgboost.readthedocs.io/en/latest/#geoxgboost-package）
输入值：
vy：必要参数，np.array类型。该参数代表预报量的真实值，其必须为一维的，只保留时间维度。
vx：必要参数，np.array类型。该参数代表预报因子的值，其必须为二维的，其中第一维为时间维度，与vy长度一致，第二维的长度和预报因子数量
相同。vx由预报因子做空间平均后叠加，并且翻转第一维和第二维而成。
lat_col：必要参数，np.array类型。该参数代表数据的纬度信息，长度要与vx的第一维以及vy一致。
lon_col：必要参数，np.array类型。该参数代表数据的经度信息，长度要与vx的第一维以及vy一致。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
if_best_mode：可选参数，字符串类型。该参数代表所输入的参数（default_learning_rate，default_max_depth，default_num_leaves，default_max_bin）是否为最优，以及是否需要调优。'no'代表输入参数不是最优，需要调优；'yes'输入参数为最优，不需要调优；'load'代表从指定路径载入训练好的模型。默认值为'no'
modelpath：可选参数，字符串类型。该参数代表在if_best_mode为'load'时，载入模型的路径。默认值为None
default_learning_rate：可选参数，实型。代表初始的学习率，学习率代表每加入一棵树到模型中其占有权重的大小。跟树的数量有关，加入的树越多，学习率通常越低模型越优，而加入的树越少，通常学习率越高越优。默认值为0.5
default_max_depth：可选参数，整形。代表初始的最大树深度，最大树深度代表模型的树最多有多少层，过深的模型可能会导致过拟合，而过浅的模型可能会导致预测准确率低。默认值为50
default_num_leaves：可选参数，整形。代表初始的最大叶子节点数，最大叶子节点数代表每棵树最多有多少叶子节点，过多的叶子节点可能会导致过拟合，而过少的叶子节点可能会导致预测准确率低。默认值为100
default_max_bin：可选参数，整形。代表最大离散条柱数，最大离散条柱数过多可能会导致过拟合，最大离散条柱数过少可能会导致预测准确率低。默认值为256
default_g_weight：可选参数，实型。该参数代表地理信息权重，地理信息权重过低时退化为普通xgboost，地理信息权重过高时，feature信息利用不充分。默认值为0.5
boosting_type：可选参数，字符串类型。代表做梯度提升的模型算法，'gbtree'代表传统的梯度提升决策树。'dart'代表多个加法回归树。'gblinear'代表线型梯度提升。默认值为'dart'
n_estimators：可选参数，整形。代表xgboost中树的数量。越多的树意味着模型精度越高但是越浪费计算机计算时间，越少的树意味着越节约计算机计算资源但是模型精度越低。通常取1000-10000之间最好。默认值为10000
subsample：可选参数，实型。代表模型中每次训练采用的样本比率（拿来训练的样本数量/训练集中样本数量，不包括测试集数据）。通常在确定预报因子都与预报量有关的情况下，该值不能小于0.5，在0.7到1.0之间最为合适。默认值为0.7
metrics：可选参数，字符串类型。该参数代表模型所使用的评估标准。根据task_mode的不同而填写不同参数；当task_mode为'binary_classify'时，填写default或者f1代表使用f1指数作为评估标准，填写recall代表使用召回率作为评估标准，填写precision代表使用精确率作为评估标准；当task_mode为'regression'时填写default或者pearson代表使用相关系数作为评估标准，填写mse代表使用均方根误差作为评估标准；当task_mode为'multi_classify'时填写default或accuracy代表使用准确率作为评估标准。默认值为'default'
if_early_stopping：可选参数，整形。该参数代表是否要进行早停，填写数字数字代表早停轮次，填写None代表不早停。默认值为None
ifmute：可选参数，字符串类型。代表是否打印调优次数以及是否打印每次调优时的预测值与真实值的相关系数。默认值为'no'代表打印
ifweight：可选参数，字符串类型。该参数代表是否要输出每个预报因子对于预报值的预报贡献以及使用什么模型计算预报因子贡献，'yes'或者'shap'代表使用shp模型输出预报因子贡献，'PI'代表使用permutation_importance模型输出预报因子贡献，'no'代表不输出。默认值为'yes'
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
ifsave：可选参数，字符串类型。该参数代表是否要保存模型，'yes'代表保存，'no'代表不保存。默认值为'no'
savepath：可选参数，字符串类型。该参数代表保存模型的路径，只有在ifsave为'yes'时才生效。默认值为None
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
model：返回训练好的最优模型
predicty：返回测试集的预测值y'
testy：返回测试集真实值y
r：返回预测值y'和真实值vy之间的评估指标r
p：返回预测值y'和真实值vy之间相关系数的显著性水平p。若是分类问题则为None
weights：如果ifweight不为'no'，则返回预报因子的贡献率；否则返回None

2.181 best_learning_rate,best_max_depth,best_num_leaves,best_max_bin,best_r=Auto_paint_self.Auto_geoxgboost_Bayesian_Optimization(vx,vy,test_size=0.2,valid_size=0.1,k_fold=None,ifrandom_split='yes',learning_rate_range=[0.01,1.0],max_depth_range=[10,100],num_leaves_range=[50,150],max_bin_range=[100,300],g_weight_range=[0.0,1.0],boosting_type='dart',n_estimators=10000,subsample=0.7,init_points=10,n_iter=0,metrics='default',if_early_stopping=None,ifmute='no',device='cpu')
该函数用于geoxgboost的贝叶斯调优
输入值：
vx：必要参数，np.array类型。该参数代表预报因子的值，其必须为二维的，其中第一维为时间维度，与vy长度一致，第二维的长度和预报因子数量相同。vx由预报因子做空间平均后叠加，并且翻转第一维和第二维而成。
vy：必要参数，np.array类型。该参数代表预报量的真实值，其必须为一维的，只保留时间维度。
lat_col：必要参数，np.array类型。该参数代表数据的纬度信息，长度要与vx的第一维以及vy一致。
lon_col：必要参数，np.array类型。该参数代表数据的经度信息，长度要与vx的第一维以及vy一致。
test_size：可选参数，实型。该参数代表测试集所占比例，例如0.25代表测试集占25％，而训练集占75％。通常在0.2到0.3之间为好。过大的测试集和过小的训练集可能导致训练样本少而效果差。默认值为0.2
valid_size：可选参数，实型。该参数代表验证集所占比例，例如0.1代表验证集占总体的10％，训练集也要减去对应比例。若test_size为0.2，则最终测试集占20%，验证集占10％，训练集占70％；填写None则代表不切分验证集。默认值为0.1
k_fold：可选参数，整形。该参数代表是否要进行交叉验证，如填写5代表进行5折交叉验证，填写None代表不进行交叉验证。若进行交叉验证，最终结果由k_fold个模型集成得出。默认值为None
ifrandom_split：可选参数，字符串类型。该参数代表是否要将vy和vx进行随机切分成trainy，testy，trainx和testx。'yes'代表随机切割，'no'代表顺序切割。默认值为'yes'
learning_rate_range：可选参数，tumple类型。该参数代表贝叶斯调优的学习率范围。默认值为[0.01,1.0]代表学习率控制在0.01到1.0之间
max_depth_range：可选参数，tumple类型。该参数代表贝叶斯调优的最大树深度范围。默认值为[10,100]代表最大树深度控制在10到100之间
num_leaves_range：可选参数，tumple类型。该参数代表贝叶斯调优的最大叶子节点数范围。默认值为[50,150]代表最大叶子节点数控制在50到150之间
max_bin_range：可选参数，tumple类型。该参数代表贝叶斯调优的最大离散条柱数范围。默认值为[100,300]代表最大离散条柱数控制在100到300之间
g_weight_range：可选参数，tumple类型。该参数代表贝叶斯调优的地理信息权重范围。默认值为[0.0,1.0]代表地理信息权重控制在0.0到1.0之间
boosting_type：可选参数，字符串类型。代表做梯度提升的模型算法，'gbtree'代表传统的梯度提升决策树。'dart'代表多个加法回归树。'gblinear'代表线型梯度提升。默认值为'dart'
n_estimators：可选参数，整形。代表模型中树的数量。越多的树意味着模型精度越高但是越浪费计算机计算时间，越少的树意味着越节约计算机计算资源但是模型精度越低。通常取1000-10000之间最好。默认值为10000
subsample：可选参数，实型。代表模型中每次训练采用的样本比率（拿来训练的样本数量/训练集中样本数量，不包括测试集数据）。通常在确定预报因子都与预报量有关的情况下，该值不能小于0.5，在0.7到1.0之间最为合适。默认值为0.7
init_points：可选参数，整形。该参数代表贝叶斯调优的随机调优次数。默认值为10
n_iter：可选参数，整形。该参数代表贝叶斯调优的深度调优次数。默认值为0
metrics：可选参数，字符串类型。该参数代表模型所使用的评估标准。根据task_mode的不同而填写不同参数；当task_mode为'binary_classify'时，填写default或者f1代表使用f1指数作为评估标准，填写recall代表使用召回率作为评估标准，填写precision代表使用精确率作为评估标准；当task_mode为'regression'时填写default或者pearson代表使用相关系数作为评估标准，填写mse代表使用均方根误差作为评估标准；当task_mode为'multi_classify'时填写default或accuracy代表使用准确率作为评估标准。默认值为'default'
if_early_stopping：可选参数，整形。该参数代表是否要进行早停，填写数字数字代表早停轮次，填写None代表不早停。默认值为None
ifmute：可选参数，字符串类型。代表是否打印调优的最优参数和最优TCC。默认值为'no'代表打印
device：可选参数，字符串类型。该参数代表训练网络使用的设备,'cpu'代表使用cpu训练网络,'gpu'代表使用gpu训练网络。默认值为'cpu'
返回值：
best_learning_rate：返回贝叶斯调优的最优学习率
best_max_depth：返回贝叶斯调优的最优最大树深度
best_num_leaves：返回贝叶斯调优的最优最大叶子节点数
best_max_bin：返回贝叶斯调优的最优最大离散条柱数
best_r：返回贝叶斯调优的最优结果r


附录
#颜色	代码	线型	代码	标记	代码
#蓝	‘b’	实线	‘-’	点	‘.’
#绿	‘g’	虚线	‘–’	x	‘x’
#红	‘r’	虚点	‘-.’	圆圈	‘o’
#青	‘c’	点线	‘:’	三角	‘v’
#紫	‘p’			方块	‘s’
#黄	‘y’			星	‘*’
#黑	‘k’			加号	‘+’
#白	‘w’			菱形	‘D’